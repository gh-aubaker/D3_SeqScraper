;******************************************************************************
;*									      *
;*									      *
;*	PROGRAM NAME:	DUA0:[D3DATA.PCM5.SABL]POLSA.SEQ		      *
;*									      *
;*									      *
;*									      *
;*	PROJECT NAME:	MILLER BREWING, TRENTON, OHIO			      *
;*	PROJECT NUM :	TI 48851 CO					      *
;*	PCM NUMBER  :	PCM5						      *
;*	WRITTEN BY  :	ACJones						      *
;*									      *
;*	DATE	    :	SEP 20, 1993					      *
;*									      *
;*									      *
;*									      *
;*	MODIFICATION LOG						      *
;*									      *
;*	DATE		PATCH ID	DESCRIPTION			      *
;*	----		--------	-----------			      *
;	09-dec-93	acj000		FAT punch list items
;	10-dec-93	acj001		More FAT punch list items
;	27-dec-93	acj002		*Temporary* Comment out lhx,etc.
;					(until pcm4 interface installed)
;	27-dec-93	acj003		Align devices in precoat transfer before
;					checking precoat transfer comm (pcm4).
;	29-dec-93	acj004		Startup changes.
;       05-jan-94	AWM005		Moved the stopping of the bodyfeed pump
;					before closing the valves.
;       06-JAN-94	AWM006		Added over and under range checks for the
;					filter diff pressure ai value.
;	09-jan-94	acj005		Startup changes.
;	10-jan-94	acj006		Startup changes.
;	18-jan-94	acj007		Startup changes.
;	20-jan-94	acj008		Correct common unit variable equate
;					names (per MBC naming convention).
;	2/27/94		JOH009		SPIRE B HOPS INJECTION
;	2/28/94		joh010		modified stophops logic to only shutoff if pump was running
;	3/07/94		DVS001		Program additions for BAS interface
;       3/26/94         RDK003          HOPS PROGRAM MODIFICATIONS
;       8/9/94          RDK004          SET PRECOAT_COMP_DONE_FG
;       8/27/94         RDK005          SKID BLACK IN SYSTEM OFF
;	07-sep-94	acjxyz		Remove temporary plc interface.
;	10-sep-94	acj009		Remove hi filter level check in precoat
;					transfer.
;	11-sep-94	acj010		Swing filter to use primary precoat.
;	19-sep-94	acj011		Add lhxsel (for swing filter).
;	29-sep-94	acj012		Add chlorination functionality.
;	06-oct-94	acj013		Bas totalizers.
;	13-oct-94	dvs002		Added BAS filter state for recovery
;	24-oct-94	acj014		Separate sluice_inuse for pol2&3.
;	02-MAY-96	TGD001		CHANGES TO REDUCE FILTER START TIME
;	01-JUN-96	TGD002		CHANGED PRECOAT MAKEUP REQUEST TO
;					CO2 PURGE AND DILUENT FILL FROM BL0W-
;					BACK NORMAL AND BLOWBACK DRAIN.
; 	04-DEC-96       VCM001		Replace 8606p15 with 8606p35 for      
;					spent DE modifications including      
;					use of drain valve xv313 (unit rel.)  
;                                       Since filter drains will be seperated 
;                                       SLUICE_INUSE code no longer needed.   
;	05-OCT-97	bmf000		Modify code for interface with new hops
;					injection program for pol3 and spire b
;	28-MAY-98	VCM011		Added 8619lsl hydrohops line empty switch
;       07-MAY-99	TGD003		CHANGES TO RELIEVE CROSS COMM ERRORS
;       07-sep-99	VCM012		If in recirc and feed tank DOA is not 
;					drain wait for feed tank setpt to 
;					allow silica gel contact time
;	14-feb-2000	acj015		Remove reference to spire b hops.
;	22-MAR-00	VCM014          Added FILL1_BBLS
;	03-may-2000	acj016		Add pol1&2 spire b hops.
;	02-oct-2000	acj017		Add spire b hops hot flush.
;       16-OCT-2000	VCM015		Added pack enable flag
;       24-OCT-2000	JFH000		Enable precoat to transfer after transfer
;	15-JUN-2003	VCM014          COMMENTED OUT Added FILL1_BBLS
;	14-jan-2004	acj018		Extract tracking.
;	22-jul-2004	acj019		D.O. monitoring.
;       11-AUG-2004	TGD004		NEW TURBIDITY METERS
;	17-nov-2006	VCM016		removed TGD004 PUT TURBIDITY CODE BACK IN
;	04-jan-2007	mrp000		add logic for body feed co2 vlv
;	29-MAY-2007	VCM017		Check css proxes to bodyfeed tank 
;	31-MAY-2007	VCM018		Added On Stream timer
;	4-JULY-2007	VCM019		Added 3 FILTER XVS override to T19COND sub
;	21-NOV-2007	MRP002		CHANGE PRINT STATEMENT FOR UPGRADE
;	18-FEB-2008 	VCM020		Changes for POL1 shell upgrade
;	04-MAR-2008	VCM021		Reserve sluice water to one filter at a time
;	12-mar-2008	mrp002		go back to fill 1 bls (vcm014)
;	24-APR-2008	VCM022		Use SLUICECYCLE sub for all filters
;	04-FEB-2009    	MRP003		ADDED DOUBLE SLUICE FLAG
;	18-AUG-2009	VCM023		Allow circ to feed from on stream to help fixes
;	04-nov 2010	mrp004		initialize filter flow sp on filter start
;	28-DEC-2010	jh024		Age to Polish Phase II.  Splitting BLNDx & TRAPx out of POLx
;	06-OCT-2011	VCM024		Time out if in drain step too long
;	26-nov-2011	ldk025		Post Filter Blending changes
;	19-jan-2012	ldk026		More post filter blending changes
;	22-jan-2012	ldk027		Post filter changes for polish 1 and tank swap finalized
;	23-jan-2012	ldk028		Cannot use AI_INVL for feed/transfer tanks anymore, because
;					they are calculated from top and bottom pressures now
;	26-jan-2012	VCM025		If BLND_SC_SA_POST_FIL_SEL_PTR then FIL_FLOW_OS can be lower
;	27-FEB-2012	VCM026		Diluent push feed line before non-recovery normal blowback
;	01-jun-2012	ldk029		Allow hops to get setup during final recovery steps for recovery without blowback
;	27-FEB-2012	VCM027		Add last hydrohop amount, prt and time to graphic
;	17-OCT-2013	VCM028		Check for precoat circ low flow
;	17-oct-2013	ehb029		Interactions with SDE tank during sluice
;	18-oct-2013	ldk030		Don't blowback prematurely
;					Blowback to Drain needs to go over to spent DE tank,
;					so we need to reserve the sluice line
;	08-SEP-2014	VCM046 		SDE low DE flow check
;	03-DEC-2014	VCM048 		TEST co2 push for sluice
;	24-JUL-2015	JMS001		Changed trap side drain to flow control valve
;	30-DEC-2015	egs049		Publish the SA state, MEL project.
;	3-mar-2016	rma050		make recovery pgm name a variable
;	02-AUG-2017	JMS002		Removed bodyfeed from Recirc, circ to feed, and  on stream 
;					when running J24 and XX4 
;	9-Oct-2017	den001		Added body feed level check								
;	17-OCT-2017	VCM049 		Fixed den001
;	02-NOV-2017	JMS004		Added DO press out valve 
;	29-NOV-2017	JMS003		Bodyfeed line press out after turned off
;	12-MAR-2018	PBH001		Commenting out Precoat Re-circ line valves xv319/320/321(diluent) and P33
;					Also changing filterhilvlchk to add from feed tank instead of removed 321 valve
;	27-mar-2018	mw000		Update MCMS unit procedure, step and status numbers; Add control logic for inline average flow/DO/Turbidity; 
;					Capture and log precoat quantity, filter DP at pressure out, DO at startup; Update active hops type
;	27-mar-2018	ldk031		Call UPDATESKD routinein Circ to Feed
;	09-may-2018	mw001		Add a linking variable to indicate bodyfeed addition is active on polish filter
;	21-MAY-2018	PBH002		Added Print statement to body feed alert if tank level not dropping to see how frequently this occurs
;	22-MAY-2018	PBH003		Print statement was printing out multiple times in matter of seconds
;	13-AUG-2018	JMS005		Bodyfeed flush when turned off this is an addition to JMS003
;	28-mar-2019	ldk032		Tell Proleit PLC when BF line flush happens
;	07-oct-2019	tta001		Added Dual Precoat addition changes for Body Feed Totalizer
;					and Pump VFD control
;	07-oct-2019	mw002		Bodyfeed MCMS changes
;	09-oct-2019	VCM049		Only delay auto body feed one time at the beginning of the
;					filter run.  Reset the timer when starting the filter
;	10-oct-2019	VCM050		Went back to fail - 7-17-2020 Only error message for low bodyfeed flow - don't fail
;	13-oct-2019	VCM051		Added feed tank level message in recirc ss
;	13-oct-2019	VCM052		Delay body feed flow check for one minute to allow for pump to ramp up
;	13-oct-2019	VCM053		Flush body feed line in circ to feed
;	14-oct-2019	ldk033		MCMS downtime tracking
;	16-oct-2019	VCM054		temporary fix for max body feed blowback
;	29-oct-2019	jaz000		Changes to turbidity limit for dual precoat
;	05-nov-2019	VCM055		Print body feed flush volume
;	14-NOV-2019 VCM056   	Need different FILL1_BBLS when doing dual precoat so added DUAL_PC_ADJ_BBLS1
;	18-nov-2019	rma057		fix equation
;	12-DEC-2019 VCM057		For dual precoat run bodyfeed in ramp down and circ to feed
;	14-JAN-2020 VCM058		Added GOSUB FILTERHILVLCHK to filter fill 2 if 2nd pre-coat
;	17-JAN-2020 VCM059		No bodyfeed add in filter fill 1
;	12-FEB-2020 VCM060		Clear BF_FLUSH_TIMER to limit flushes
;	16-FEB-2020 VCM061		Added FIL_RECIRC_TMR
;	19-FEB-2020 VCM062		If dual precoat set FIL_FLOW_OS to 600 bph
;	20-FEB-2020 VCM063		Added BODYFEED_VFD_CNTRL_FLUSH_OUT for body feed flush
;	21-FEB-2020 VCM064		Changes for BF_LINE_PACKED_FG
;	26-FEB-2020 VCM065		Log BODYFEED_VFD_CNTRL_OUT when starting or stopping bodyfeed
;	26-FEB-2020 VCM066		Keep body feed flow to at least 2 gpm
;	02-MAR-2020 VCM067		Print body feed amount before resetting totalizer
;	03-MAR-2020 VCM068		Updated 12-oct-2020 Comment out BODYFEED_VFD_CNTRL_RAMPDOWN_OUT code
;	09-MAR-2020 VCM047		Added FILTER FILL 1 DILUENT 
;	15-MAR-2020 VCM069		Comment out VCM046 
;	03-APR-2020 VCM070		Don't reset bodyfeed adj timer in recirc, hold & fail
;	08-APR-2020 VCM071		Added LOGBBDATA to capture performance data at blowback
;	04-JUN-2020 VCM072		If dual PC and 1st PC circ turb > 2.0 ppm after 12 minutes
;									display and print message
;  19-JUN-2020 JMS006      Removed DE pump and sluice destination-now all sluice goes to drain
;	03-JUL-2020 VCM073		Code to build filter just to inspect precoat
;	17-JUL-2020 VCM074		If DP >= 45 then slow filter to FIL_FLOW_OS x 0.9
;  22-JUL-2020	VCM075		Blowback normal to fail on feed tank hi level-allow techs to continue
;                          fail to blowback to drain.
;  22-JUL-2020	VCM076		In precoat circ turn off XX4/J24 bodyfeed for non-dual precoat
;									similar to 02-AUG-2017	JMS002		
;  22-JUL-2020	VCM077		If dual precoat set default bodyfeed control values
;	18-AUG-2020 VCM078		Added AGE_BBL_DE_USAGE_RATIO_FL ZFL412 for precoat + bodyfeed DE usage per AGING bbl
;	                   		Added PR_BBL_DE_USAGE_RATIO_FL ZFL413 for precoat + bodyfeed DE usage per PR bbl
;	13-OCT-2020 VCM079		Added POL_PC_RESERVE_SG_ALLOF5 to reserve polish precoat system
;	05-NOV-2020 VCM080		Update BODYFEED_VFD_CNTRL_OUT when starting body feed
;	04-DEC-2020 VCM081		POL2 needs different bodyfeed settings due to new gearbox on the bf pump
;	14-DEC-2020 VCM082		If flow SP increases reset or delay bodyfeed change until DP lines out
;	08-JAN-2021 VCM083		Set back to 15 2/2/21 Set BF_CNTRL_DELAY_TIME to zero for SPF. Take dp sample at 300s if in bf dely for recirc or flow sp change. 
;									Set BODYFEED_VFD_CONTROL_PTR output clamps to 15 and 100 for SPF.
;	21-JAN-2021 VCM084		Remove different bodyfeed settings due to new gearbox now on all 3 bf pumps
;	22-JAN-2021 VCM085		Added GOSUB BODYFEEDINIT  ;VCM085
;	28-JAN-2021 VCM086		Comment-out VCM076 In precoat circ turn off XX4/J24 bodyfeed for non-dual precoat
;	25-FEB-2021 VCM087		Fix for bodyfeed output restart after fail and hold in circ to feed
;	05-MAR-2021 VCM088		Added REINIT_BF_CNTRL_CMD for dynamic change to dual precoat beer
;  03-DEC-2021 JMS007      Added block diluent valve 8606XV363/8606XV364/8606XV365
;	11-mar-2022	ldk034		Remove old PAAR interface
;******************************************************************************
;
;	PROGRAM FUNCTION:	This program performs the sequence
;	----------------	administration for the polish filter system
;
;	SUBROUTINES REFERENCED:
;	----------------------
;
;		SUBROUTINE	DESCRIPTION
;		~~~~~~~~~~	~~~~~~~~~~~
;		1.  ERRSUB	PROGRAM RUN-TIME ERRORS
;		2.  OPENDEV	OPENS DEVICES, CHECKING FOR ERRORS
;		3.  CLOSDEV	CLOSES DEVICES, CHECKING FOR ERRORS
;
;===============================================================================
;
;	REFERENCE DOCUMENTS:
;	-------------------
;
;		DOCUMENT			ORIGIN
;		~~~~~~~~			~~~~~~
;
;	1.	Excelerator design		TI
;		DTDD REV1
;
;	2	Functional Specification	MILLER
;
;	3	I/O list			MILLER
;
;*******************************************************************************
;
;	DEFINE UNITS
;	------------

	UNIT POL1

;acj002	COMMON POLCOM,LHX,PRIMCM,DEPRMX
;acjxyz	COMMON POLCOM,allof5	;acj002
;ehb029	COMMON POLCOM,allof5,LHX,PRIMCM,ALLOF8,ALLOF4		;acj002	;acjxyz
	COMMON POLCOM,ALLOF5,LHX,PRIMCM,ALLOF8,ALLOF4,ALLOF0	;ehb029
	RUNIT POL2, POL3


#include<allof5_upf.h>	/* ehb029 */
#include<allof0_upf.h>	/* ehb029 */


;*******************************************************************************
;
;	VARIABLE DEFINITION
;	-------------------

	BLACK				==	0		; EQUATE	Skid panel black
	GREEN				==	1		; EQUATE	Skid panel green
	RED				==	2		; EQUATE	Skid panel flash red
	YELLOW				==	3		; EQUATE	Skid panel flash red
	NOT_RUNNING			==	-1		; EQUATE	Sabl program not running
	U_FF1				==	0		; EQUATE	FF1 unit number
	U_FF2				==	1		; EQUATE	FF2 unit number
	U_FF3				==	2		; EQUATE	FF3 unit number
	SB_RANG				==	256		; EQUATE	Range alarm	;acj006
        SB_OVER                         ==      512             ; EQUATE        ALARM FIELD BIT #09 OVER AWM006
        SB_IBAD                         ==      2048            ; EQUATE        ALARM FIELD BIT #11 IBAD AWM006
        SB_UNDER                        ==      4096            ; EQUATE        ALARM FIELD BIT #12 UNDER AWM006
	LOG_ADI				==	14		; EQUATE	Log adi
	LAMP_ADI			==	13		; EQUATE	Lamp adi
	BRAND_LENGTH			==	2		; EQUATE	Brand string length
	CIP_RELEASE			==	0		; EQUATE	CIP RELEASE 170 SERVICE
	CIP_REQUEST			==	1		; EQUATE	CIP REQUEST 170 SERVICE
	CIP_CONFIRMED			==	11		; EQUATE	CIP REQUEST CONFIRMED

	SB_HI		== 1		;ai_cural field bit for hi alarm	;acj019
	SB_HIHI		== 4		;ai_cural field bit for hihi alarm	;acj019

; EPN REFERENCES

;AI
;ldk027	FIL_FEED_TNK_LVL		==	'8510LC1'	; EPN		Final Filter Feed Tank Level Transmitter
	FIL_FEED_TNK_LVL		==	'8509LC3'	; EPN		Final Filter Feed Tank Level Transmitter	;ldk027
	BEER_TURBIDITY			==	'8606AI31A'	; EPN		Final Filtered Beer Turbidity Meter
	BOD_FEED_TNK_LVL		==	'8605LI2'	; EPN		Final Body Feed Tank Level Trans.
	FIL_FEED_FLOW			==	'8606FC32'	; EPN		Final Filter Feed Flow Element
	FIL_FLOW_CNTL_VLV		==	'8606FC32'	; EPN		Final Filter Flow Control Valve
;ldk027	XFER_TNK_LVL			==	'8509LC3'	; EPN		Filter Transfer Tank Level Transmitter
	XFER_TNK_LVL			==	'8510LC1'	; EPN		Filter Transfer Tank Level Transmitter		;ldk027
	HOPS_CNTLR			==	'8619FC31'	; EPN		Hops Controller
	HOPS_RATIO_CNTLR		==	'8619RIC3'	; EPN		Hops Ratio Controller
	HOPS_LB_CNTLR			==	'8619TOL3'	; EPN		Hops Controller
	HOPS_TOT			==	'8619FQ31B'	; EPN		Hops Totalizer

;joh009 start
;acj015	SPIRE_B_HOPS_CNTLR		==	'8619FC33'	; EPN		Hops Controller
;acj015	SPIRE_B_HOPS_RATIO_CNTLR	==	'8619RIC33'	; EPN		Hops Ratio Controller
;acj015	SPIRE_B_HOPS_LB_CNTLR 		==	'8619TOL33'	; EPN		Hops Controller
;acj015	SPIRE_B_HOPS_TOT		==	'8619FQ33B'	; EPN		Hops Totalizer
;acj015	SPIRE_B_HOPS_TOTD		==	'8619FQ33D'	; EPN		Hops Totalizer RDK003

;joh009 end

	FIL_DIFF_PRESS			==	'8606PI33'	; EPN		Filter Differential Pressure
	FIL_FLOW_TOT			==	'8606FQ32B'	; EPN		Filter flow totalizer
	FIL_FLOW_TOTD			==	'8606FQ32D'	; EPN		Filter flow totalizer
	PRIBF_LEVEL			== 	'8605LI1'	; EPN		Primary Bodyfeed Tank level		;tta001
	BODY_FEED_TOT			==	'8606FQ34B'	; EPN		Body Feed Flow totalizer		;tta001
  	BODYFEED_FLOW			== 	'8606FI34'	; EPN		Body Feed Flow				;tta001
  	BODYFEED_FLOW_TOT		== 	'8606FQ34B'	; EPN		Body Feed Flow totalizer		;tta001
	DIL_BFLINE_FLOW_TOT		==	'8606FQ34A'	; EPN		Diluent Body Feed Flow totalizer	;tta001

;acj002 - temp!!!!!
;acj002	LHX_TNK_LVL			==	'8510LI4'	; EPN		LHX Tank Level (PCM4)
;acjxyz	LHX_TNK_LVL			==	'8509LC3'	; EPN		LHX Tank Level (PCM4)	;acj002
;acj002 - temp!!!!!
	LHX_TNK_LVL			==	'8510LI4'	; EPN		LHX Tank Level (PCM4)	;acj002	;acjxyz
	FIL_FLOW_TOTF			==	'8606FQ32F'	; EPN		Filter flow totalizer, reset when MCMS batch ends	;mw000

	AGEDBEER_AVG_OG			==	'8504AI1'	; EPN		;Average og	;acj018
	SECOND_BEER_AVG_OG		==	'8504AI1A'	; EPN		;Average og	;acj018
	FIL_OUTLET_AVG_OG		==	'POL1OGAVG'	; EPN		;Average og	;acj018

;JMS006	DE_SLURRY_FILTERS_FLOW   ==  'DS1SDE1FI101'  ; DE Slurry Filters Flow

	INLINE_AVG_FLOW			==	'8606FC32AV'	; EPN		;Average flow	;mw000
	INLINE_AVG_TURBIDITY		==	'8606AI31AV'	; EPN		;Average Turbidity		;mw000
	INLINE_AVG_DO			==	'8606DM81AV'	; EPN		;Average DO			;mw000

;DIN
;aj	not used			==	'8510PV11'	; EPN		Final Filter Feed Tank CO2 Breaker Bar
;aj	not used			==	'8510PE11'	; EPN		Final Filter Feed Tank CO2 Rupture Disk
;aj	not used			==	'8509PE31'	; EPN		Filter Transfer Tank Rupture Disk
;aj	not used			==	'8509PV31'	; EPN		Filter Transfer Tank Breaker Bar
	DE_SILO_HI_LVL			==	'8664PL4'	; EPN		DE Silo Hi Level (PCM4)

	FILL_CSR_PROX			==	'8606PX120'	; EPN		SPP6 fill csr proximity switch
	OUT_CSR_PROX			==	'8606PX121'	; EPN		SPP6 outlet csr proximity switch
	TANK_CSS_PROX			==	'8606PX122'	; EPN		SPP6 tank css proximity switch
	FEED_CSS_PROX			==	'8606PX123'	; EPN		SPP6 feed css proximity switch
	PRECOAT_CSS_PROX		==	'8606PX134'	; EPN		SPP6 precoat css proximity switch
   BOD_FEED_TNK_CO2_CSS == '8605PX021' ; EPN    POL1 BODY FEED TANK CO2 TO CSS PROX   ;MRP000
   BOD_FEED_TNK_CO2_TNK == '8605PX022' ; EPN    POL1 BODY FEED TANK CO2 TO TANK PROX  ;MRP000
   POL1_BOD_FEED_TNK_CSS_PX  == '8605PX51'  ; EPN    POL1 BODY FEED TANK CSS TO TANK PROX 
   POL2_BOD_FEED_TNK_CSS_PX  == '8605PX52'  ; EPN    POL2 BODY FEED TANK CSS TO TANK PROX 
   POL3_BOD_FEED_TNK_CSS_PX  == '8605PX53'  ; EPN    POL3 BODY FEED TANK CSS TO TANK PROX 

   SHELL_LOW_PSI_SW          ==      '8606PS31'       ; EPN		Shell LOW PSI
   SHELL_CLOSED_SW           ==      '8606ZS31'       ; EPN		Shell closed
   SLUICE_MOVEMENT_SW        ==      '8606ZS32'       ; EPN		sluice arm motion switch

;DOT
	SLUICE_DRIVE			==	'8606F3'	; EPN		Sluice drive solenoid
	GAS_BLEED_VLV			==	'8606XV308'	; EPN		Final Filter CO2 Gas Bleed Valve

;DEV
;aj	not used			==	'8510HV12'	; EPN		Final Filter Feed Tank CO2 Vent Hand Valve
;aj	not used			==	'8510HV14'	; EPN		Final Filter Feed Tank CO2 Line CIP Isolation HV
;aj	not used			==	'8510HV15'	; EPN		Final Filter Feed Tank CO2 Inlet Hand Valve
;aj	not used			==	'8510HV16'	; EPN		Final Filter Feed Tank CO2 Bypass Hand Valve
;aj	not used			==	'8510XV11'	; EPN		Final Filter Feed Tank CO2 Block Valve
;aj	not used			==	'8510XV12'	; EPN		Final Filter Feed Tank CO2 Line CIP Isolation XV
;aj	not used			==	'8510XV13'	; EPN		Final Filter Feed Tank CSS Inlet Valve
;ldk027	FIL_FEED_TNK_HI_LVL		==	'8510LH11'	; EPN		Final Filter Feed Tank High Level Probe
	FIL_FEED_TNK_HI_LVL		==	'8509LH31'	; EPN		Final Filter Feed Tank High Level Probe		;ldk027
	FIL_FEED_PMP			==	'8606P31'	; EPN		Final Filter Feed Pump
;pbh001	PRECOAT_CIRC_PMP		==	'8606P33'	; EPN		Precoat Circulation Pump
	BOD_FEED_PMP			==	'8606P34'	; EPN		Body Feed Pump
	DIL_DRAIN_VLV			==	'8606XV330'	; EPN		Diluent Drain Valve (new)
	SLUICE_OUT_VLV			==	'8606XV301'	; EPN		Final Filter Sluice Outlet Valve
	SLUICE_IN_VLV			==	'8606BB302'	; EPN		Final Filter Sluice Inlet Valve
	CO2_BLOWDOWN_VLV		==	'8606XV303'	; EPN		Final Filter CO2 BlowDown Valve
	AIR_VENT_VLV			==	'8606XV304'	; EPN		Final Filter Air Vent Valve
	CO2_VENT_VLV			==	'8606XV305'	; EPN		Final Filter CO2 Vent VAlve
	LEAF_DRAIN_VLV			==	'8606XV307'	; EPN		Final Filter Leaf Drain Valve
	BLOWBACK_VLV			==	'8606XV306'	; EPN		Final Filter Blowback Valve
	BEER_IN_VLV			==	'8606XV309'	; EPN		Final Filter Beer Inlet Valve
	BEER_FILL_VLV			==	'8606XV310'	; EPN		Final Filter Beer Fill Valve
	BACK_PRESS_VLV			==	'8606XV311'	; EPN		Final Filter CO2 Back Pressure Valve
	CO2_PURGE_VLV			==	'8606XV312'	; EPN		Final Filter CO2 Purge Valve
	RINSE_DRAIN_VLV			==	'8606XV313'	; EPN		Final Filter Rinse Drain Valve
	BEER_FEED_VLV			==	'8606XV317'	; EPN		Final Filter Panel Beer Feed Valve
	BEER_OUT_VLV			==	'8606XV318'	; EPN		Final Filter Beer Outlet Valve
;pbh001	CIRC_VLV			==	'8606XV319'	; EPN		Final Filter Circulate Valve
;pbh001	PRECOAT_CIRC_VLV		==	'8606XV320'	; EPN		Final FilterPreCoat Circ. Valve
;pbh001	DIL_PMP_BACK_VLV		==	'8606XV321'	; EPN		Diluent Pump Back Valve
	BOD_FEED_IN_VLV			==	'8606XV322'	; EPN		Final Filter Body Feed Inlet Valve
	PRECOAT_IN_VLV			==	'8606XV323'	; EPN		Final Filter Precoat Inlet Valve
	FILL_SUPPLY_VLV			==	'8606XV324'	; EPN		Final Filter Fill Supply Valve
	CIRC_TO_PMP_VLV			==	'8606XV325'	; EPN		Final Filter Circulate To Pump Valve
	CIRC_TO_TNK_VLV			==	'8606XV326'	; EPN		Final Filter Circulate To Tank Valve
	VENT_DRAIN_VLV			==	'8606XV327'	; EPN		Final Filter CO2 Vent Drain Valve
;aj	not used			==	'8606XV451'?	; EPN		Plant Water Pump Back Valve for Spent DE (FFCOM)
	BOD_FEED_TNK_OUT_VLV		==	'8605XV330'	; EPN		Final Body Feed Tank Outlet Valve
	BOD_FEED_DIL_FLUSH_VLV		==	'8605XV231'	; EPN		Body Feed Diluent Flush Valve
;aj	not used			==	'8605AG2'	; EPN		Final Body Feed Tank Agitator
	FILTER_VAC_PRESS		==	'8606PL31'	; EPN		Final Filter Vaccuum Limit Switch
	FILTER_LO_LVL			==	'8606LL31'	; EPN		Final Filter Low Level probe Switch
	FILTER_MED_LVL			==	'8606LM31'	; EPN		Final Filter Medium Limit Switch
	FILTER_HI_LVL			==	'8606LH31'	; EPN		Final Filter High Level probe Switch
	FILTER_HI_PRESS			==	'8606PH321'	; EPN		Final Filter Pressurized Limit Switch
	FILTER_VENT_PRESS		==	'8606PH322'	; EPN		Final Filter Vented Limit Switch
;aj	not used			==	'8509XV31'	; EPN		Filter Transfer Tank CO2 Block
;aj	not used			==	'8509XV32'	; EPN		Filter Transfer Tank CIP Isolation XV
;aj	not used			==	'8509XV33'	; EPN		Filter Transfer Tank
;aj	not used			==	'8509HV32'	; EPN		???
;aj	not used			==	'8509HV34'	; EPN		???
;aj	not used			==	'8509HV35'	; EPN		???
;aj	not used			==	'8509HV36'	; EPN		Filter Transfer Tank
	DIL_IN_VLV			==	'8606XV31'	; EPN		Diluent Inlet Valve to Fill Supply Line
	DIL_IN_VLV3			==	'8606XV363'	; EPN		Diluent Inlet Block Valve to Fill Supply Line  ;JMS007
	XFER_TNK_FILL_VLV		==	'8606XV32'	; EPN		Filter Transfer Tank Outlet to Fill Supply Valve

;ldk027	XFER_TNK_HI_LVL			==	'8509LH31'	; EPN		Filter Transfer Tank High Level probe
	XFER_TNK_HI_LVL			==	'8510LH11'	; EPN		Filter Transfer Tank High Level probe	;ldk027
	HOPS_IN_VLV			==	'8619XV31'	; EPN		Hops Inlet Valve
	FILTER_DO_PRESSOUT_VLV == '8606XV302' ; EPN     JMS004
;ldk027	FIL_FEED_TNK_LVL_MODE		==	'8510V1'	; EPN		Filter Feed Tank Level Mode
;ldk027	XFER_TNK_LVL_MODE		==	'8509V3'	; EPN		Filter Transfer Tank Level Mode
	FIL_FEED_TNK_LVL_MODE		==	'8509V3'	; EPN		Filter Feed Tank Level Mode		;ldk027
	XFER_TNK_LVL_MODE		==	'8510V1'	; EPN		Filter Transfer Tank Level Mode		;ldk027
	SWING_SEL			==	'SWINGSEL'	; EPN		Filter F3 Swing selector
	LHX_SEL				==	'LHXSEL'	; LHX		LHX selection status device	;acj011

;aj	not used			==	'8606P22'?	; EPN		Final Filter Precoat Pump (PCM4)
;aj	not used			==	'8605XV431'?	; EPN		Diluent Flush Valve (Precoat Transfer) (PCM4)
;aj	not used			==	'8605XV41'?	; EPN		Precoat Tank Outlet Valve (PCM4)
;acj002 - temp!!!!
;acj002	LHX_TNK_HI_LVL			==	'8510LH41'	; EPN		LHX Tank Hi Level (PCM4)
;acjxyz	LHX_TNK_HI_LVL			==	'8509LH31'	; EPN		LHX Tank Hi Level (PCM4)	;acj002
;acj002	LHX_TNK_LVL_MODE		==	'8510V4'	; EPN		LHX Tank Level Mode (PCM4)
;acjxyz	LHX_TNK_LVL_MODE		==	'8509V3'	; EPN		LHX Tank Level Mode (PCM4)	;acj002
;acj002 - temp!!!!
	LHX_TNK_HI_LVL			==	'8510LH41'	; EPN		LHX Tank Hi Level (PCM4)	;acj002	;acjxyz
	LHX_TNK_LVL_MODE		==	'8510V4'	; EPN		LHX Tank Level Mode (PCM4)	;acj002	;acjxyz
   BOD_FEED_TNK_CO2_VLV  == '8605XV024'   ;EPN   POL1 BODY FEED TANK CO2 VALVE   ;MRP000
	XFER_TANK_INLET_VLV		==	'8509XV34'	; EPN		Transfer Tank Inlet Valve (shared with TNK2CIP	;ldk025
; UNIT REFERENCES

	START_CMD			==	ZFG001		; POL1		Start command
	CIP_CMD				==	ZFG003		; POL1		Cip command
	ATNS_CMD			==	ZFG004		; POL1		Atns command
	HOLD_CMD			==	ZFG007		; POL1		Hold command
	CONT_CMD			==	ZFG009		; POL1		Continue command
	REINIT_BF_CNTRL_CMD == ZFG012 ;POL1       Re-initialize BF control ;VCM088

	SC_SA_START_CMD			==	ZFG011		; POL1		Sc sa start command
	SC_SA_ATNS_CMD			==	ZFG014		; POL1		Sc sa atns command
	SC_SA_CONT_CMD			==	ZFG019		; POL1		Sc sa continue command
	SC_SA_REINIT_BF_CNTRL_CMD == ZFG013 ;POL1       Re-initialize BF control ;VCM088
	DEV_IN_MANUAL_FG		==	ZFG021		; POL1		Device in manual
	IBAD_FG				==	ZFG022		; POL1		Ai ibad check flag
	DEV_FAILED_FG			==	ZFG023		; POL1		Device failed flag
	ALREADY_INITIALIZED_FG		==	ZFG024		; POL1		SC ALREADY HAS RUN INITIALIZATION
	ESTOP_FAIL_FG			==	ZFG025		; POL1		SET BY THE CIP USER PROGRAM
	MSG_ACK_CMD	     		==	ZFG031		; POL1		Message acknowledge command ehb029

	BLOWBACK_CMD			==	ZFG100		; POL1		Blowback command
	CIRC_TO_FEED_CMD		==	ZFG101		; POL1		Circ to feed command
	MAINT_CMD			==	ZFG102		; POL1		Maint command
	HOPS_ERROR_RESET		==	ZFG103		; POL1		Hops error reset command
	ENTER_NEW_DATA			==	ZFG104		; POL1		Enter new data command
	SC_SA_BLOWBACK_CMD		==	ZFG105		; POL1		Sc sa blowback command
	SC_SA_CIRC_TO_FEED_CMD		==	ZFG106		; POL1		Sc sa circ to feed command
	SC_SA_MAINT_CMD			==	ZFG107		; POL1		Sc sa maint command
	TEMP_FG				==	ZFG108		; POL1		Temporary flag
	FIL_FEED_PMP_ENABLE_FG		==	ZFG109		; POL1		Fil feed pump enable
	PRECOAT_CIRC_PMP_ENABLE_FG	==	ZFG110		; POL1		Precoat circ pump enable
	BOD_FEED_PMP_ENABLE_FG		==	ZFG111		; POL1		Body feed pump enable
	CONT_CHK_FG			==	ZFG112		; POL1		Continuous check flag
	TEST_FAIL_FG			==	ZFG113		; POL1		Press test fail flag
	TURBIDITY_OVERRIDE		==	ZFG114		; POL1		Turbidity override
	HOPS_ERROR			==	ZFG115		; POL1		Hops Error flag
	BODYFEED_FLUSH_DONE_FG		==	ZFG116		; POL1		Bodyfeed flush done flag
	BODYFEED_SEL			==	ZFG117		; POL1		Bodyfeed Select flag
	TURBIDITY_CHECK_FG		==	ZFG118		; POL1		TGD004
	SLUICE_LOCALLY_FG		==	ZFG119		; POL1		ehb029
	TDINTO1_FG			==	ZFG120		; POL1		TDINTO flag
	TDINTO2_FG			==	ZFG121		; POL1		TDINTO flag
	SECOND_PASS			==	ZFG122		; POL1		Check device statuses on 1st pass flag
	TEMP_FG2			==	ZFG123		; POL1		Temporary flag
	TEMP_FG3			==	ZFG124		; POL1		Temporary flag
	T19_COND			==	ZFG125		; POL1		T19 transition condition flag
	SUS_COND			==	ZFG126		; POL1		Sustained condition flag
	TEMP_SC_FG			==	ZFG127		; POL1		Temporary sc flag
	TDINTO3_FG			==	ZFG128		; POL1		TDINTO flag
	TDINT04_FG			== ZFG873		; POL1	   TDINTO flag
	DATA_FAIL_FG			==	ZFG129		; POL1		Data fail flag
	CONT_RUN_MODE_FG		==	ZFG130		; POL1		Continuous run mode flag
	RAMP_DOWN_FG			==	ZFG131		; POL1		Ramp down flag
	HOPS_ON_FG			==	ZFG132		; POL1		Hops on flag
	MSG_POSTED_FG			==	ZFG133		; POL1		ehb029

;joh009 start
	SPIRE_B_ENABLE			==	ZFG135
	SPIRE_B_HOPS_ON_FG		==	ZFG136		; POL1		Hops on flag	
	SPIRE_B_HOPS_LB_REQ		==	ZFL133		; POL1		Hops lbs requested
	SPIRE_B_HOPS_LB			==	ZFL129		; POL1		Hops lbs
	SPIRE_B_HOPS_RATIO_REQ		==	ZFL130		; POL1		Hops ratio requested
	SPIRE_B_HOPS_RATIO		==	ZFL131		; POL1		Hops ratio
	SPIRE_B_HOPS_MAXRT		==	ZFL132		; POL1		Hops max ratio
	SPIRE_HOP_TOT				==	ZFL150		;POL1			HOPS_TOT		;MRP002
	FILL_2_BBLS					==	ZFL151		;POL1			FILL_2_TOT		;VCMGGG
   SPIRE_B_TOL_DVLIM               ==      ZFL135          ;RDK003

	NO_DILUENT_BUILD_REC_FG	==	RFG001		;ROLBA VCM047
	SHELL_DIL_DRAIN_BBLS		==	ZIN245    ;POL1 VCM047
	DILUENT_IN_FILTER_FG			 		==	ZFG145		; POL1 ;VCM047
	START_FILTER_WITH_DILUENT_FG 		==	ZFG146		; POL1 ;VCM047
	PRECOAT_TEST_FG 		==	ZFG225		; POL1 ;VCM073
	PRECOAT_TEST_STARTED_FG 		==	ZFG226		; POL1 ;VCM073

	EXPR6 				==	ZFG160		; POL1	SA EXPRESSION EVALUATION
	EXPR7 				==	ZFG161		; POL1	SA EXPRESSION EVALUATION
	EXPR8 				==	ZFG162		; POL1	SA EXPRESSION EVALUATION
	EXPR9 				==	ZFG163		; POL1	SA EXPRESSION EVALUATION
	EXPR10 				==	ZFG164		; POL1	SA EXPRESSION EVALUATION
	EXPR11				==	ZFG165		; POL1	SA EXPRESSION EVALUATION
	EXPR12 				==	ZFG166		; POL1	SA EXPRESSION EVALUATION
;joh009 end
;jh024        PRECOAT_COMP_DONE_FG            ==      ZFG148          ;RDK004


	BF_LINE_PACKED_FG		== 	ZFG142		; POL1 tta001

	SA_STEP_COMPLETE_2_FG		== 	ZFG231		; POL1 tta001
	BF_LINE_PACK_STARTED_FG		== 	ZFG232		; POL1 tta001
	SA_STEP_COMPLETE_FG		== 	ZFG234		; POL1 tta001

	BODYFEEDFLUSH_REQUIRED_FG	== 	ZFG236		; POL1 tta001

	LAST_BODYFEED_SELECT 		== 	ZFG237		; POL1 tta001
	DUAL_PRECOAT_SELECTION_FG	== 	ZFG238		; POL1 tta001
	BF_VFD_NO_CHANGE_FG		== 	ZFG239		; POL1 tta001
	BODYFEED_FLUSH_STARTED_FG	== 	ZFG294		; POL1 tta001

	REPORT_TRIG1_FG			==	ZFG276		; POL1		Report trigger flag
	REPORT_TRIG2_FG			==	ZFG277		; POL1		Report trigger flag
	REPORT_TRIG3_FG			==	ZFG278		; POL1		Report trigger flag
	REPORT_TRIG4_FG			==	ZFG279		; POL1		Report trigger flag
	REPORT_TRIG5_FG			==	ZFG280		; POL1		Report trigger flag
	REPORT_TRIG6_FG			==	ZFG281		; POL1		Report trigger flag
	REPORT_TRIG7_FG			==	ZFG282		; POL1		Report trigger flag
	REPORT_TRIG8_FG			==	ZFG283		; POL1		Report trigger flag
	REPORT_TRIG9_FG			==	ZFG284		; POL1		Report trigger flag
	REPORT_TRIG10_FG		==	ZFG285		; POL1		Report trigger flag
	REPORT_TRIG11_FG		==	ZFG286		; POL1		Report trigger flag
	REPORT_TRIG12_FG		==	ZFG287		; POL1		Report trigger flag
	REPORT_TRIG13_FG		==	ZFG288		; POL1		Report trigger flag
	REPORT_TRIG14_FG		==	ZFG289		; POL1		Report trigger flag
	REPORT_TRIG15_FG		==	ZFG290		; POL1		Report trigger flag
	REPORT_TRIG16_FG		==	ZFG291		; POL1		Report trigger flag

	POL_CHK_REQ			==	ZFG724		; POL1		Polish filter check request from recovery
	POL_OS_REQ			==	ZFG725		; POL1		Polish filter on stream request from recovery
	POL_RECIRC_REQ			==	ZFG726		; POL1		Polish filter recirc request from recovery
	POL_BLOWBACK_REQ		==	ZFG727		; POL1		Polish filter blowback request from recovery
	POL_HOLD_REQ			==	ZFG728		; POL1		Polish filter hold request from recovery
	POL_CONT_REQ			==	ZFG729		; POL1		Polish filter continue request from recovery
	REC_DEV_CNTL			==	ZFG733		; POL1		Polish recovery device control
	BLOWBACK_RECOVERY_LATCH_FG	==	ZFG734		; POL1 		latch the blowback command from polish recovery	;ldk028
   POL_DO_PRESSOUT_ENABLED_FG  == ZFG736     ; POL1      JMS004
   POL_DO_PRESSOUT_COMPLETE_FG == ZFG737     ; POL1      JMS004
;	BODYFEED_LINE_FLUSH_COMPLETE == ZFG738    ; POL1      JMS003
	POL_DO_PRESSOUT_ENABLED == ZFG739         ; POL1      JMS004 
;jh024	CHLOR_IN_PROGRESS		==	ZFG750		; POL1		Chlorination in progress	;acj012

;jh024	XFER_TNK_CO2_OK_FG		==	ZFG934		; POL1		Transfer tank counterpressure ok flag
;jh024	FIL_FEED_TNK_CO2_OK_FG		==	ZFG935		; POL1		Filter feed tank counterpressure ok flag
	SLUICE_COMPLETE_FG		==	ZFG143		; POL1 ;VCM020
	DOUBLE_SLUICE_FG		==	ZFG223						;MRP003		;POL DOUBLE SLUICE FLAG 

	MCMS_ABORTED_FG			==	ZFG936		; POL		;mw000
	STARTUP_DO_FG			==	ZFG937		; POL		;mw000
	BODYFEEDEMAILSENT_FG		==	ZFG938		; POL		;pbh003
   BUILD_NOT_DONE_FG		==	ZFG939		;POL VCM072

;VCM049	BODY_FEED_ALM_FG 		==	ZFG224		;no upf.h look in code ;den001
	SC_MSG_TMR			==	ZST000		; POL1		Sc message timer
	IBAD_TMR			==	ZST001		; POL1		Ibad timer
	STEP_TMR			==	ZST002		; POL1		Step timer
	DELAY_TMR			==	ZST003		; POL1		DELAY TIMER
	CSR_FLOW_DET_TMR		==	ZST004		; POL1		CSR FLOW SWTICH DELAY TMR

	TIMER1_TMR			==	ZST100		; POL1		Timer1 timer
	CO2_PURGE_TMR			==	ZST101		; POL1		Co2 purge timer
	FILL_2_TMR			==	ZST102		; POL1		Fill 2 timer
	PRECOAT_CIRC_TMR		==	ZST103		; POL1		Precoat circ timer

	SUS_1_TMR			==	ZST104		; POL1		Sustained condition timer
	SUS_2_TMR			==	ZST105		; POL1		Sustained condition timer
	SUS_3_TMR			==	ZST106		; POL1		Sustained condition timer
	SUS_4_TMR			==	ZST107		; POL1		Sustained condition timer
	SUS_5_TMR			==	ZST108		; POL1		Sustained condition timer
	SUS_6_TMR			==	ZST109		; POL1		Sustained condition timer
	SUS_7_TMR			==	ZST110		; POL1		Sustained condition timer
;joh009
	SUS_8_TMR			==	ZST111		; POL1		Sustained condition timer
	SUS_9_TMR			==	ZST112		; POL1		Sustained condition timer
   SUS_10_TMR   		== ZST113      ; POL1 	   Sustained condition timerVCM020
   SUS_11_TMR   		== ZST114      ; POL1		Sustained condition timerVCM020
   SUS_12_TMR   		== ZST115      ; POL1		Sustained condition timerVCM020
   SUS_13_TMR   		== ZST008      ; POL1		Sustained condition timerVCM020

;bmf000 begin
	HOPS_WAIT_TMR			==	ZST118		; POL1		Waiting for hops program timer
;bmf000 end
        SLUICE_CYCLE_TMR              ==      ZST116          ; POL1	VCM020	timer
        SLUICE_DRAIN_TMR              ==      ZST117          ; POL1	VCM020	timer

        DRAIN_FILTER_TIMER            ==      ZST119          ; POL1	VCM024	timer
	BODY_FEED_LVL_TMR 		== 	ZST824 		;den001
	RINSE_TMR			==	ZST825		;tta001

	CYCLE_TMR			==	ZMT100		; POL1		Timer1 timer	;acj005
	FIL_OS_TMR			==	ZMT101		; POL1		Filter On Stream Timer
	FIL_RECIRC_TMR		==	ZMT102		; POL1		Filter Recirculation Timer VCM061

	BF_CNTRL_DELAY_TMR		==	ZMT901		;POL1 tta001

	SC_MSG_TIME			==	ZIN000		; POL1		Sc message time
	ERROR_NUM			==	ZIN003		; POL1		Sa error number
	ERROR_LIN			==	ZIN004		; POL1		Sa error line
	SA_STATE			==	ZIN007		; POL1		Sa state
	STK_CNT				==	ZIN010		; POL1		Stack clear counter
	IBAD_SECONDS			==	ZIN011		; POL1		Ibad time
	UNIT_NUMBER			==	ZIN012		; POL1		Unit number
	LAST_LAMP_STATE			==	ZIN013		; POL1		LAST STATE OF SKID LAMP (UPDSKD)
	LAMP_NUMBER			==	ZIN014		; POL1		LAMP NUMBER USED BY SA PROGRAM
	CMD_SA_STATUS_INT		==	ZIN015		; POL1		Run command devices status
	SA_BATERR			==	ZIN016		; POL1		ERROR NUMBER RETURNED BY BATCH ALLOCATE
	FLOW_DELAY			==	ZIN017		; POL1		CSR FLOW DELAY TIME TO BEGIN CHKING FLOW SWITCH.
	MCMS_DOWNTIME_INT		==	ZIN054		; POL1		Downtime tag for MCMS

	RUN_MODE			==	ZIN100		; POL1		Start/run Mode
	FILTER_RUN_SEL			==	ZIN101		; POL1		Filter run select
	FILTER_MODE			==	ZIN102		; POL1		Filter mode select
	BLOWBACK_SEL			==	ZIN103		; POL1		Blowback select
	AIR_PURGE_MODE			==	ZIN104		; POL1		Air purge mode select
	CO2_PURGE_TIME			==	ZIN105		; POL1		CO2 purge step time
	CO2_PRESS_TIME			==	ZIN106		; POL1		CO2 pressure step time
	PRESS_TEST_TIME			==	ZIN107		; POL1		Press test step time
	FILL_1_XFER_TIME		==	ZIN108		; POL1		Fill 1 xfer step time
	FILL_1_FEED_TIME		==	ZIN109		; POL1		Fill 1 feed step time
	FIL_FILL_2_TIME			==	ZIN110		; POL1		Fil fill 2 step time
	PRECOAT_CIRC_TIME		==	ZIN111		; POL1		Precoat circ step time
	CIRC_TO_FEED_TIME		==	ZIN112		; POL1		Circ to feed step time
	BLOWBACK_NORM_TIME		==	ZIN113		; POL1		Blowback normal step time
	BLOWBACK_DRAIN_TIME		==	ZIN114		; POL1		Blowback drain step time
	DIL_FILL_TIME			==	ZIN115		; POL1		Diluent fill step time
	DIL_DRAIN_TIME			==	ZIN116		; POL1		Diluent drain step time
	VENT_TIME			==	ZIN117		; POL1		Vent step time
	SLUICE_TIME			==	ZIN118		; POL1		Sluice step time
	HI_LVL_TIME			==	ZIN119		; POL1		Hi level time
	LO_LVL_TIME			==	ZIN120		; POL1		Lo level time
	FIL_FEED_MIN_LVL_TIME		==	ZIN121		; POL1		Filter feed min level time
	XFER_TNK_MAX_TIME		==	ZIN122		; POL1		Xfer tank max level time
	HI_TURBIDITY_TIME		==	ZIN123		; POL1		Hi turbidity time
	DIL_FAIL_TIME			==	ZIN124		; POL1		Diluent fill fail time
	TURBIDITY_TIME			==	ZIN125		; POL1		Turbidity time	
	RECIRC_FLUSH_TIME		==	ZIN126		; POL1		Recirc time
	DRAIN_TIME			==	ZIN127		; POL1		Filter drain time
	FLUSH_COUNTER			==	ZIN128		; POL1		Filter flush counter
	FLUSH_NUM			==	ZIN129		; POL1		Number of filter flushes
	DIFF_PRESS_HI_TIME		==	ZIN130		; POL1		Differential pressure hi time
	FILL_2_FAIL_TIME		==	ZIN131		; POL1		Filter fill 2 fail time
	HOPS_ERROR_TIME			==	ZIN132		; POL1		Hops error time
	FILTER_MODE_SAVE		==	ZIN133		; POL1		Filter mode save
	BODYFEED_REPACK_TIME		==	ZIN134		; POL1		Bodyfeed repack time
	SLUICE_BIT			==	ZIN135		; POL1		Sluice valve inuse reservation #
	TEMP_INT			==	ZIN136		; POL1		Temporary integer
	LHX_TNK_MAX_TIME		==	ZIN137		; POL1		Lhx tank max time
	DIFF_PRESS_BLOWBACK_TIME	==	ZIN138		; POL1		Diff press blowback time
	FIL_FLOW_RAMP_DOWN		==	ZIN139		; POL1		Filter flow ramp down
	PRECOAT_CIRC_FAIL_TIME		==	ZIN140		; POL1		Precoat circ fail time
	BODYFEED_STOP_TIME		==	ZIN141		; POL1		Bodyfeed stop time
	HOPS_SEL			==	ZIN142		; POL1		Hops select
	FIL_FEED_FLOW_DEV_LIM		==	ZIN143		; POL1		Filter feed flow deviation limit
	BODYFEED_FLUSH_TIME		==	ZIN144		; POL1		Bodyfeed flush time
	PC_PRESS_OUT_TIME		== 	ZIN521		; POL1		Precoat Press out Time Last	;tta001
	PC_PRESS_OUT_TIME1		== 	ZIN522		; POL1		Precoat Press out Time First	;tta001
	SUS_TIME			==	ZIN145		; POL1		Sustained condition time
	FIL_FLOW_INIT			==	ZIN146		; POL1		Filter flow init setpoint	;acj004
	FIL_FLOW_OS			==	ZIN147		; POL1		Filter flow on stream setpoint	;acj004
	FEED_FLOW_SETPT_RAMP_VALUE 	== 	ZFL834		; POL1		Feed Flow Setpoint Ramp Rate for Down ;tta001
	FEED_FLOW_SETPT_RAMP_ONSTRM 	== 	ZFL835		; POL1		Feed Flow Setpoint Ramp Rate for On Stream ;tta001
	RAMP_DOWN_FLOW_DEADBAND 	== 	ZFL836		; POL1		Feed Flow Ramping to Setpoint deadband	;tta001
	CO2_PRESS_FAIL_TIME		==	ZIN148		; POL1		CO2 press fail time	;acj000
	MAX_FLUSHES			==	ZIN150		; POL1		while waiting for sde tank to unlatch ;ehb029

	TURBIDITY_CHECK_TIME		==	ZIN236		; POL1		TGD004
;bmf000 begin
	HOPS_MAX_START_TIME		==	ZIN237		; POL1		Time to wait for hops program to start injecting
	HOPS_MAX_STOP_TIME		==	ZIN238		; POL1		Time to wait for hops program to stop injecting
;bmf000 end
	DOMON_STAT_INT			==	ZIN240		; POL1		D.O. meter status	;acj019
   POL_DO_PRESSOUT_TIME    == ZIN254      ; POL1  JMS004
	DILPUSHFEED_START			== ZIN256		; Pol1  VCM026W
	DILPUSHFEED_BBLS			== ZIN257		; Pol1  VCM026W
	BF_DRAIN_TIME			== 	ZIN270		; POL1		BodyFeed drain time				;tta001
	CIRC_TO_FEED_TIME_DP		==	ZIN271		; POL1 		Circulate time Dual Pre-coat	;tta032
	CIRC_TO_FEED_TIME_SP		==	ZIN272		; POL1 		Circulate time single Pre-coat	;tta032

	DILPUSHFEED_TMR			== ZST009		; Pol1  VCM026W

	BF_DP_INTERVAL_TMR		==	ZST415	;POL1	tta001
	BF_FLUSH_TIMER			==	ZST416	;POL1	tta001
	BODYFEED_RUNNING_TMR		== 	ZST417	;POL1	tta001
	NEED_FLUSH_DELAY_TMR		== 	ZST418	;POL1	tta001
	BF_FLUSH_TIMEOUT_TMR			==	ZST419	;POL1	VCM062

	POL_RESP			==	ZIN731		; POL1		Polish filter sequence response to recovery

   SLUICE_CYCLE_TIME		==	ZIN241		; POL1		VCM020
   SLUICE_DRAIN_TIME		==	ZIN242		; POL1		VCM020
   SLUICE_MOVEMENT_TIME		==	ZIN243		; POL1 Max time before fail for no movement VCM020
   SLUICE_CYCLE_COUNT		==	ZIN244		; POL1		VCM020

	MAX_RECIRC_TIME			==	ZIN250		; POL1		Max recirc time	;acj005
	FIL_FLOW_INIT_TIME		==	ZIN251		; POL1		Filter flow init time	;acj005
        FILL1_BBLS			==	ZIN252		; POL1		VCM014
        DRAIN_FILTER_TIME            ==      ZIN253          ; POL1	VCM024	timer

	TURBIDITY_HI_LIM		==	ZFL100		; POL1		Turbidity hi limit
	FIL_FEED_TNK_MIN_LVL		==	ZFL101		; POL1		Filter feed tank min level limit
	XFER_TNK_LVL_MAX		==	ZFL102		; POL1		xfer tank max level limit
	XFER_TNK_LVL_FILL_1		==	ZFL103		; POL1		Fil fill 1 transfer xfer tank barrel limit
	FEED_OK_LVL			==	ZFL104		; POL1		Fil fill 1 feed ok level
	TURBIDITY_SETPOINT		==	ZFL105		; POL1		Turbidity setpoint
	BOD_FEED_TNK_LO_LIM		==	ZFL106		; POL1		Body feed tank lo level limit
	BOD_FEED_TNK_LOLO_LIM		==	ZFL107		; POL1		Body feed tank lolo level limit
	BOD_FEED_TNK_OK_LIM		==	ZFL108		; POL1		Body feed tank ok level limit
	XFER_TNK_LVL_LO_LIM		==	ZFL109		; POL1		Xfer tank level lo limit
	DIFF_PRESS_HI_LIM		==	ZFL110		; POL1		Differential pressure hi limit
	HOPS_LB_REQ			==	ZFL111		; POL1		Hops lbs requested
	HOPS_LB				==	ZFL112		; POL1		Hops lbs
	HOPS_RATIO_REQ			==	ZFL113		; POL1		Hops ratio requested
	HOPS_RATIO			==	ZFL114		; POL1		Hops ratio
	HOPS_MAXRT			==	ZFL115		; POL1		Hops max ratio
	HOPS_SHUTOFF			==	ZFL116		; POL1		Hops min setpoint
        HOPS_TOL_DVLIM                  ==      ZFL134          ;RDK003
	FIL_FEED_TNK_DRAIN_LVL		==	ZFL117		; POL1		Filter feed tank drain level limit
	LHX_TNK_LVL_MAX			==	ZFL118		; POL1		Lhx tank level max limit
	DIFF_PRESS_BLOWBACK_LIM		==	ZFL119		; POL1		Differential press blowback limit
	DIFF_PRESS_OS_LIM		==	ZFL120		; POL1		Differential pressure onstream hi limit
	FIL_FEED_TNK_LVL_FILL_1		==	ZFL121		; POL1		Fil fill 1 transfer feed tank barrel limit
	XFER_TNK_LVL_MAX_OS		==	ZFL122		; POL1		Transfer tank max onstream level limit	;acj000
	XFER_TNK_LVL_MAX_RECIRC		==	ZFL123		; POL1		Transfer tank max recirc level limit	;acj000
	FIL_FEED_TNK_MIN_LVL_OS		==	ZFL124		; POL1		Fil feed tank max onstream level limit	;acj000
	FIL_FEED_TNK_MIN_LVL_RECIRC	==	ZFL125		; POL1		Fil feed tank max recirc level limit	;acj000
	BOD_FEED_AGIT_LVL		==	ZFL126		; POL1		Bod feed tank agitator level		;acj000
	DIFF_PRESS_LIM			==	ZFL128		; POL1		Differential pressure hi limit	;acj006
	BAS_TETRA_HOPS_TOT		==	ZFL138		; POL1		Bas HYDROHOPS hops batch total	;acj013
	BAS_SPIREB_HOPS_TOT		==	ZFL139		; POL1		Bas spireb hops batch total	;acj013
	BODYFEED_MAX_BLOWBACK_LIM	==	ZFL149		; POL1		Maximum BodyFeed transfer before blowdown   ;tta001
	PRECOAT_TURBIDITY_HI_LIM	==	ZFL411		; POL		High turbidity during precoat circulate step ;jaz000
	AGE_BBL_DE_USAGE_RATIO_FL	==	ZFL412 ; POL Total PC + BF DE usage ratio per aging bbl
	PR_BBL_DE_USAGE_RATIO_FL	==	ZFL413 ; POL Total PC + BF DE usage ratio per PR bbl
	SA_TMP_FLT			==	ZFL847		; POL1		;tta001
	TOTAL_BODYFEED_LBS_ACTUAL	==	ZFL848		; POL1 		current actual bodyfeed lbs	;tta001
	INITIAL_DP			==	ZFL800   ;POL1 initial DP after build  ;VCM071 
	INITIAL_DO			==	ZFL801   ;POL1 initial DO after build  ;VCM071 
	INITIAL_TURB		==	ZFL802   ;POL1 initial turbidity after build  ;VCM071 
	BDYFD_RATIO			== ZFL803   ;POL1 bodyfeed lbs/bbl ratio  ;VCM071 

	BDYFD_MED_PCT		== ZIN800   ;POL1 bodyfeed makeup medium pct  ;VCM071 
	BDYFD_CRS_PCT		== ZIN801   ;POL1 bodyfeed makeup coarse pct  ;VCM071 
	XFER_TNK_LVL_MAX_REC_OS		==	ZFL140		; POL1		Allow the filter to go higher on transfer tank during recovery ldk026
	DP_OFFSET			==	ZFL141		; POL1		ehb029		
;jh024        FEED_TNK_LVL_SETPT              ==      ZFL601          ; POL1          ON-LINE STPT


	SC_MESSAGE			==	ZSG000		; POL1		Sc message
	BRAND_ID			==	ZSG002		; POL1		Brand
	SEQ_STATUS			==	ZSG006		; POL1		Seq status
	OPER_RESPONSE			==	ZSG007		; POL1
	FAIL_MSG			==	ZSG008		; POL1		Ibad fail message
	SA_MESSAGE			==	ZSG009		; POL1		Sa message
	SA_2_MESSAGE			==	ZSG010		; POL1		Sa message
	SA_3_MESSAGE			==	ZSG011		; POL1		Sa message
	SA_4_MESSAGE			==	ZSG012		; POL1		Sa message
	SA_5_MESSAGE			==	ZSG013		; POL1		Sa message
	ERROR_STRING			==	ZSG014		; POL1		Error string
	UNIT_SG				==	ZSG015		; POL1		STRING CONTAINING UNIT NAME USED BY ALLOCATE UNIT
	BATCH_NO			==	ZSG016		; POL1		BATCH NUMBER USED BY ALLOCATE UNIT

;jh024	BRAND_ACTUAL			==	ZSG102		; POL1		OLBA Brand
	SA_TMP_SG			==	ZSG103		; POL1	   VCM021
	SA_TMP1_SG			==	ZSG104		; POL1		VCM021

	FILL_CSR_PROX_SG		==	ZSG142		; POL1		Gets EPN for unit rel message
	OUT_CSR_PROX_SG			==	ZSG143		; POL1		Gets EPN for unit rel message
	TANK_CSS_PROX_SG		==	ZSG144		; POL1		Gets EPN for unit rel message
	FEED_CSS_PROX_SG		==	ZSG145		; POL1		Gets EPN for unit rel message
	PRECOAT_CSS_PROX_SG		==	ZSG146		; POL1		Gets EPN for unit rel message

	RECOVERY_PGM_NAME		==	ZSG440		;POL1		rmaxxx 
	PRECOAT_MODE_SG 		==	ZSG500		;POL1 VCM071
	;VCM027
	LAST_HYDROHOP_PRT		== ZSG841	;LAST PRT TO GET HYDROHOPS
	HH_STOP_TIME 			== ZSG842  ;HYDROHOP STOP TIME
	HH_STOP_DATE 			== ZSG843  ;HYDROHOP STOP DATE
	MONTH_STRING			== ZSG844  ;/* temporary storage for month string */
	DAY_STRING			    == ZSG845  ;/* temporary storage for day string */
	YEAR_STRING			    == ZSG846  ;/* temporary storage for year string */
	CURRENT_TIME			== ZSG847  ;/* temporary storage for current time string */
	CURRENT_DATE			== ZSG848  ;/* temporary storage for current date string */
	PRODUCTION_START_TIME == ZSG853  ; POL1_PERF trend group filter start production timw  VCM071
;VCM049BFTL_SG 			== ZSG437		;den001	
	BODYFEED_ERROR_MGS  		==	ZSG878  ;POL1   /* tta001 */


	LAST_HYDROHOP_LBS		== ZFL152	;LAST PRT HYDROHOPS AMOUNT
	BOD_FEED_TNK_LVL_STRT 		== ZFL153	;den001
;mw000 start
	FILTER_DP_FL			==	ZFL154		
	INLINE_AVG_FLOW_FL		==	ZFL155	    
	DO_STARTUP_FL			==	ZFL156
	INLINE_AVG_DO_FL		==	ZFL157
	STARTUP_TOT_FL			==	ZFL158
	INLINE_AVG_TURBIDITY_FL		==	ZFL159
	PRECOAT_TOTAL_FL		==	ZFL410	;ldkmoved from ZFL153


	 PRECOAT_CIRC_MAX_TIME		== 	ZFL902	;POL1		/* tta001 */
	 BODYFEED_VFD_CNTRL_OUT_INIT	==	ZFL907	;% out			         	tta001
	 BODYFEED_VFD_CNTRL_OUT_MIN	==	ZFL908	;minimum stroke output allowed		tta001
	 BODYFEED_VFD_CNTRL_OUT_MAX	==	ZFL909	;maximum stroke output allowed		tta001
	 BODYFEED_VFD_CNTRL_OUT_REQ	==	ZFL911  ;POL1	tta001 */
	 BODYFEED_VFD_CNTRL_OUT		==	ZFL912  ;POL1	tta001 */
	 BODYFEED_VFD_CNTRL_FLUSH_OUT == ZFL913  ;POL1 VCM063
	 LAST_DP_VALUE			==	ZFL916  ;POL1	tta001 */
	 BF_TMP_FLT			==	ZFL917  ;POL1	tta001 */
	 DP_CHANGE_RATE			==	ZFL919  ;POL1	tta001 */

	 PRECOAT_CIRC_RATE_FACTOR_1 	== 	ZFL832  ;POL1	/*tta001*/
	 PRECOAT_CIRC_RATE_FACTOR_2 	== 	ZFL833  ;POL1	/*tta001*/

	 DP_5MIN_FLT			==	ZFL840  ;POL1   /* tta001 */
	 DP_10MIN_FLT			==	ZFL841  ;POL1   /* tta001 */
	 DP_15MIN_FLT			==	ZFL842  ;POL1   /* tta001 */
	 DP_20MIN_FLT			==	ZFL843  ;POL1   /* tta001 */

	 BODYFEED_VFD_CNTRL_RAMPDOWN_TIM == 	ZFL849  ;POL1	/* tta001 */
	 BODYFEED_TO_DRN_VOL		==	ZFL850  ;POL1   /* tta001 */
	 BODYFEED_VFD_CNTRL_RAMPDOWN_OUT == 	ZFL852  ;POL1   /* tta001 */
	 LAST_4TH_DP_VALUE		==	ZFL853  ;POL1   /* tta001 */
	 LAST_3RD_DP_VALUE		==	ZFL854  ;POL1   /* tta001 */
	 LAST_2ND_DP_VALUE		==	ZFL855  ;POL1   /* tta001 */
	 LAST_5TH_DP_VALUE		==	ZFL856  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT	==	ZFL857  ;POL1   /* tta001 */

	 PC_BF_MIN_XFR_LVL 		==	ZFL859  ;POL1	/*tta001*/

	 BF_VFD_DELTA_CHANGE_FLT1 	==	ZFL924  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT2 	==	ZFL925  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT3 	==	ZFL926  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT4 	==	ZFL927  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT5 	==	ZFL928  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT6 	==	ZFL929  ;POL1   /* tta001 */
	 BF_VFD_DELTA_CHANGE_FLT7 	==	ZFL930  ;POL1   /* tta001 */
	 CURRENT_DP_VALUE 		==	ZFL931  ;POL1   /* tta001 */
	 LAST_BF_VFD_DELTA_CHANGE_FLT 	== 	ZFL932  ;POL1   /* tta001 */
	 BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ == 	ZFL933  ;POL1   /* tta001 */
	 LOW_BODYFEED_FLOW 		==	ZFL934  ;POL1   /* tta001 */
	 INIT_DIL_BFLINE_VOL 		==	ZFL935  ;POL1   /* tta001 */
	 INIT_BODYFEED_VOL 		==	ZFL936  ;POL1   /* tta001 */
	 BODYFEED_GALLONS 		==	ZFL937  ;POL1   /* tta001 */
	 BODYFEED_POUNDS 		==	ZFL938  ;POL1   /* tta001 */
	 PRECOAT_CIRC1_FILT_SP  	==	ZFL939  ;POL1   /* tta001 */
	 PRECOAT_CIRC2_FILT_SP  	==	ZFL940  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT1 ==	ZFL944  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT2 ==	ZFL945  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT3 ==	ZFL946  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT4 ==	ZFL947  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT5 ==	ZFL948  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT6 ==	ZFL949  ;POL1   /* tta001 */
	 DEFAULT_BF_VFD_DELTA_CHANGE_FLT7 ==	ZFL950  ;POL1   /* tta001 */
	 BF_DP_INTERVAL_MULTPLR_FL == ZFL955  ;VCM082
    LAST_FILTER_FLOW_SP_FL == ZFL956  ;VCM082



	MCMS_SLUICE_CYCLE		==	ZIN491		
	MCMS_BLOWBACK_COUNTER		==	ZIN492	  
      ;mw000 end

	DAY_OF_WEEK             == ZIN506  ;/* gets value from GETDATE */        
	DAY_OF_MONTH            == ZIN507  ;/* gets value from GETDATE */        
	YEAR                    == ZIN508  ;/* gets value from GETDATE */        
	MONTH                   == ZIN509  ;/* system month   */ 
	BDY_FED_TNK_LVL_TIME 	== ZIN258	;den001

	BODYFEED_MODE			== ZIN259	;POL1		tta001
	BF_CNTRL_DELAY_TIME		== ZIN260	;POL1		tta001
	BF_DP_INTERVAL_TIME		== ZIN261	;POL1		tta001
	BF_SAMPLE_COUNTER_INT 		== ZIN262	;POL1		tta001
	LAST_BODYFEED_MODE		== ZIN263	;POL1		tta001
	LOW_BODYFEED_FLOW_TIME 		== ZIN264	;POL1		tta001
	DUAL_PC_ADJ_BBLS1 		== ZIN265	;POL1		VCM056  amount of first dual precoat in bbls 
	SA_STEP_INT			== ZIN247	;POL1		tta001
	SA_STEP_INT2			== ZIN248	;POL1		tta001
	SA_TMP_INT			== ZIN255	;POL1		tta001

	REC_SA_STATUS			==	ZSG702		; POL1		RECOVERY SA STATUS 	;ldk029

;jh024	XFER_TNK_BRAND			==	ZSG909		; POL1		Filter xfer tank brand
;jh024	FEED_TNK_BRAND			==	ZSG910		; POL1		Filter feed tank brand
	SA_STATUS			==	ZSG911		; POL1		Sa status
	LAST_SA_STATUS			==	ZSG902		; POL		;mw000
	

	DEV_PTR				==	ZPT000		; POL1		Device pointer
	PRECOAT_REQ_PTR			==	ZPT100		; POL1		Precoat request pointer
	PRECOAT_FAIL_PTR		==	ZPT101		; POL1		Precoat fail pointer
	PRECOAT_TRANSFER_TYPE_PTR	== 	ZPT131		; POL1		Precoat Transfer Type pointer		;tta001
	BODYFEED_VFD_CONTROL_PTR 	==	ZPT132		; POL1		Bodyfeed VFD Control Pointer		;tta001
	TEMP_PTR			==	ZPT102		; POL1		Temporary pointer
	SLUICE_INUSE_PTR		==	ZPT104		; POL1		Sluice inuse pointer	;acj014

;bmf000 begin
	HOPS_INJECT_ENABLE_FG_PTR 	==	ZPT110		; POL1		pointer to hops inject enable flag
	HOPS_ERROR_RESET_CMD_PTR 	==	ZPT111		; POL1		pointer to hops error reset cmd	
	HOPS_RESET_METER_CMD_PTR 	==	ZPT112		; POL1		pointer to hops reset meter cmd 	
	HOPS_ERROR_MSG_PTR 		==	ZPT113		; POL1		pointer to spireb hops error msg
	SPIREB_HOPS_INJECT_RATIO_PTR 	==	ZPT114		; POL1		pointer to spireb hops inject ratio 	
	SPIREB_HOPS_SA_STATUS_PTR 	==	ZPT115		; POL1		pointer to spireb hops sa status
	SPIREB_HOPS_SEQ_STATUS_PTR 	==	ZPT116		; POL1		pointer to spireb hops seq status
	SPIREB_HOPS_TOT_PTR 		==	ZPT117		; POL1		pointer to spireb hops totalizer
;future	HYDRO_HOPS_INJECT_RATIO_PTR 	==	ZPT118		; POL1		pointer to hydro hops inject ratio
;future	HYDRO_HOPS_SA_STATUS_PTR 	==	ZPT119		; POL1		pointer to hydro hops sa status
;future	HYDRO_HOPS_SEQ_STATUS_PTR 	==	ZPT120		; POL1		pointer to hydro hops seq status
;future	HYDRO_HOPS_TOT_PTR 		==	ZPT121		; POL1		pointer to hydro hops totalizer
;bmf000 end
	HOPS_HOT_FLUSH_CMD_PTR		==	ZPT122		; POL1		pointer to hops hot flush cmd	;acj017
        SPIREB_PACK_ENABLE_FG_PTR       ==	ZPT123		; POL1		pointer to hops PACK cmd	;VCM015
	DOMON_EPN_PTR			==	ZPT124		; POL1		D.O. monitoring epn pointer		;acj019
	DOMON_STAT_PTR			==	ZPT125		; POL1		D.O. monitoring status integer pointer	;acj019

	; jh024 begin
	POL_CIP_ESTOP_FG_PTR		==		ZPT150
	BLND_PRECOAT_COMP_DONE_FG_PTR	==		ZPT151
	POL_SIMULATION_PLC_FG_PTR	==		ZPT152
	BLND_SC_SA_POST_FIL_SEL_PTR	==		ZPT153
	POL_CHLOR_IN_PROGRESS_PTR	==		ZPT154
	TRAP_RESET_TOTAL_FLOW_PTR	==		ZPT155
	TRAP_RECOVERY_FG_PTR		==		ZPT156
	POL_PLC_ERROR_PTR		==		ZPT157
	TRAP_PLC_TK_REQ_PTR		==		ZPT158
	BLND_SA_STATUS_PTR		==		ZPT159
	BLND_SEQ_STATUS_PTR		==		ZPT160
	POL_NEXT_BRAND_PTR		==		ZPT161
	TRAP_SA_STATUS_PTR		==		ZPT162
	TRAP_SEQ_STATUS_PTR		==		ZPT163
	POL_XFER_TNK_BRAND_PTR		==		ZPT164
	TRAP_STER_MATRIX_SKID_FG_PTR	==		ZPT165
	POL_MASTER_CLEAR_FG_PTR		==		ZPT166
	BLND_PARTIAL_REC_SEL_PTR	==		ZPT167
	BLND_REC_REQ_PTR		==		ZPT168
	BLND_HOLD_REQ_PTR		==		ZPT169
	BLND_REL_REQ_PTR		==		ZPT170
	TRAP_RUN_REQ_PTR		==		ZPT171
	TRAP_HOLD_REQ_PTR		==		ZPT172
	TRAP_REL_REQ_PTR		==		ZPT173
	TRAP_DISABLE_GOVT_METER_PTR	==		ZPT174
	POL_PACK_ENABLE_FG_PTR		==		ZPT175
	POL_XFER_TNK_CO2_OK_FG_PTR	==		ZPT176
	POL_FIL_FEED_TNK_CO2_OK_FG_PTR	==		ZPT177
	POL_FEED_TNK_LVL_SETPT_PTR	==		ZPT178
	BLND_HDR_RECOVERY_VOLUME_PTR	==		ZPT179
	BLND_DILUENT_K_FACTOR_REQ_PTR	==		ZPT180
	BLND_DILUENT_K_FACTOR_PTR	==		ZPT181
	TRAP_LOOP_SELECT_PTR		==		ZPT182
	BLND_RESP_PTR			==		ZPT183
	TRAP_RESP_PTR			==		ZPT184
	POL_XFER_TNK_DRAIN_LVL_PTR	==		ZPT185
	POL_XFER_TNK_MIN_TIME_PTR	==		ZPT186
	SEQ_STATUS_PTR		==		ZPT188
	POL_BRAND_ACTUAL_PTR		==		ZPT189
	BLND_OPER_RESP_PTR		==		ZPT190
	POL_BID_NAME_PTR		==		ZPT191
	POL_AGED_TANK_REC_PTR		==		ZPT192
	POL_BRAND_ID_PTR		==		ZPT193
	POL_FEED_TNK_BRAND_PTR		==		ZPT194
	SA_STATUS_PTR		==		ZPT195
	TRAP_CYCLE_CSS_VLV_TMR_PTR	==		ZPT196
	DILUENT_FLOW_PTR		==		ZPT197				      
	DILUENT_BATCH_TOT_PTR		==		ZPT198
	DILUENT_PACE_PTR		==		ZPT199
	DILUENT_K_DEVIATN_PTR		==		ZPT200
	DILUENT_ONLY_TOT_PTR		==		ZPT201
	AGEDBEER_AVG_OG_PTR		==		ZPT202
	SECOND_BEER_AVG_OG_PTR		==		ZPT203
	CO2_SUPPLY_VLV_PTR		==		ZPT204
	AGEDBEER_FLOW_PTR		==		ZPT205
	AGEDBEER_BATCH_TOT_PTR		==		ZPT206
	TOTAL_FLOW_PTR			==		ZPT207
	DILUENT_RATIO_PTR		==		ZPT208
	SG_CHPF_FLOW_PTR		==		ZPT209
	SG_CHPF_PACE_PTR		==		ZPT210
	SG_CHPF_K_DEVIATN_PTR		==		ZPT211
	BEER_COOLER_TEMP_PTR		==		ZPT212
	SECOND_BEER_FLOW_PTR		==		ZPT213
	SECOND_BEER_BATCH_TOT_PTR	==		ZPT214
	SECOND_BEER_PACE_PTR		==		ZPT215
	SECOND_BEER_K_DEVIATN_PTR	==		ZPT216
	COOLER_OUTLET_VLV_PTR		==		ZPT217
	COOLER_GLYCOL_PUMP_PTR		==		ZPT218
	POL_CHPF_SEL_VLV_PTR		==		ZPT219
	POL_PVPP_SEL_VLV_PTR		==		ZPT220
	MATRIX_VALVE_PTR		==		ZPT221
	TRAP_HI_LVL_PTR		==		ZPT222
	TRAP_MATRIX_VLV_PTR		==		ZPT223
	TRAP_HOSE_CONNECT_VLV_PTR	==		ZPT224
	TRAP_DRAIN_VLV_PTR		==		ZPT225
	TRAP_LO_LVL_PTR		==		ZPT226
	TRAP_DRAIN_FLOW_SW_PTR		==		ZPT227
;ldk034	PAAR_PARAM1_INDEX_PTR		==		ZPT228
;ldk034	PAAR_PARAM2_INDEX_PTR		==		ZPT229
	BLND_BRAND_PTR			==		ZPT230
	POLBLND_PRIM_HDR_NUM_PTR	==		ZPT231
	POLBLND_SEC_HDR_NUM_PTR		==		ZPT232

	TRAP_BEER_STOP_VLV_PTR		==		ZPT233	;8607XV102;8607XV202;8607XV302    beer stop valve           
	TRAP_BOTTOM_DRAIN_VLV_PTR	==		ZPT234  ;8607XV104;8607XV204;8607XV304    bottom drain valve        
; JMS001	TRAP_SIDE_DRAIN_VLV_PTR		==		ZPT235  ;8607XV105;8607XV205;8607XV305    side drain valve          
	TRAP_VENT_VLV_PTR		==		ZPT236  ;8607XV107;8607XV207;8607XV307    trap vent valve           
	TRAP_BYPASS_VLV_PTR		==		ZPT237  ;8607XV108;8607XV208;8607XV308    bypass valve              
	TRAP_BACK_PRES_VLV_PTR		==		ZPT238  ;8607XV115;8607XV215;8607XV315    back pressure valve       
	TRAP_VENT_DRAIN_VLV_PTR		==		ZPT239  ;8607XV121;8607XV221;8607XV321    vent drain valve          
	TRAP_XFER_PUMP_PTR		==		ZPT240	;8608P3;8608P4;8608P5		  trap transfer pump
	TRAP_BYPASS_BLEED_VLV_PTR	==		ZPT241	;8607XV123;8607XV223;8607XV323	  bypass bleed valve
	TRAP_PRT1_TARGET_PTR		==		ZPT251	;VCM027
	POL_PRIMARY_BRAND_PTR		==		ZPT827
	POL_2ND_BEER_BRAND_PTR		==		ZPT828
	;jh024 end
	XFER_TANK_INLET_LINE_RESERVE_PTR	==	ZPT242	;ldk025
;JMS006	SDE_COMM_HIGH_DP_PTR		==		ZPT253	;ehb029
;JMS006	SDE_COMM_IN_BLOWBACK_PTR	==		ZPT254	;ehb029
	POL_SA_STATE_PTR		==		ZPT257	;egs049

	MCMS_PROCEDURE_PTR		==		ZPT310	;mw000
	MCMS_STATE_PTR			==		ZPT311	;mw000
	MCMS_STATUS_PTR			==		ZPT312	;mw000
	HOPS_TYPE_PLC_PTR	 	==		ZPT313	;mw000
	POL_BRAND_PLC_PTR		==              ZPT314	;mw000
	POL_RECOVERY_TYPE_PLC_PTR	==              ZPT315	;mw000
	POL_PRECOAT_TOT_PTR		==		ZPT316	;mw000
	POL_BODYFEED_ACTIVE_PTR		==		ZPT317	;mw001
	POL_BF_LINE_FLUSH_ON_PTR	==		ZPT318	;ldk032
	POL_BF_TANK_MU_MED_PTR	==		ZPT319	;VCM035
	POL_BF_TANK_MU_CRS_PTR	==		ZPT320	;VCM035

; COMMON UNIT REFERENCES

	PRECOAT_PRIM3_FAIL_PRIMCM	==	HFG008		; PRIMCM	Precoat transfer fail		;acj010
	PRECOAT_PRIM3_REQ_PRIMCM	==	HIN004		; PRIMCM	Precoat transfer request	;acj010
	PRECOAT_PRIM3_XFER_TYPE_ALLOF8	==	TIN182		; ALLOF8	Primary Precoat transfer type	;tta001
;TGD003	PRECOAT_FF1_FAIL_POLCOM		==	IFG000		; POLCOM	Precoat transfer fail		;acj010
;TGD003	PRECOAT_FF1_REQ_POLCOM		==	IIN000		; POLCOM	Precoat transfer request	;acj010
	PRECOAT_FF1_FAIL_ALLOF8		==	TFG125		; ALLOF8	Precoat transfer fail		;TGD003
	PRECOAT_FF1_REQ_ALLOF8		==	TIN009		; ALLOF8	Precoat transfer request	;TGD003
	POL1_POLPCT_XFER_TYPE_ALLOF8 	==	TIN040		; ALLOF8 	Precoat transfer type		;tta001
;acj008	PRECOAT_FF1_FAIL		==	IFG000		; POLCOM	Precoat transfer fail
;acj008	PRECOAT_FF2_FAIL		==	IFG001		; POLCOM	Precoat transfer fail
;acj008	PRECOAT_FF3_FAIL		==	IFG002		; POLCOM	Precoat transfer fail

;acj008	PRECOAT_FF1_REQ			==	IIN000		; POLCOM	Precoat transfer request
;acj008	PRECOAT_FF2_REQ			==	IIN001		; POLCOM	Precoat transfer request
;acj008	PRECOAT_FF3_REQ			==	IIN002		; POLCOM	Precoat transfer request

;acj008	SLUICE_INUSE			==	IIN003		; POLCOM	Sluice valves inuse
;acj014	SLUICE_INUSE_POLCOM		==	IIN003		; POLCOM	Sluice valves inuse	;acj008
	BLOWBACK_DRAIN_INUSE_POLCOM	==	IIN014		; POLCOM	Blowback drain inuse	;acj014

;acj008	POL1_BRAND_ACTUAL		==	ISG010		; POLCOM	OLBA Brand
;acj008	POL2_BRAND_ACTUAL		==	ISG025		; POLCOM	OLBA Brand
;acj008	POL3_BRAND_ACTUAL		==	ISG040		; POLCOM	OLBA Brand

;acj008	LHX_TNK_CO2_OK_FG		==	LFG020		; LHX		LHX tank counterpressure ok flag (PCM4)
;acj002 - temp!!!!
;acj002	LHX_TNK_CO2_OK_FG_LHX		==	LFG020		; LHX		LHX tank counterpressure ok flag (PCM4)	;acj008
;acjxyz	LHX_TNK_CO2_OK_FG_LHX		==	ZFG934		; LHX		LHX tank counterpressure ok flag (PCM4)	;acj002	;acj008
;acj002 - temp!!!!
	LHX_TNK_CO2_OK_FG_LHX		==	LFG020		; LHX		LHX tank counterpressure ok flag (PCM4)	;acj002 ;acj008	;acjxyz

;dvs001
	BAS_POL1_STATE			==	IIN007		; BAS Interface
	BAS_POL2_STATE			==	IIN008		; BAS Interface
	BAS_POL3_STATE			==	IIN009		; BAS Interface

;ALLOF5  
	SLUICE_RESERVE_SG_ALLOF5  == QSG076  ;VCM021

	POL1_XFER_INLET_RESERVE_SG_ALLOF5	==	QSG249	; ALLOF5	;ldk025
	POL2_XFER_INLET_RESERVE_SG_ALLOF5	==	QSG250	; ALLOF5	;ldk025
	POL3_XFER_INLET_RESERVE_SG_ALLOF5	==	QSG251	; ALLOF5	;ldk025

	POL1_AGE_TNK1_SG_ALLOF5	==	QSG222	; ALLOF5	;VCM071
	POL1_AGE_TNK2_SG_ALLOF5	==	QSG223	; ALLOF5	;VCM071
	POL2_AGE_TNK1_SG_ALLOF5	==	QSG225	; ALLOF5	;VCM071
	POL2_AGE_TNK2_SG_ALLOF5	==	QSG226	; ALLOF5	;VCM071
	POL3_AGE_TNK1_SG_ALLOF5	==	QSG228	; ALLOF5	;VCM071
	POL3_AGE_TNK2_SG_ALLOF5	==	QSG229	; ALLOF5	;VCM071

	POL1_PRT_SG_ALLOF5	==	QSG261	; ALLOF5	;VCM071
	POL2_PRT_SG_ALLOF5	==	QSG262	; ALLOF5	;VCM071
	POL3_PRT_SG_ALLOF5	==	QSG263	; ALLOF5	;VCM071

	POL_PC_RESERVE_SG_ALLOF5  == QSG280  ;VCM079

;mw000 begin
	POL1_MCMS_PROCEDURE_ALLOF5		==	QIN703
	POL2_MCMS_PROCEDURE_ALLOF5		==	QIN704
	POL3_MCMS_PROCEDURE_ALLOF5		==	QIN705
	POL1_MCMS_STATE_ALLOF5			==	QIN753
	POL2_MCMS_STATE_ALLOF5			==	QIN754
	POL3_MCMS_STATE_ALLOF5			==	QIN755
	POL1_MCMS_STATUS_ALLOF5			==	QIN803
	POL2_MCMS_STATUS_ALLOF5			==	QIN804	
	POL3_MCMS_STATUS_ALLOF5			==	QIN805
;mw000 end
	POL1_BODYFEED_ACTIVE_ALLOF5		==	QIN947	;Polish Filter 1 Bodyfeed Addition Active	;mw001
	POL2_BODYFEED_ACTIVE_ALLOF5		==	QIN949	;Polish Filter 2 Bodyfeed Addition Active       ;mw001
	POL3_BODYFEED_ACTIVE_ALLOF5		==	QIN951	;Polish Filter 3 Bodyfeed Addition Active       ;mw001

;recipe
	RECIPE_TARGET_ALCOHOL    ==	RFL032       ; /* Target alchol */
	RECIPE_TARGET_EXPANSION  ==   RFL035       ; /* Target expansion for PR */ VCM078

;*******************************************************************************
;
;	EQUATES
;	-------

	OPENED == 0		; Open indication for digital inputs
	CLOSED == 1		; Closed indication for digital inputs
	T_0 == 1		;TEMP BIT $T0
	T_1 == 2		;TEMP BIT $T1
	T_2 == 4		;TEMP BIT $T2
	T_3 == 8		;TEMP BIT $T3
	T_4 == 16		;TEMP BIT $T4
	T_5 == 32		;TEMP BIT $T5
	T_6 == 64		;TEMP BIT $T6
	T_7 == 128		;TEMP BIT $T7
	T_8 == 256		;TEMP BIT $T8
	T_9 == 512		;TEMP BIT $T9
	T_10 == 1024		;TEMP BIT $T10
	T_11 == 2048		;TEMP BIT $T11
	T_12 == 4096		;TEMP BIT $T12
	T_13 == 8192		;TEMP BIT $T13
	T_14 == 16384		;TEMP BIT $T14
	T_15 == 32768		;TEMP BIT $T15
	T_16 == 1		;TEMP BIT $T16
	T_17 == 2		;TEMP BIT $T17
	T_18 == 4		;TEMP BIT $T18
	T_19 == 8		;TEMP BIT $T19
	T_20 == 16		;TEMP BIT $T20
	T_21 == 32		;TEMP BIT $T21
	T_22 == 64		;TEMP BIT $T22
	T_23 == 128		;TEMP BIT $T23
	T_24 == 256		;TEMP BIT $T24
	T_25 == 512		;TEMP BIT $T25
	T_26 == 1024		;TEMP BIT $T26
	T_27 == 2048		;TEMP BIT $T27
	T_28 == 4096		;TEMP BIT $T28
	T_29 == 8192		;TEMP BIT $T29
	T_30 == 16384		;TEMP BIT $T30
	T_31 == 32768		;TEMP BIT $T31

	C_0 == 1		;COMMAND BIT $C0
	C_1 == 2		;COMMAND BIT $C1
	C_2 == 4		;COMMAND BIT $C2
	C_3 == 8		;COMMAND BIT $C3
	C_4 == 16		;COMMAND BIT $C4
	C_5 == 32		;COMMAND BIT $C5
	C_6 == 64		;COMMAND BIT $C6
	C_7 == 128		;COMMAND BIT $C7

	S_0 == 1		;STATUS BIT $S0
	S_1 == 2		;STATUS BIT $S1
	S_2 == 4		;STATUS BIT $S2
	S_3 == 8		;STATUS BIT $S3
	S_4 == 16		;STATUS BIT $S4
	S_5 == 32		;STATUS BIT $S5
	S_6 == 64		;STATUS BIT $S6
	S_7 == 128		;STATUS BIT $S7

	F_0 == 1		;FAULT BIT $F0
	F_1 == 2		;FAULT BIT $F1

	M_0 == 1		;MODE BIT $M0
	M_1 == 2		;MODE BIT $M1
	M_2 == 4		;MODE BIT $M2

        BIT_AM == 64

;*******************************************************************************
;
;		SET ERROR SUBROUTINES
;
;*******************************************************************************

	ON ERROR GOSUB ERRSUB		;define error handling routine

	ON HOLD GOSUB HOLDSUB		;define hold routine

;*******************************************************************************
;*******************************************************************************
;		M A I N
;*******************************************************************************
;*******************************************************************************

	IF (SA_STATE > 1) THEN          
		GOTO HOLDSUB		;Must restart from hold

;*******************************************************************************

	SA_STATE = 0

MAIN:
	ON SA_STATE GOTO POL1,POL2,POL3,POL4,POL5,POL6,POL7,POL8,POL9,POL10
	ON (SA_STATE - 10) GOTO POL11,POL12,POL13,POL14,POL15,POL16,POL17,POL18
	ON (SA_STATE - 18) GOTO POL19,POL20,POL21,POL22
																	 ;VCM047
	GOSUB SAINIT			;TB.2.1.9.2.43 SA INITIALIZE

;===============================================================================
;TB.2.1.9.2		SYSTEM OFF
;===============================================================================
POL1:

	SA_STATUS = "SYSTEM OFF"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 1

;mrp004	start

;	IF (UNIT_NUMBER = U_FF1) THEN		;DVS001
;	   BAS_POL1_STATE = 0			;BAS Filter STATE,OFF=0
;	IF (UNIT_NUMBER = U_FF2) THEN	
;	   BAS_POL2_STATE = 0
;	IF (UNIT_NUMBER = U_FF3) THEN	
;	   BAS_POL3_STATE = 0

	IF (UNIT_NUMBER = U_FF1) THEN		;DVS001
		BEGIN
	   BAS_POL1_STATE = 0			;BAS Filter STATE,OFF=0
		IF BLND_SC_SA_POST_FIL_SEL_PTR THEN   ;VCM025
			FIL_FLOW_OS = 900
		  ELSE
			FIL_FLOW_OS = 1100
		END
	IF (UNIT_NUMBER = U_FF2) THEN
		BEGIN	
	   BAS_POL2_STATE = 0
		IF BLND_SC_SA_POST_FIL_SEL_PTR THEN ;VCM025
			FIL_FLOW_OS = 900
		  ELSE
			FIL_FLOW_OS = 1100
		END
	IF (UNIT_NUMBER = U_FF3) THEN
		BEGIN	
	   BAS_POL3_STATE = 0
		IF BLND_SC_SA_POST_FIL_SEL_PTR THEN ;VCM025
			FIL_FLOW_OS = 800
		  ELSE
			FIL_FLOW_OS = 1000
		END
;mrp004 	end

        TURBIDITY_CHECK_FG = 0	;TGD004
	CIRC_TO_FEED_TIME = 120  ;RESET IN CASE MODIFIED
;	SLUICE_LOCALLY_FG = 0	;ehb029

	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADSO			;TB.2.1.9.2.1 ALIGN DEVICES SYSTEM OFF
	GOSUB RELEASEXFERINLETLINE	;ldk025
	LAMP LAMP_ADI,LAMP_NUMBER,BLACK       ;RDK005
	LAST_LAMP_STATE = BLACK               ;RDK005

;mw000 start
	;clear recorded values
	PRECOAT_TOTAL_FL = 0			
	AGE_BBL_DE_USAGE_RATIO_FL  = 0 ;VCM078 ZFL412
	PR_BBL_DE_USAGE_RATIO_FL   = 0 ;VCM078 ZFL413
	FILTER_DP_FL = 0					
	DO_STARTUP_FL = 0			
	MCMS_SLUICE_CYCLE = 0

	BODYFEED_SEL = 1   ;VCM054

	DILUENT_IN_FILTER_FG = 0			 		;ZFG145 VCM048
	PRECOAT_TRANSFER_TYPE_PTR = 0	;tta001
	PRECOAT_TEST_STARTED_FG = 0  ;VCM073
	PRECOAT_TEST_FG = 0			  ;VCM073
;mw000 end

POL1SS:
	GOSUB BODAGIT			;Bodyfeed tank agitator control	;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T0
	;transition T0
	;Run command AND CO2 Purge selected
	IF ((SC_SA_START_CMD) | (CONT_RUN_MODE_FG)) THEN
		BEGIN
		GOSUB CHKMAN		;TB.2.1.9.2.25 CHECK IF DEVS IN AUTO


	 IF (FILTER_MODE = 0) THEN		                         ;JFH000
		BEGIN 
		IF (PRECOAT_REQ_PTR = 0) THEN                            ;
			BEGIN                                            ;
			PRECOAT_REQ_PTR = 1	;Precoat makeup request  ;
			SA_5_MESSAGE = "FILTER REQUESTING PRECOAT"       ;
			PRINT LOG_ADI, "%p REQUESTING PRECOAT",UNIT_SG   ;
         END                                              ;
		END                                                      ;JFH000

		GOSUB RESETOGAVG		;Reset og average	;acj018

		IF PRECOAT_TEST_FG THEN  ;ZFG225 VCM073 skip to fill 1 diluent
			BEGIN
			PRINT LOG_ADI,"INSPECT PRECOAT SEQUENCE STARTED"
			PRECOAT_TEST_STARTED_FG = 1  ;ZFG226 latch flag
			GOTO POL22  ;DILUENT FILL 1
			END

		IF (AIR_PURGE_MODE = 1) THEN
			GOTO POL2		;CO2PURGE
;TB.2.1.9.2.T2
	;transition T2
	;Run command AND Diluent Purge selected
		GOTO POL3		;DILUENTPURGE
		END

;TB.2.1.9.2.T31
	;transition T31
	;Maintenance command
	IF (SC_SA_MAINT_CMD) THEN
		GOTO POL20		;MAINT

	WAIT 1
	GOTO POL1SS

;===============================================================================
;TB.2.1.9.2		CO2 PURGE
;===============================================================================
POL2:

	SA_STATUS = "CO2 PURGE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 2
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADCP			;TB.2.1.9.2.2 ALIGN DEVICES CO2 PURGE
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL2SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

	EXPR6 = (FILTER_HI_PRESS:DEV_STAT = S_1);HI     TGD001
	IF (CO2_PURGE_TMR > CO2_PURGE_TIME) & EXPR6 THEN
		GOTO POL6               ;CO2 PRESS TEST

;TB.2.1.9.2.T1
	;transition T1
	;CO2 Purge step timer greater than CO2 Purge time
	;and filter press switch not made               TGD001
	IF (CO2_PURGE_TMR > CO2_PURGE_TIME) & EXPR6 THEN
		GOTO POL5		;CO2PRESS

	WAIT 1
	GOTO POL2SS

;===============================================================================
;TB.2.1.9.2		DILUENT PURGE
;===============================================================================
POL3:

	SA_STATUS = "DILUENT PURGE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 3
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADDP			;TB.2.1.9.2.3 ALIGN DEVICES DILUENT PURGE
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL3SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILLTIMECHK		;TB.2.1.9.2.27 FILL TIME CHECK
	GOSUB BODFEEDLINEFLUSHCHK	;tta001

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T3
	;transition T3
	;Filter High Level probe set for X seconds
	IF (FILTER_HI_LVL:DEV_STAT = S_1) THEN		;hi
		GOTO POL4		;DRAINDILUENT

	WAIT 1
	GOTO POL3SS

;===============================================================================
;TB.2.1.9.2		DRAIN DILUENT
;===============================================================================
POL4:

	SA_STATUS = "DRAIN DILUENT"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 4
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADDD			;TB.2.1.9.2.4 ALIGN DEVICES DRAIN DILUENT
	GOSUB RELEASEXFERINLETLINE	;ldk025

	IF PRECOAT_TEST_STARTED_FG THEN   ;VCM073
      POL_DO_PRESSOUT_ENABLED = 1

   IF (POL_DO_PRESSOUT_ENABLED) THEN							 ;JMS004
     BEGIN    
 	 IF (POL_DO_PRESSOUT_ENABLED_FG = 0) THEN              
      POL_DO_PRESSOUT_COMPLETE_FG = 0
     END 

POL4SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB DRAINFAILCHK		;TB.2.1.9.2.28 DRAIN FAIL CHECK

;JMS004 START
;	IF (POL_DO_PRESSOUT_ENABLED_FG = 1) & (POL_DO_PRESSOUT_COMPLETE_FG = 0)THEN

	IF (POL_DO_PRESSOUT_ENABLED) THEN			 ;JMS004
		BEGIN    
		IF (POL_DO_PRESSOUT_COMPLETE_FG = 0)THEN
			BEGIN
			POL_DO_PRESSOUT_ENABLED_FG = 1
;			PRINT LOG_ADI, "POL DO PRESSOUT ENABLED"
			SA_MESSAGE = "POL DO PRESSOUT ENABLED"
			GOSUB C6XV318
			GOSUB C6XV307
			GOSUB C6XV317
			GOSUB C6XV309
			GOSUB C6XV324
			GOSUB C6XV306
			GOSUB C6XV301
			PUTMANL '8606FC32'
			PUTOUT '8606FC32',100
			GOSUB O6XV330
			GOSUB O6XV325
			GOSUB O6XV310
			GOSUB C6XV302
			GOSUB O6XV303
			END

		IF (STEP_TMR > POL_DO_PRESSOUT_TIME)&(POL_DO_PRESSOUT_ENABLED_FG = 1)THEN
			BEGIN
			GOSUB O6XV302
			GOSUB O6XV307
			GOSUB C6XV325
			GOSUB C6XV310
			PUTMANL '8606FC32'
			PUTOUT '8606FC32',0
			POL_DO_PRESSOUT_ENABLED_FG = 0
			POL_DO_PRESSOUT_COMPLETE_FG = 1
			PRINT LOG_ADI, "POL DO PRESSOUT COMPLETE"
			SA_MESSAGE = "POL DO PRESSOUT COMPLETE"
			END
		END
;JMS004 END
	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T4
	;transition T4
	;Filter Low Level probe set for X seconds

   IF (FIL_FEED_FLOW:AI_MEAS < 2) & (POL_DO_PRESSOUT_ENABLED_FG = 1)THEN
      POL_DO_PRESSOUT_COMPLETE_FG = 1

	IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN		;LO
      BEGIN
      POL_DO_PRESSOUT_ENABLED_FG = 0          ;JMS004
      GOSUB C6XV303
		IF PRECOAT_TEST_STARTED_FG THEN   ;VCM073
			GOTO POL17		;VENT
		  ELSE
			GOTO POL5		;CO2PRESS
		END

	WAIT 1
	GOTO POL4SS

;===============================================================================
;TB.2.1.9.2		CO2 PRESS
;===============================================================================
POL5:

	SA_STATUS = "CO2 PRESS"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 5
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADCP2			;TB.2.1.9.2.5 ALIGN DEVICES CO2 PRESS
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL5SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB CO2TIMEOUT		;TB.2.1.9.2.56 CO2 PRESS TIMEOUT CHECK	;acj000

	IF (FILTER_HI_PRESS:DEV_STAT = S_1) THEN	;HI
		TIMERON TIMER1_TMR

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T5
	;transition T5
	;Filter High Pressure timer greater than Filter High Pressure time
	IF (TIMER1_TMR > CO2_PRESS_TIME) THEN
		GOTO POL6		;CO2PRESSTEST

	WAIT 1
	GOTO POL5SS

;===============================================================================
;TB.2.1.9.2		CO2 PRESS TEST
;===============================================================================
POL6:

	SA_STATUS = "CO2 PRESS TEST"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 6
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADCPT			;TB.2.1.9.2.6 ALIGN DEVICES CO2 PRESS TEST
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL6SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.30 PRESSURE TEST
	IF (FILTER_HI_PRESS:DEV_STAT != S_1) THEN		;HI
		BEGIN
;TB.2.1.9.2.T8
	;transition T8
	;CO2 Pressure Test Failed for second time
		IF (TEST_FAIL_FG) THEN
			BEGIN
			TEST_FAIL_FG = 0
			GOTO POL21		;CO2FAIL
			END
;TB.2.1.9.2.T6
	;transition T6
	;CO2 Pressure Test Failed for first time
		TEST_FAIL_FG = 1
		GOTO POL5		;CO2PRESS
		END

;TB.2.1.9.2.T7
	;transition T7
	;CO2 Pressure Test okay
	IF (STEP_TMR >= PRESS_TEST_TIME) THEN
		IF (FILTER_HI_PRESS:DEV_STAT = S_1) THEN	;HI
			BEGIN											;VCM048																	 ;5%
			EXPR6 = (RECIPE_TARGET_ALCOHOL <= 5.0)&(NO_DILUENT_BUILD_REC_FG = 0);RFG001
			EXPR6 = EXPR6 & (START_FILTER_WITH_DILUENT_FG)
			EXPR6 = EXPR6 & (XFER_TNK_LVL:AI_MEAS < XFER_TNK_LVL_LO_LIM)
			IF EXPR6 THEN    ;VCM047
				BEGIN
				PUTMANL FIL_FLOW_TOT
				GOTO POL22  ;FILTERFILL1DILUENT
				END
			 ELSE
				BEGIN
				START_FILTER_WITH_DILUENT_FG = 0
				GOTO POL7		;FILTERFILL1XFER
				END
			END

	WAIT 1
	GOTO POL6SS

;===============================================================================
;TB.2.1.9.2		FILTER FILL 1 XFER
;===============================================================================
POL7:

	SA_STATUS = "FILTER FILL 1 XFER"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 7
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RELEASEXFERINLETLINE	;ldk025

;jh024	PRECOAT_COMP_DONE_FG = 1  ;VCMjjj
	BLND_PRECOAT_COMP_DONE_FG_PTR = 1  ;VCMjjj		;jh024
	;TB.2.1.9.2.T34
	;transition T34
	;If the BRAND check fails, tank mode selections are not correct or the
	;tank level is too low, then automatically go to the Filter Fill 1 Feed
	;step.
	IF (XFER_TNK_LVL_MODE:DEV_STAT = S_0) THEN		;OFF
		GOTO POL8		;FILTERFILL1FEED
;acj000	IF (XFER_TNK_LVL:AI_INVL > XFER_TNK_LVL_FILL_1) THEN
;ldk028	IF (XFER_TNK_LVL:AI_INVL < XFER_TNK_LVL_FILL_1) THEN	;acj000
	IF (XFER_TNK_LVL:AI_MEAS < XFER_TNK_LVL_FILL_1) THEN	;acj000	;ldk028
		GOTO POL8		;FILTERFILL1FEED
;jh024	IF (COMPAR(XFER_TNK_BRAND,BRAND_ID,BRAND_LENGTH,NE)) THEN
	IF (COMPAR(POL_XFER_TNK_BRAND_PTR,POL_BRAND_ID_PTR,BRAND_LENGTH,NE)) THEN	;jh024
		GOTO POL8		;FILTERFILL1FEED

	GOSUB ADFF1T			;TB.2.1.9.2.7 ALIGN DEVICES FILTER FILL 1 XFER

POL7SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILFLOWCHK		;FILTER FLOW CHECK	;acj005
   GOSUB BODYFEEDINIT  ;VCM085

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T9
	;transition T9
	;Transfer Tank Level less than minimum level to fill OR Transfer
	;Tank Level Control mode is Off
;ldk028	IF (STEP_TMR > FILL_1_XFER_TIME) | (XFER_TNK_LVL:AI_INVL <= XFER_TNK_LVL_LO_LIM) THEN
	IF (STEP_TMR > FILL_1_XFER_TIME) | (XFER_TNK_LVL:AI_MEAS <= XFER_TNK_LVL_LO_LIM) THEN	;ldk028
		GOTO POL8		;FILTERFILL1FEED
	IF (XFER_TNK_LVL_MODE:DEV_STAT = S_0) THEN		;OFF
		GOTO POL8		;FILTERFILL1FEED

;TB.2.1.9.2.T10
	;transition T10
	;Medium Filter Level timer greater than Medium Filter Level time
;DUAL_PC_ADJ_BBLS1 VCM056
		IF (DUAL_PRECOAT_SELECTION_FG = 1) THEN
			BEGIN
;rma057			IF (FILTER_MED_LVL:DEV_STAT = S_0) | ((FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS)+(DUAL_PC_ADJ_BBLS1)) THEN
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= (FILL1_BBLS + DUAL_PC_ADJ_BBLS1)) THEN		;rma057
				GOTO POL9		;PRECOATXFER
			END
		 ELSE
			BEGIN
;mrp002	IF (FILTER_MED_LVL:DEV_STAT = S_0) THEN		;MED
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS) THEN
				GOTO POL9		;PRECOATXFER
			END

	WAIT 1
	GOTO POL7SS

;===============================================================================
;TB.2.1.9.2		FILTER FILL 1 FEED
;===============================================================================
POL8:

	SA_STATUS = "FILTER FILL 1 FEED"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 8
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADFF1F			;TB.2.1.9.2.8 ALIGN DEVICES FILTER FILL 1 FEED
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL8SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILL1TIMECHK		;TB.2.1.9.2.31 FILL 1 TIME CHECK
   GOSUB BODYFEEDINIT  ;VCM085

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T11
	;transition T11
	;Medium Filter Level timer greater than Medium Filter Level time

;DUAL_PC_ADJ_BBLS1 VCM056
		IF (DUAL_PRECOAT_SELECTION_FG = 1) THEN
			BEGIN
;rma057			IF (FILTER_MED_LVL:DEV_STAT = S_0) | ((FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS)+(DUAL_PC_ADJ_BBLS1)) THEN
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= (FILL1_BBLS + DUAL_PC_ADJ_BBLS1)) THEN	 ;rma057
				GOTO POL9		;PRECOATXFER
			END
		 ELSE
			BEGIN
;mrp002	IF (FILTER_MED_LVL:DEV_STAT = S_0) THEN		;MED
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS) THEN
				GOTO POL9		;PRECOATXFER
			END

	WAIT 1
	GOTO POL8SS

;===============================================================================
;TB.2.1.9.2		PRECOAT XFER
;===============================================================================
POL9:

	SA_STATUS = "PRECOAT XFER"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 9
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEPRECOAT		 ;VCM079
	GOSUB ADPT			;TB.2.1.9.2.9 ALIGN DEVICES PRECOAT XFER
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL9SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
;acj009	GOSUB FILTERFULLCHK		;TB.2.1.9.2.57 FILTER FULL CHECK	;acj000
;start tta001
	;Tell operator which transfer we are doing for Dual Precoat
	IF(PRECOAT_TRANSFER_TYPE_PTR = 2)THEN
		BEGIN
		SA_2_MESSAGE = "PRECOAT XFER 2"
		END
	ELSE IF(PRECOAT_TRANSFER_TYPE_PTR = 1)	THEN
		BEGIN
		SA_2_MESSAGE = "PRECOAT XFER 1"
		END
;end tta001
	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T12
	;transition T12
	;Final Precoat DE Transfer complete
;acj002	IF (PRECOAT_REQ_PTR = 6) THEN
;acj002		GOTO POL10		;FILTERFILL2
	IF (PRECOAT_REQ_PTR = 6) THEN			;acjxyz
		GOTO POL10		;FILTERFILL2	;acjxyz
;acj002 begin
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		IF ('N00139':DIN_VAL) THEN	;acj002
;acjxyz			GOTO POL10		;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		IF ('N00140':DIN_VAL) THEN	;acj002
;acjxyz			GOTO POL10		;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF ('N00141':DIN_VAL) THEN		;acj002
;acjxyz		GOTO POL10			;acj002
;acj002 end

	WAIT 1
	GOTO POL9SS

;===============================================================================
;TB.2.1.9.2		FILTER FILL 2
;===============================================================================
POL10:

	SA_STATUS = "FILTER FILL 2"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 10
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEPRECOAT		 ;VCM079
	GOSUB ADFF2			;TB.2.1.9.2.10 ALIGN DEVICES FILTER FILL 2
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL10SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILL2FAILCHK		;TB.2.1.9.2.32 FILL 2 FAIL CHECK
	IF (PRECOAT_TRANSFER_TYPE_PTR = 2) THEN  ;dual pre-coat ;VCM058
		GOSUB FILTERHILVLCHK		;TB.2.1.9.2.51 FILTER HI LEVEL CHECK

	;----------------------------------
	;	transition conditions
	;----------------------------------

;start tta001
	;Tell operator which transfer we are doing for Dual Precoat
	IF(PRECOAT_TRANSFER_TYPE_PTR = 2)THEN
		BEGIN
		SA_2_MESSAGE = "FILTER FILL 2 PASS 2"
		END
	ELSE IF(PRECOAT_TRANSFER_TYPE_PTR = 1)	THEN
		BEGIN
		SA_2_MESSAGE = "FILTER FILL 2 PASS 1"
		END
;end tta001
;TB.2.1.9.2.T13
	;transition T13
	;Final Precoat Flush Transfer complete
	IF (FILL_2_TMR > FIL_FILL_2_TIME) THEN
;start tta001
		BEGIN
		IF(PRECOAT_TRANSFER_TYPE_PTR = 2) & (FILL_2_TMR < (FIL_FILL_2_TIME + PC_PRESS_OUT_TIME) )  THEN
			BEGIN
			GOSUB O6XV352
			GOSUB C6XV323
			END
;end tta001
;tta001		IF (FILTER_HI_LVL:DEV_STAT = S_1) THEN		;HI
		ELSE IF (FILTER_HI_LVL:DEV_STAT = S_1) THEN	;HI	;tta001
			BEGIN			  ;VCMGGG
			FILL_2_BBLS = FIL_FLOW_TOT:AI_MEAS
			FIL_FLOW_TOT:IOS_TG:1 = 0       ;VCM014
			PUTMANL FIL_FLOW_TOT		;Zero the filter flow totalizer
			WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,NOT(BIT_AM))COUNT 5,RSTFQBFAIL
			PUTAUTO FIL_FLOW_TOT
			WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL
			PRINT LOG_ADI, "FILTER FILL 2 BBLS = %2.1f",FILL_2_BBLS   ;
			GOTO POL11		;PRECOATCIRC
			END
		END									;tta001
	WAIT 1
	GOTO POL10SS

;===============================================================================
;TB.2.1.9.2		PRECOAT CIRC
;===============================================================================
POL11:

	REPORT_TRIG1_FG = 1		;Precoat transfer done

	SA_STATUS = "PRECOAT CIRC"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 11
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADPC			;TB.2.1.9.2.11 ALIGN DEVICES PRECOAT CIRC
	GOSUB RELEASEXFERINLETLINE	;ldk025
;moved to filter fill 1 VCMjjj        PRECOAT_COMP_DONE_FG = 1       ;RDK004
	IF (FILTER_MODE = 0) THEN		                         ;JFH000
		BEGIN                                                    ;
		IF (PRECOAT_REQ_PTR = 0) THEN                            ;
			BEGIN                                            ;
			PRECOAT_REQ_PTR = 1	;Precoat makeup request  ;
			SA_5_MESSAGE = "FILTER REQUESTING PRECOAT"       ;
			PRINT LOG_ADI, "%p REQUESTING PRECOAT",UNIT_SG   ;
         END                                              ;
		END                                                      ;JFH000

;tta001 start
	IF(PRECOAT_TRANSFER_TYPE_PTR = 2)THEN
		BEGIN
		SA_2_MESSAGE = "PRECOAT CIRC 2"
		END
	ELSE IF(PRECOAT_TRANSFER_TYPE_PTR = 1)	THEN
		BEGIN
		SA_2_MESSAGE = "PRECOAT CIRC 1"
		END
;tta001 end

POL11SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	PRECOAT_TOTAL_FL = POL_PRECOAT_TOT_PTR		;Update precoat value ;mw000
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB TURBIDITYCHK	;VCM016	;TB.2.1.9.2.33 TURBIDITY CHECKS
	GOSUB FILTERHILVLCHK		;TB.2.1.9.2.51 FILTER HI LEVEL CHECK

;		IF (PRECOAT_TEST_FG & DILUENT_IN_FILTER_FG) THEN  ;VCM073 goto blowback to inspect precoat 
;			PRECOAT_TEST_STARTED_FG = 1  ;ZFG226 latch flag

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T14
	;transition T14
	;Precoat Circ step timer expired AND [Turbidity okay for X seconds
	;after step timer expiration OR (High Turbidity AND High Turbidity
	;Override selected) OR (Circ to Feed command AND Filter mode is
	;Manual)]
	IF (PRECOAT_CIRC_TMR > PRECOAT_CIRC_TIME) THEN
		BEGIN
		GOSUB SUSTURB ;VCM016
;start tta001
		IF(PRECOAT_TRANSFER_TYPE_PTR = 1)THEN
			BEGIN
			IF (PRECOAT_CIRC_TMR > 720) & (BEER_TURBIDITY:AI_INVL >= 2.0)THEN		;VCM072
				BEGIN
				ERROR_STRING = "TURB >= 2 BUILD NOT COMPLETE"    
				IF (BUILD_NOT_DONE_FG = 0) THEN
					BEGIN
					PRINT LOG_ADI,"TURB >= 2-BUILD NOT COMPLETE"    
               BUILD_NOT_DONE_FG = 1
					END
				END
;jaz000			IF ((!TEMP_FG) | (TURBIDITY_OVERRIDE) | (PRECOAT_CIRC_TMR > PRECOAT_CIRC_MAX_TIME)) THEN
			IF ((TEMP_FG) | (PRECOAT_CIRC_TMR > PRECOAT_CIRC_MAX_TIME)) THEN		;jaz000 - change how the turbidity is calculated, remove turbidity override
				BEGIN
				IF(PRECOAT_CIRC_TMR > PRECOAT_CIRC_MAX_TIME)THEN
					PRINT LOG_ADI,"PRECOAT CIRC ENDED ON MAX TIME"
				ELSE
					PRINT LOG_ADI,"PRECOAT CIRC ENDED ON TURBIDITY"

				PRECOAT_MODE_SG = "DUAL PRECOAT"
				PRECOAT_TRANSFER_TYPE_PTR = 2
				GOTO POL9	;do the second precoat transfer
				END
			END
		ELSE
			BEGIN
;end tta001

;jaz000			IF ((!TEMP_FG) | (TURBIDITY_OVERRIDE) | (SC_SA_CIRC_TO_FEED_CMD)) THEN ;VCM016
			IF ((TEMP_FG) | (TURBIDITY_OVERRIDE) | (SC_SA_CIRC_TO_FEED_CMD)) THEN ;jaz000 - changed how susturb routine works for this state since it was always true before
				BEGIN
				IF START_FILTER_WITH_DILUENT_FG & DILUENT_IN_FILTER_FG THEN  ;VCM047
					BEGIN  ;VCM048
					PUTAUTO FIL_FLOW_CNTL_VLV
					FIL_FLOW_CNTL_VLV:PID_SPVL:1 = FIL_FLOW_OS
					SA_TMP_FLT = (FIL_FEED_FLOW:PID_SPVL:1 - FIL_FEED_FLOW:AI_MEAS)			;tta001 
					IF (ABS(SA_TMP_FLT) > RAMP_DOWN_FLOW_DEADBAND) THEN				;tta001
						SA_MESSAGE = "RAMPING DOWN FLOW"
					 ELSE
						BEGIN
						IF (DUAL_PRECOAT_SELECTION_FG = 0) THEN
							PRECOAT_MODE_SG = "SINGLE PRECOAT"
						IF PRECOAT_TEST_STARTED_FG THEN 	  ;VCM073
							GOTO POL4 ;DRAIN DILUENT  ;VCM073
						  ELSE
							GOTO POL14		;RECIRC  THEN HOLD
						END
					END
				  ELSE
					BEGIN
					IF (DUAL_PRECOAT_SELECTION_FG = 0) THEN
						PRECOAT_MODE_SG = "SINGLE PRECOAT"
               IF TURBIDITY_OVERRIDE THEN
						PRINT LOG_ADI,"CIRC TO FEED WITH TURBIDITY OVERRIDE"
					IF SC_SA_CIRC_TO_FEED_CMD THEN
						PRINT LOG_ADI,"CIRC TO FEED BY COMMAND"
					IF PRECOAT_TEST_STARTED_FG THEN ;VCM073
						GOTO POL4 ;DRAIN DILUENT  ;VCM073
					  ELSE
						GOTO POL12		;CIRCTOFEED
					END
				END
			END			;tta001
		END

	WAIT 1
	GOTO POL11SS

;===============================================================================
;TB.2.1.9.2		CIRC TO FEED
;===============================================================================
POL12:

	SA_STATUS = "CIRC TO FEED"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 12
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEXFERINLETLINE	;ldk025
	BOD_FEED_TNK_LVL_STRT = BOD_FEED_TNK_LVL:AI_INVL	;VCM049
	GOSUB ADCTF			;TB.2.1.9.2.12 ALIGN DEVICES CIRC TO FEED

POL12SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB LEVELCHK			;TB.2.1.9.2.34 LEVEL CHECKS
	GOSUB FILTERHILVLCHK		;TB.2.1.9.2.51 FILTER HI LEVEL CHECK
	GOSUB UPDSKD			;ldk031

	IF (DUAL_PRECOAT_SELECTION_FG = 0) THEN  ;VCM057
		GOSUB BODFEEDLINEFLUSHCHK	;Body feed line flush check	;tta001

;tta001	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG) THEN	;JMS005
	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG & !BODYFEED_FLUSH_STARTED_FG) THEN	;tta001
		GOSUB STOPBODYFEED				;JMS005

	GOSUB BFLEVELCHK			;Bodyfeed Level checks	;tta001

;VCM087	IF DUAL_PRECOAT_SELECTION_FG THEN
;VCM087	   GOSUB BODYFEEDVFDCNTL  ;VCM057

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T15
	;transition T15
	;Circ to Feed timer greater than Circ to Feed time AND Beer Outlet
	;Turbidity less than Outlet Turbidity Okay AND Filter Differential
	;Pressure less than Maximum Differential Pressure for X seconds
	;AND Transfer Tank status equals Auto or Drain AND Filter flow not
	;in deviation alarm AND Filter Run Select not equal to Recirc

	;see transition t16

;TB.2.1.9.2.T16
	;transition T16
	;[Circ to Feed timer greater than Circ to Feed time AND [(Final
	;Filter Feed tank level less than Feed tank Minimum On Stream
	;level for X seconds AND Filter Run Select not equal to Onstream
	;AND Filter Feed tank mode not selected to Drain) OR Transfer
	;Tank level greater than Maximum Transfer tank level for X seconds
	;OR (Outlet Turbidity High timer greater than Outlet Turbidity High
	;time AND Turbidity Override not selected) OR Final Filter Run
	;Select equals Recirc]] OR Differential Pressure Timer greater than
	;Differential Pressure time

	GOSUB T19COND
	IF (TEMP_FG3) THEN
		GOTO POL14		;RECIRC

;VCM016	IF (TIMER1_TMR > CIRC_TO_FEED_TIME) THEN ;TGD004
;VCM016			BEGIN
;VCM016		   IF (T19_COND) THEN
;VCM016			   GOTO POL14		;RECIRC
;VCM016		ELSE			;transition t15
;VCM016			GOTO POL13		;ONSTREAM
;VCM016			END

	GOSUB SUSTURB	;TGD004;VCM016	

	IF (TIMER1_TMR > CIRC_TO_FEED_TIME) THEN	;TGD004;VCM016	
		BEGIN
		IF ((!TEMP_FG) | (TURBIDITY_OVERRIDE)) THEN
			BEGIN	
			IF (T19_COND) THEN 
				GOTO POL14		;RECIRC
			ELSE			;transition t15
				GOSUB BODYFEEDLINEREPACKCHK	;TB.2.1.9.2.35 BODY FEED LINE REPACK CHECK ;tta001
			IF(BF_LINE_PACKED_FG | BODYFEED_SEL = 0)THEN	;tta001
				 GOTO POL13		;ONSTREAM
			END
		IF (TEMP_FG) THEN
			ERROR_STRING = "WAITING FOR TURBIDITY < 2"    
		END

;TB.2.1.9.2.T18
	;transition T18
	;Blowback command AND Blowback mode is Drain
	GOSUB BLOWBCKDP				;acj006
	IF (SC_SA_BLOWBACK_CMD | TEMP_FG) THEN	;acj006
		BEGIN
		GOSUB LOGBBDATA  ;VCM071

		IF (BLOWBACK_SEL = 1) THEN
			GOTO POL16		;BLOWBACKDRAIN
;TB.2.1.9.2.T17
	;transition T17
	;Blowback command AND Blowback mode is Normal
		GOTO POL15		;BLOWBACKNORMAL
		END

;TGD004        GOSUB UPDSKD			;TGD004

	WAIT 1
	GOTO POL12SS

;===============================================================================
;TB.2.1.9.2		ON STREAM
;===============================================================================
POL13:

	SA_STATUS = "ON STREAM"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 13

	IF (UNIT_NUMBER = U_FF1 & BAS_POL1_STATE=0) THEN	;dvs002;dvs001
	   BAS_POL1_STATE=1					;dvs002
	IF (UNIT_NUMBER = U_FF2 & BAS_POL2_STATE=0) THEN	;dvs002
	   BAS_POL2_STATE=1					;dvs002
	IF (UNIT_NUMBER = U_FF3 & BAS_POL3_STATE=0) THEN	;dvs002
	   BAS_POL3_STATE=1					;dvs002

;	IF (UNIT_NUMBER = U_FF1) THEN		;dvs002,DVS001
;	   BAS_POL1_STATE=1			;BAS Filter STATE,PROCESS=1
;	IF (UNIT_NUMBER = U_FF2) THEN	
;	   BAS_POL2_STATE=1
;	IF (UNIT_NUMBER = U_FF3) THEN	
;	   BAS_POL3_STATE=1
	BOD_FEED_TNK_LVL_STRT = BOD_FEED_TNK_LVL:AI_INVL	;VCM049

	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEXFERINLETLINE	;ldk025
	GOSUB ADOS			;TB.2.1.9.2.13 ALIGN DEVICES ON STREAM

POL13SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILTERHILVLCHK		;TB.2.1.9.2.51 FILTER HI LEVEL CHECK
	GOSUB HOPSRATEERRCHK		;TB.2.1.9.2.52 HOPS RATE ERROR CHECK
	GOSUB LEVELCHK			;TB.2.1.9.2.34 LEVEL CHECKS	;acj004
	GOSUB BFLEVELCHK                ;Bodyfeed Level checks		;tta001
	GOSUB BASTOT			;acj013
	GOSUB DOMON			;D.O. monitoring		;acj019
	GOSUB STARTUPDO			;100 bbls after startup, record DO value	;mw000	
	GOSUB MCMSSTARTAVG		;Start averaging				;mw000
	GOSUB BODYFEEDVFDCNTL		; bodyfeed VFD output control	  ;tta001
	GOSUB BODYFEEDLINEREPACKCHK	;TB.2.1.9.2.35 BODY FEED LINE REPACK CHECK ;tta001
	;vcm054
	IF BODYFEED_SEL & (BODYFEED_FLOW_TOT:AI_MEAS >= (BODYFEED_MAX_BLOWBACK_LIM - 20)) THEN
		BEGIN
      PRINT LOG_ADI, "DE-SELECTING BODY FEED FOR MAX AMT"
		BODYFEED_SEL = 0
		END

		IF (FIL_FLOW_TOT:AI_MEAS >= SHELL_DIL_DRAIN_BBLS) THEN ;VCM048
	 		DILUENT_IN_FILTER_FG = 0			 		;ZFG145

;tta001	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG) THEN	;JMS005
	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG & !BODYFEED_FLUSH_STARTED_FG) THEN	;tta001
		GOSUB STOPBODYFEED				;JMS005
	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T19
	;transition T19
	;(Feed tank level less than Feed tank On Stream level for X
	;seconds AND Filter Run Selection is Auto) OR Transfer tank status
	;is not Online OR Transfer tank level greater than Maximum
	;Transfer tank level for X seconds OR (Outlet Turbidity High timer
	;greater than Outlet Turbidity High time AND Turbidity Override not
	;selected) OR Differential Pressure High timer greater than
	;Differential Pressure High time OR Run Selection is Recirc OR
	;Hops Error is set
	GOSUB T19COND
	IF (T19_COND) THEN
		GOTO POL14		;RECIRC

	IF ((TURBIDITY_CHECK_FG = 1) | (STEP_TMR >= TURBIDITY_CHECK_TIME))THEN  ;TGD004
	  BEGIN
	    TURBIDITY_CHECK_FG = 1
	    GOSUB SUSTURB
	    TEMP_FG = (TEMP_FG & (!TURBIDITY_OVERRIDE))  ;TGD004
	    IF (TEMP_FG) THEN			     ;TGD004
	     BEGIN
	      ERROR_STRING = "HI TURBIDITY-TAKE LAB SAMPLE"
;KEEPS PRINTING              IF (COMPAR(SA_MESSAGE,"HI TURBIDITY-TAKE LAB SAMPLE",28,NE)) THEN
;	          PRINT LOG_ADI, "%p",ERROR_STRING
	     END
	  END
       
;VCM048	IF START_FILTER_WITH_DILUENT_FG THEN ;VCM047
;VCM048		BEGIN
;VCM048		PUTAUTO FIL_FEED_TNK_LVL_MODE
;VCM048		OPEN FIL_FEED_TNK_LVL_MODE				;Drain
;VCM048		ERROR_STRING = "SHELL DILUENT TO DRAIN"
;VCM048		EXPR6 = (FIL_FLOW_TOT:AI_MEAS >= SHELL_DIL_DRAIN_BBLS)
;VCM048		EXPR6 = EXPR6 | (STEP_TMR >= 480)
;VCM048		EXPR6 = EXPR6 | (FIL_FEED_TNK_LVL:AI_MEAS < FIL_FEED_TNK_MIN_LVL)
;VCM048		IF EXPR6 THEN
;VCM048			BEGIN
;VCM048			FIL_FLOW_TOT:IOS_TG:1 = 0       ;VCM014
;VCM048			PUTMANL FIL_FLOW_TOT		;Zero the filter flow totalizer
;VCM048			PUTAUTO FIL_FLOW_TOT
;VCM048			START_FILTER_WITH_DILUENT_FG = 0
;VCM048			MID FIL_FEED_TNK_LVL_MODE		;AUTO		;acj000
;VCM048			GOTO POL12  ;CIRC TO FEED
;VCM048			END
;VCM048		END

        GOSUB UPDSKD				     ;TGD004

	;Circ to Feed command				;VCM023
	IF (SC_SA_CIRC_TO_FEED_CMD) THEN
		GOTO POL12		;CIRCTOFEED	

;TB.2.1.9.2.T21
	;transition T21
	;Blowback command AND Blowback mode is Drain
	GOSUB BLOWBCKDP				;acj006

;ldk028	IF (SC_SA_BLOWBACK_CMD | TEMP_FG) THEN	;acj006
	IF (SC_SA_BLOWBACK_CMD | TEMP_FG | BLOWBACK_RECOVERY_LATCH_FG) THEN	;acj006;ldk028
		BEGIN
		GOSUB LOGBBDATA  ;VCM071
		IF (BLOWBACK_SEL = 1) THEN
			GOTO POL16		;BLOWBACKDRAIN

		GOSUB DILPUSHFEED  ;VCM026W

;TB.2.1.9.2.T20
	;transition T20
	;Blowback command AND Blowback mode is Normal
		GOTO POL15		;BLOWBACKNORMAL
		END

	WAIT 1
	GOTO POL13SS

;===============================================================================
;TB.2.1.9.2		RECIRC
;===============================================================================
POL14:

	SA_STATUS = "RECIRC"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 14
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEXFERINLETLINE	;ldk025
	GOSUB ADR			;TB.2.1.9.2.14 ALIGN DEVICES RECIRC

POL14SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB FILTERHILVLCHK		;TB.2.1.9.2.51 FILTER HI LEVEL CHECK
	GOSUB BODFEEDLINEFLUSHCHK	;TB.2.1.9.2.54 BODY FEED LINE FLUSH CHECK
	GOSUB STEPTIMECHK		;acj005
	GOSUB UPDSKD			;TB.2.1.9.2.55 UPDATE SKID

;tta001	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG) THEN	;JMS005
	IF (!BODYFEED_SEL) & (!BODYFEED_FLUSH_DONE_FG & !BODYFEED_FLUSH_STARTED_FG) THEN	;tta001
		GOSUB STOPBODYFEED				;JMS005

	GOSUB BFLEVELCHK                		;Bodyfeed Level checks		;tta001

	;----------------------------------
	;	transition conditions
	;----------------------------------

	IF START_FILTER_WITH_DILUENT_FG & DILUENT_IN_FILTER_FG THEN  ;VCM047
		BEGIN
      START_FILTER_WITH_DILUENT_FG = 0
		GOTO HOLDSUB		;Must restart from hold
		END
;TB.2.1.9.2.T23
	;transition T23
	;Blowback command AND Blowback mode is Drain
	GOSUB BLOWBCKDP
;acj005	IF (SC_SA_BLOWBACK_CMD | ((TEMP_FG) & (FILTER_RUN_SEL != 1))) THEN
;acj006	IF (SC_SA_BLOWBACK_CMD | ((TEMP_FG) & (FILTER_RUN_SEL != 2))) THEN	;acj005

;ldk028	IF (SC_SA_BLOWBACK_CMD | TEMP_FG) THEN	;acj005	;acj006
	IF (SC_SA_BLOWBACK_CMD | TEMP_FG | BLOWBACK_RECOVERY_LATCH_FG) THEN	;acj005	;acj006;ldk028
		BEGIN
		GOSUB LOGBBDATA  ;VCM071
;acj005		IF ((TEMP_FG) & (FILTER_RUN_SEL != 1)) THEN	;acj004
;acj006		IF ((TEMP_FG) & (FILTER_RUN_SEL != 2)) THEN	;acj004	;acj005
;acj006			PRINT LOG_ADI, "BLOWBACK ON HI DIFF PRESSURE"	;acj004
		IF (BLOWBACK_SEL = 1) THEN
			GOTO POL16		;BLOWBACKDRAIN

		GOSUB DILPUSHFEED  ;VCM026W
;TB.2.1.9.2.T22
	;transition T22
	;Blowback command AND Blowback mode is Normal
		GOTO POL15		;BLOWBACKNORMAL
		END

;TB.2.1.9.2.T24

	;transition T24
	;((Filter Feed tank level greater than Feed tank On Stream level
	;for X seconds AND Operator selected Automatic operation) OR
	;Operator selected On Stream operation) AND Transfer tank level
	;less than Transfer tank maximum level for X seconds AND ((Outlet
	;Turbidity less than Outlet turbidity maximum for X seconds) OR
	;Turbidity override set) AND Filter Differential Pressure less than
	;Maximum Differential Pressure for X seconds AND Transfer tank
	;status is Auto or Drain AND Hops error is reset
	GOSUB T19COND     ;VCM012
;jh024        EXPR6 = (FIL_FEED_TNK_LVL:AI_INVL > FEED_TNK_LVL_SETPT)
;ldk028        EXPR6 = (FIL_FEED_TNK_LVL:AI_INVL > POL_FEED_TNK_LVL_SETPT_PTR)		;jh024
        EXPR6 = (FIL_FEED_TNK_LVL:AI_MEAS > POL_FEED_TNK_LVL_SETPT_PTR)		;jh024	;ldk028
;VCM051        EXPR6 = EXPR6 | (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_1)
        EXPR6 = EXPR6 | (AND(FIL_FEED_TNK_LVL_MODE:DEV_STAT,S_1))	;VCM051
;VCM051	IF !(T19_COND) & EXPR6 THEN
	IF (T19_COND = 0) & EXPR6 THEN ;VCM051
		BEGIN
		BODYFEED_FLUSH_DONE_FG = 1  ;VCM060
;VCM060		GOSUB BODYFEEDLINEREPACKCHK	;TB.2.1.9.2.35 BODY FEED LINE REPACK CHECK

;VCM060		IF(BF_LINE_PACKED_FG | BODYFEED_SEL = 0)THEN	;tta001
			GOTO POL13		;ONSTREAM
		END

	   ;ERROR_STRING = "FEED TANK BELOW START LEVEL"	;VCM051


	IF (TURBIDITY_CHECK_FG = 1)THEN  ;TGD004
	     BEGIN
	      GOSUB SUSTURB
	      TEMP_FG = (TEMP_FG & (!TURBIDITY_OVERRIDE))  ;TGD004
	      IF (TEMP_FG) THEN			     ;TGD004
	       BEGIN
	        ERROR_STRING = "HI TURBIDITY-TAKE LAB SAMPLE"
;KEEPS PRINTING                IF (COMPAR(SA_MESSAGE,"HI TURBIDITY-TAKE LAB SAMPLE",28,NE)) THEN
;	           PRINT LOG_ADI, "%p",ERROR_STRING
	       END
	     END
       
        GOSUB UPDSKD				     ;TGD004

;acj000 begin
;TB.2.1.9.2.T35						;acj000
	;transition T35					;acj000
	;Circ to Feed command				;acj000
	IF (SC_SA_CIRC_TO_FEED_CMD) THEN		;acj000
		GOTO POL12		;CIRCTOFEED	;acj000
;acj000 end

	WAIT 1
	GOTO POL14SS

;===============================================================================
;TB.2.1.9.2		BLOWBACK NORMAL
;===============================================================================
POL15:

	REPORT_TRIG2_FG = 1		;Blowback starts

	SA_STATUS = "BLOWBACK NORMAL"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 15
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADBN			;TB.2.1.9.2.15 ALIGN DEVICES BLOWBACK NORMAL
	GOSUB RELEASEXFERINLETLINE	;ldk025
	GOSUB CLRVARSBB                 ;Clear variables for blowback		 ;tta001

	IF (HOPS_SEL = 2) THEN							;acj017
		IF (SPIREB_HOPS_TOT_PTR:AI_MEAS >= SPIRE_B_HOPS_LB) THEN	;acj017
			HOPS_HOT_FLUSH_CMD_PTR = 1				;acj017

POL15SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB EMPTYFILTER		;TB.2.1.9.2.36 EMPTY FILTER

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T26
	;transition T26
	;Normal Blowback timer greater than Normal Blowback time OR
	;Filter Level Low timer greater than Filter Level Low time
	IF (STEP_TMR > BLOWBACK_NORM_TIME) | (FILTER_LO_LVL:DEV_STAT = S_1) THEN	;LO
		BEGIN								;mw000
		MCMS_BLOWBACK_COUNTER = MCMS_BLOWBACK_COUNTER + 1		;mw000
		GOTO POL17		;VENT
		END								;mw000

	WAIT 1
	GOTO POL15SS

;===============================================================================
;TB.2.1.9.2		BLOWBACK DRAIN
;===============================================================================
POL16:

	REPORT_TRIG2_FG = 1		;Blowback starts

	SA_STATUS = "BLOWBACK DRAIN"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 16

	IF (UNIT_NUMBER = U_FF1 & BAS_POL1_STATE=1) THEN		;dvs002;dvs001
	   BAS_POL1_STATE=0						;dvs002
	IF (UNIT_NUMBER = U_FF2 & BAS_POL2_STATE=1) THEN		;dvs002
	   BAS_POL2_STATE=0						;dvs002
	IF (UNIT_NUMBER = U_FF3 & BAS_POL3_STATE=1) THEN		;dvs002
	   BAS_POL3_STATE=0						;dvs002

;dvs002	IF (UNIT_NUMBER = U_FF2) THEN	
;	   BAS_POL1_STATE=0			;BAS Filter STATE,OFF=0
;	IF (UNIT_NUMBER = U_FF2) THEN	
;	   BAS_POL2_STATE=0
;	IF (UNIT_NUMBER = U_FF3) THEN	
;	   BAS_POL3_STATE=0

	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB RESERVEXFERINLETLINE	;ldk025
	GOSUB SLUICERESERVE  		;ldk030
	GOSUB ADBD			;TB.2.1.9.2.16 ALIGN DEVICES BLOWBACK DRAIN
	GOSUB CLRVARSBB                 ;Clear variables for blowback		 ;tta001

	IF (HOPS_SEL = 2) THEN							;acj017
		IF (SPIREB_HOPS_TOT_PTR:AI_MEAS >= SPIRE_B_HOPS_LB) THEN	;acj017
			HOPS_HOT_FLUSH_CMD_PTR = 1				;acj017

POL16SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS
	GOSUB DRAINFILTER		;TB.2.1.9.2.37 DRAIN FILTER

;JMS006	FAIL_MSG = "SPENT DE PATH CLOSED!"	;ldk030
;JMS006	IF (SDE_INLET_PATH_ALLOF0 < 1) & !SLUICE_LOCALLY_FG THEN	;ldk030
;JMS006		GOTO FAIL			;ldk030

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T27
	;transition T27
	;Blowback to Drain timer greater than Blowback to Drain time OR
	;Filter Level Low timer greater than Filter Level Low time
	IF (STEP_TMR > BLOWBACK_DRAIN_TIME) | (FILTER_LO_LVL:DEV_STAT = S_1) THEN	;LO
		BEGIN								;mw000
		MCMS_BLOWBACK_COUNTER = MCMS_BLOWBACK_COUNTER + 1		;mw000
		GOTO POL17		;VENT
		END
	WAIT 1
	GOTO POL16SS

;===============================================================================
;TB.2.1.9.2		VENT
;===============================================================================
POL17:

	SA_STATUS = "VENT"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 17
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADV			;TB.2.1.9.2.17 ALIGN DEVICES VENT
	GOSUB RELEASEXFERINLETLINE	;ldk025
	GOSUB CLRVARSBB                 ;Clear variables for blowback		 ;tta001

POL17SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T28
	;transition T28
	;Vent step timer greater than Vent time OR Filter Pressure Low
	;timer greater than Filter Pressure Low time
	IF (STEP_TMR > VENT_TIME) | (FILTER_VENT_PRESS:DEV_STAT = S_0) THEN	;VENTED
		BEGIN
		IF PRECOAT_TEST_STARTED_FG THEN ;ZFG226 VCM073
			GOTO POL20 ;MAINTENANCE		
		 ELSE
			BEGIN
			GOSUB SLUICERESERVE  ;VCM021
			GOTO POL18		;SLUICE
			END
		END

	WAIT 1
	GOTO POL17SS

;===============================================================================
;TB.2.1.9.2		SLUICE
;===============================================================================
POL18:

	SA_STATUS = "SLUICE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 18
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB SLUICERESERVE  ;VCM021
	GOSUB ADS			;TB.2.1.9.2.18 ALIGN DEVICES SLUICE
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL18SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS

;JMS006	FAIL_MSG = "SPENT DE PATH CLOSED!" 				;ehb029
;JMS006	IF (SDE_INLET_PATH_ALLOF0 < 1) & !SLUICE_LOCALLY_FG THEN	;ehb029
;JMS006		GOTO FAIL						;ehb029

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		BEGIN
		GOSUB SLUICECHK	   ;VCM020
;VCM022		GOSUB SLUICECYCLE	   ;VCM020
		END

	GOSUB SLUICECYCLE	   ;VCM022
	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T29
	;transition T29
	;Sluice step complete							;VCM020
;VCM022	IF (STEP_TMR > SLUICE_TIME) & (COMPAR(UNIT_SG,"POL1",4,NE)) THEN
;VCM022		GOTO POL19		;RINSE

;VCM022	IF (SLUICE_COMPLETE_FG & (COMPAR(UNIT_SG,"POL1",4,EQ)))THEN	;VCM020
	IF SLUICE_COMPLETE_FG THEN	;VCM022
		BEGIN								;mrp003
		IF DOUBLE_SLUICE_FG THEN ;
			BEGIN
			DOUBLE_SLUICE_FG = 0
			MCMS_SLUICE_CYCLE = MCMS_SLUICE_CYCLE + SLUICE_CYCLE_COUNT		;mw000
			PRINT LOG_ADI, "STARTING SECOND SLUICE"
			SA_2_MESSAGE = "IN SECOND SLUICE"
			SLUICE_COMPLETE_FG = 0
			SLUICE_CYCLE_COUNT = 0
			GOTO POL18		;SLUICE
			END
		ELSE
			BEGIN
			MCMS_SLUICE_CYCLE = MCMS_SLUICE_CYCLE + SLUICE_CYCLE_COUNT		;mw000
			PRINT LOG_ADI, "%p SLUICE CYCLES = %i",BRAND_ID,MCMS_SLUICE_CYCLE	;mw000
			SLUICE_COMPLETE_FG = 0
			SLUICE_CYCLE_COUNT = 0
			GOTO POL19		;RINSE
			END
		END

	WAIT 1
	GOTO POL18SS

;===============================================================================
;TB.2.1.9.2		RINSE
;===============================================================================
POL19:

	SA_STATUS = "RINSE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 19
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB SLUICERESERVE  ;VCM021
	GOSUB ADR2			;TB.2.1.9.2.19 ALIGN DEVICES RINSE
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL19SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.9.2.26 CONTINUOUS CHECKS

;JMS006	FAIL_MSG = "SPENT DE PATH CLOSED!" 				;ehb029
;JMS006	IF (SDE_INLET_PATH_ALLOF0 < 1) & !SLUICE_LOCALLY_FG THEN	;ehb029
;JMS006		GOTO FAIL						;ehb029

;start tta001
; Wait to drain BF Line 
	IF( RINSE_TMR > 15 ) THEN
		BEGIN
		GOSUB STOPBODYFEED
		END
;end tta001

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		GOSUB SLUICECHK	   ;VCM020

	GOSUB RINSEFILTER		;TB.2.1.9.2.39 RINSE FILTER

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T30
	;transition T30
	;Rinse step complete
	IF (TEMP_FG) THEN
		BEGIN
		IF (RUN_MODE = 2) THEN
			CONT_RUN_MODE_FG = 1
		GOTO POL1		;system off
		END

	WAIT 1
	GOTO POL19SS

;===============================================================================
;TB.2.1.9.2		MAINT
;===============================================================================
POL20:

	SA_STATUS = "MAINT"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 20
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADM			;TB.2.1.9.2.20 ALIGN DEVICES MAINT
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL20SS:
	GOSUB BODAGIT			;Bodyfeed tank agitator control	;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------

	IF PRECOAT_TEST_STARTED_FG THEN ;VCM073
		BEGIN
		SA_MESSAGE = "READY TO INSPECT PRECOAT"
		SA_2_MESSAGE = "WHEN FILTER SHELL CLOSED"
		SA_3_MESSAGE = "CONTINUE TO START SLUICE"
		END
	 ELSE
		SA_MESSAGE = "CONTINUE TO GO TO SYSTEM OFF"

;TB.2.1.9.2.T32
	;transition T32
	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		BEGIN
		IF PRECOAT_TEST_STARTED_FG THEN ;VCM073
		   GOTO POL18  ;SLUICE
		  ELSE
			GOTO POL1		;system off
		END

	WAIT 1
	GOTO POL20SS

;===============================================================================
;TB.2.1.9.2		CO2 FAIL
;===============================================================================
POL21:

	SA_STATUS = "CO2 FAIL"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 21
	GOSUB STATEINIT			;TB.2.1.9.2.24 INIT STATE
	GOSUB ADCF			;TB.2.1.9.2.21 ALIGN DEVICES CO2 FAIL
	GOSUB RELEASEXFERINLETLINE	;ldk025

	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
        LAST_LAMP_STATE = RED
POL21SS:
	GOSUB BODAGIT			;Bodyfeed tank agitator control	;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.9.2.T25
	;transition T25
	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		GOTO POL5		;CO2PRESS

	WAIT 1
	GOTO POL21SS

;===============================================================================
;VCM047		FILTER FILL 1 DILUENT
;===============================================================================
POL22:

	SA_STATUS = "FILTER FILL 1 DILUENT"
	SA_STATUS_PTR = SA_STATUS		;jh024
	SA_STATE = 22
	GOSUB STATEINIT			;TB.2.1.3.2.24 INIT STATE
	GOSUB ADFF1D  		; ALIGN DEVICES FILTER FILL 1 DILUENT
	GOSUB RELEASEXFERINLETLINE	;ldk025

POL22SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.3.2.26 CONTINUOUS CHECKS
   GOSUB BODYFEEDINIT  ;VCM085

	IF (TIMER1_TMR > FILL_1_FEED_TIME) THEN
		BEGIN
		FAIL_MSG = "MED LEVEL NOT REACHED"
		GOTO FAIL
		END

	;----------------------------------
	;	transition conditions
	;----------------------------------

		IF (DUAL_PRECOAT_SELECTION_FG = 1) THEN
			BEGIN
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= (FILL1_BBLS + DUAL_PC_ADJ_BBLS1)) THEN		;rma057
				BEGIN
				GOSUB C06XV31
            GOSUB C06XV363       ;JMS007
				DILUENT_IN_FILTER_FG = 1
				GOTO POL9		;PRECOATXFER
				END
			END
		 ELSE
			BEGIN
			IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS) THEN
				BEGIN
				GOSUB C06XV31
            GOSUB C06XV363       ;JMS007
				DILUENT_IN_FILTER_FG = 1
				GOTO POL9		;PRECOATXFER
				END
			END


	;Medium Filter Level timer greater than Medium Filter Level time
	IF (FILTER_MED_LVL:DEV_STAT = S_0) | (FIL_FLOW_TOT:AI_MEAS >= FILL1_BBLS) THEN
		BEGIN
	   GOSUB C06XV31
      GOSUB C06XV363       ;JMS007
		DILUENT_IN_FILTER_FG = 1
		GOTO POL9		;PRECOATXFER
		END

	WAIT 1
	GOTO POL22SS

;===============================================================================
;TB.2.1.9.2		HOLD
;===============================================================================
HOLDSUB:

	; seq status will be by POL1 programs staying in the POL1 unit
	; seq status ptr will be used by programs split out of the POL1 unit
	SEQ_STATUS = "HOLD"
	SEQ_STATUS_PTR = SEQ_STATUS		;jh024
	LAST_SA_STATUS = SA_STATUS_PTR		;mw000

	STACKCLR

	MCMS_STATUS_PTR = 3		;mw000
	MCMS_DOWNTIME_INT = 2		;ldk033

	TIMEROFF IBAD_TMR
	TIMERCLR IBAD_TMR
	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
        LAST_LAMP_STATE = RED
	PRINT LOG_ADI, "IN HOLD STATE"

	GOSUB ADH			;TB.2.1.9.2.22 ALIGN DEVICES HOLD

		GOSUB SLUICERELEASE  ;VCM021
	GOSUB RELEASEXFERINLETLINE	;ldk025

;jh024	IF (CHLOR_IN_PROGRESS) THEN			;acj012
	IF (POL_CHLOR_IN_PROGRESS_PTR) THEN		;acj012		;jh024
		BEGIN					;acj012
		SA_MESSAGE = "CHLORINATION IN PROGRESS"	;acj012
		PRINT LOG_ADI, "%p",SA_MESSAGE		;acj012
		LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;acj012
;jh024		WAITUNTIL (!CHLOR_IN_PROGRESS)		;acj012
		WAITUNTIL (!POL_CHLOR_IN_PROGRESS_PTR)	;acj012		;jh024
		GOTO POL1		;system off	;acj012
		END					;acj012
HLOOP:

	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	IF (SA_STATE >= 11) & (SA_STATE <= 14) & (FILTER_MODE != 2) THEN
		GOSUB CONTCHK		;TB.2.1.9.2.26 CONTINUOUS CHECKS
	ELSE								;acj005
		GOSUB BODAGIT		;Bodyfeed tank agitator control	;acj005

	IF (SC_SA_ATNS_CMD) THEN
		GOSUB CALCNEWSTATE	;TB.2.1.9.2.42 CALC NEW STATE

	;----------------------------------
	;	transition conditions
	;----------------------------------

	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		BEGIN
		DEV_FAILED_FG = 0
;mw000 begin
		IF COMPAR(SA_STATUS_PTR, LAST_SA_STATUS, STRLEN(SA_STATUS_PTR),NE) THEN
			BEGIN
			IF COMPAR(SA_STATUS_PTR,"SYSTEM OFF",10,EQ) THEN
				MCMS_ABORTED_FG = 1
			END
;mw000 end
		GOTO MAIN
		END

	WAIT 1
	GOTO HLOOP

;===============================================================================
;TB.2.1.9.2		FAIL
;===============================================================================
FAIL:
	; seq status will be by POL1 programs staying in the POL1 unit
	; seq status ptr will be used by programs split out of the POL1 unit
	SEQ_STATUS = "FAIL"
	SEQ_STATUS_PTR = SEQ_STATUS		;jh024

	STACKCLR
	
	MCMS_STATUS_PTR = 2		;mw000
	MCMS_DOWNTIME_INT = 2		;ldk033

	IF (!REC_DEV_CNTL) THEN			;If not recovery device control
                BEGIN
		LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
                LAST_LAMP_STATE = RED
                END
	PRINT LOG_ADI, "IN FAIL STATE"
	SA_MESSAGE = FAIL_MSG
	PRINT LOG_ADI, "%p",FAIL_MSG

	IF (DEV_IN_MANUAL_FG) THEN
		DEV_IN_MANUAL_FG = 0
	ELSE
		GOSUB ADF		;TB.2.1.9.2.23 ALIGN DEVICES FAIL

		GOSUB SLUICERELEASE  ;VCM021
	GOSUB RELEASEXFERINLETLINE	;ldk025

FLOOP:
	GOSUB BODAGIT		;Bodyfeed tank agitator control	;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------

	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		BEGIN
		DEV_FAILED_FG = 0
		GOTO MAIN
		END

;VCM075  start
     IF (SA_STATE = 15) THEN  ;BLOW BACK NORMAL AND FEED TANK HIGH LEVEL 
		BEGIN
		IF (FIL_FEED_TNK_LVL:AI_MEAS >= 75)|(FIL_FEED_TNK_HI_LVL:DEV_STAT = S_1) THEN    ;VCM036
                BEGIN
                SA_2_MESSAGE = "ENTER C TO CONTINUE"
                SA_3_MESSAGE = "BLOWBACK NORMAL AS" 
                SA_4_MESSAGE = "BLOWBACK TO DRAIN"  
                IF COMPAR(OPER_RESPONSE,"C",1,EQ) THEN
                  BEGIN
                  OPER_RESPONSE = ""
                  SA_STATE = 16 ;blowback to drain
						DEV_FAILED_FG = 0
                  GOTO MAIN
                  END
                END
		END
;VCM075 END

	WAIT 1
	GOTO FLOOP

;*******************************************************************************
;*******************************************************************************
;		S U B R O U T I N E S
;*******************************************************************************
;*******************************************************************************

;==============================================================================
;TB.2.1.9.2.1		ALIGN DEVICES SYSTEM OFF
;==============================================================================

ADSO:

;UNLOCK SWING_SEL
	IF (UNIT_NUMBER = U_FF1) THEN
		BEGIN								;acj011
		IF (SWING_SEL:DEV_STAT = S_3) & (LHX_SEL:DEV_STAT = S_3) THEN	;acj011
			LHX_SEL:DEV_STAT = S_0					;acj011
		IF (SWING_SEL:DEV_STAT = S_4) & (LHX_SEL:DEV_STAT = S_4) THEN	;acj011
			LHX_SEL:DEV_STAT = S_0					;acj011
		SWING_SEL:DEV_TMP0 = AND(SWING_SEL:DEV_TMP0, NOT(T_10))
		END								;acj011

;acj000 begin
	BLOWBACK_SEL = 0				;acj000
	FILTER_MODE = 0					;acj000
	FILTER_RUN_SEL = 0				;acj000
	FLUSH_COUNTER = 0				;acj004
;acj000 end
	INITIAL_DP			=	9999   ;POL1 initial DP after build  ;VCM071 
	INITIAL_DO			=	9999   ;POL1 initial DO after build  ;VCM071 
	INITIAL_TURB		=	9999   ;POL1 initial turbidity after build  ;VCM071 

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter	;acj004
	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter	;tta001

	PUTMANL '8606FC32'		;tta001
	PUTOUT '8606FC32',100		;tta001

	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED              ;stop bodyfeed	;tta001

	TIMEROFF CYCLE_TMR					;acj005
	PRINT LOG_ADI, "POLISH FILTER CYCLE TIME = %i MINUTES",CYCLE_TMR	;acj005
	TIMERCLR CYCLE_TMR					;acj005
	TIMERCLR FIL_OS_TMR;VCM018
	TIMERCLR FIL_RECIRC_TMR;VCM018

	IF (BLOWBACK_DRAIN_INUSE_POLCOM = SLUICE_BIT) THEN	;acj014
		BLOWBACK_DRAIN_INUSE_POLCOM = 0			;acj014

;acj008	IF (SLUICE_INUSE = SLUICE_BIT) THEN
;acj008		SLUICE_INUSE = 0
;acj014	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj008
;acj014		SLUICE_INUSE_POLCOM = 0			;acj008
;VCM001	IF (SLUICE_INUSE_PTR = SLUICE_BIT) THEN		;acj014
;VCM001		SLUICE_INUSE_PTR = 0			;acj014

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.2		ALIGN DEVICES CO2 PURGE
;==============================================================================

ADCP:
	CONT_RUN_MODE_FG = 0
	TIMERON CYCLE_TMR					;acj005

;LOCK SWING_SEL
	IF (UNIT_NUMBER = U_FF1) THEN
		BEGIN								;acj011
		IF (SWING_SEL:DEV_STAT = S_3) THEN				;acj011
			BEGIN								;acj011
			IF (LHX_SEL:DEV_STAT = S_3) | (LHX_SEL:DEV_STAT = S_0) THEN	;acj011
				LHX_SEL:DEV_STAT = S_3				;acj011
			ELSE							;acj011
				BEGIN						;acj011
				FAIL_MSG = "LHX NOT AVAILABLE"			;acj011
				GOTO FAIL					;acj011
				END						;acj011
			END							;acj011
		IF (SWING_SEL:DEV_STAT = S_4) THEN				;acj011
			BEGIN							;acj011
			IF (LHX_SEL:DEV_STAT = S_4) | (LHX_SEL:DEV_STAT = S_0) THEN	;acj011
				LHX_SEL:DEV_STAT = S_4				;acj011
			ELSE							;acj011
				BEGIN						;acj011
				FAIL_MSG = "LHX NOT AVAILABLE"			;acj011
				GOTO FAIL					;acj011
				END						;acj011
			END							;acj011
		SWING_SEL:DEV_TMP0 = OR(SWING_SEL:DEV_TMP0, T_10)
		END								;acj011

	IF (UNIT_NUMBER = U_FF1) THEN						;acj010
		BEGIN								;acj010
		IF (SWING_SEL:DEV_STAT = S_0) THEN		;Polish		;acj010
			BEGIN							;acj010
;TGD003			ASSIGN PRECOAT_REQ_PTR = PRECOAT_FF1_REQ_POLCOM		;acj010
;TGD003			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_FF1_FAIL_POLCOM	;acj010
			ASSIGN PRECOAT_REQ_PTR = PRECOAT_FF1_REQ_ALLOF8		;TGD003
			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_FF1_FAIL_ALLOF8	;TGD003
			ASSIGN PRECOAT_TRANSFER_TYPE_PTR = POL1_POLPCT_XFER_TYPE_ALLOF8	;tta001
			END							;acj010
		ELSE						;Primary	;acj010
			BEGIN							;acj010
			ASSIGN PRECOAT_REQ_PTR = PRECOAT_PRIM3_REQ_PRIMCM	;acj010
			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_PRIM3_FAIL_PRIMCM	;acj010
			ASSIGN PRECOAT_TRANSFER_TYPE_PTR = PRECOAT_PRIM3_XFER_TYPE_ALLOF8	;tta001
			END							;acj010
		END								;acj010

;	IF (FILTER_MODE = 0) THEN		;auto TGD002
;		BEGIN
;		IF (PRECOAT_REQ_PTR = 0) THEN
;JFH000			BEGIN
;			PRECOAT_REQ_PTR = 1	;Precoat makeup request
;			SA_5_MESSAGE = "FILTER REQUESTING PRECOAT"
;			PRINT LOG_ADI, "%p REQUESTING PRECOAT",UNIT_SG
;                        END
;		END

;acj002 begin
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10180'			;acj002
;acjxyz		TURNON 'N10204'			;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10181'			;acj002
;acjxyz		TURNON 'N10205'			;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE					;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10182'			;acj002
;acjxyz		TURNON 'N10206'			;acj002
;acjxyz		END				;acj002
;acj002 end

	PUTMANL FIL_FLOW_TOTD		;Zero the filter flow totalizer	;acj004
	PUTAUTO FIL_FLOW_TOTD						;acj004

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED 		;tta001

	TIMERON CO2_PURGE_TMR

	IF (UNIT_NUMBER = U_FF1) THEN						;acj011
		IF (LHX_SEL:DEV_STAT = S_4) | (LHX_SEL:DEV_STAT = S_3) THEN	;acj011
			SA_MESSAGE = "REMEMBER TO START LHX"			;acj011

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.3		ALIGN DEVICES DILUENT PURGE
;==============================================================================

ADDP:
	CONT_RUN_MODE_FG = 0
	TIMERON CYCLE_TMR					;acj005

;LOCK SWING_SEL
	IF (UNIT_NUMBER = U_FF1) THEN
		BEGIN								;acj011
		IF (SWING_SEL:DEV_STAT = S_3) THEN				;acj011
			BEGIN								;acj011
			IF (LHX_SEL:DEV_STAT = S_3) | (LHX_SEL:DEV_STAT = S_0) THEN	;acj011
				LHX_SEL:DEV_STAT = S_3				;acj011
			ELSE							;acj011
				BEGIN						;acj011
				FAIL_MSG = "LHX NOT AVAILABLE"			;acj011
				GOTO FAIL					;acj011
				END						;acj011
			END							;acj011
		IF (SWING_SEL:DEV_STAT = S_4) THEN				;acj011
			BEGIN							;acj011
			IF (LHX_SEL:DEV_STAT = S_4) | (LHX_SEL:DEV_STAT = S_0) THEN	;acj011
				LHX_SEL:DEV_STAT = S_4				;acj011
			ELSE							;acj011
				BEGIN						;acj011
				FAIL_MSG = "LHX NOT AVAILABLE"			;acj011
				GOTO FAIL					;acj011
				END						;acj011
			END							;acj011
		SWING_SEL:DEV_TMP0 = OR(SWING_SEL:DEV_TMP0, T_10)
		END								;acj011

	IF (UNIT_NUMBER = U_FF1) THEN						;acj010
		BEGIN								;acj010
		IF (SWING_SEL:DEV_STAT = S_0) THEN		;Polish		;acj010
			BEGIN							;acj010
;TGD003			ASSIGN PRECOAT_REQ_PTR = PRECOAT_FF1_REQ_POLCOM		;acj010
;TGD003			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_FF1_FAIL_POLCOM	;acj010
			ASSIGN PRECOAT_REQ_PTR = PRECOAT_FF1_REQ_ALLOF8		;TGD003
			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_FF1_FAIL_ALLOF8	;TGD003
			END							;acj010
		ELSE						;Primary	;acj010
			BEGIN							;acj010
			ASSIGN PRECOAT_REQ_PTR = PRECOAT_PRIM3_REQ_PRIMCM	;acj010
			ASSIGN PRECOAT_FAIL_PTR = PRECOAT_PRIM3_FAIL_PRIMCM	;acj010
			END							;acj010
		END								;acj010

;	IF (FILTER_MODE = 0) THEN		;auto     TGD002
;		BEGIN
;		IF (PRECOAT_REQ_PTR = 0) THEN
;			BEGIN
;JFH000			PRECOAT_REQ_PTR = 1	;Precoat makeup request
;			SA_5_MESSAGE = "FILTER REQUESTING PRECOAT"
;			PRINT LOG_ADI, "%p REQUESTING PRECOAT",UNIT_SG
;                        END
;		END

;acj002 begin
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10180'			;acj002
;acjxyz		TURNON 'N10204'			;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10181'			;acj002
;acjxyz		TURNON 'N10205'			;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE					;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10182'			;acj002
;acjxyz		TURNON 'N10206'			;acj002
;acjxyz		END				;acj002
;acj002 end

	PUTMANL FIL_FLOW_TOTD		;Zero the filter flow totalizer	;acj004
	PUTAUTO FIL_FLOW_TOTD						;acj004

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	IF (UNIT_NUMBER = U_FF1) THEN						;acj011
		IF (LHX_SEL:DEV_STAT = S_4) | (LHX_SEL:DEV_STAT = S_3) THEN	;acj011
			SA_MESSAGE = "REMEMBER TO START LHX"			;acj011

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB STOPBODYFEED              ;stop bodyfeed		;tta001

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN
;==============================================================================
;			FAIL FOR NO RESET
;==============================================================================
;RSTFQDFAIL:
;	FAIL_MSG = "8606FQ22D RESET FAIL"
;        GOTO FAIL
RSTFQBFAIL:
	FAIL_MSG = "8606FQXXB RESET FAIL"
        GOTO FAIL

;==============================================================================
;TB.2.1.9.2.4		ALIGN DEVICES DRAIN DILUENT
;==============================================================================

ADDD:
	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED              ;stop bodyfeed	;tta001

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.5		ALIGN DEVICES CO2 PRESS
;==============================================================================

ADCP2:
	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED 		;tta001

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.6		ALIGN DEVICES CO2 PRESS TEST
;==============================================================================

ADCPT:
	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	PUTMANL FIL_FLOW_TOT ;VCM014		;Zero the filter flow totalizer
 	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:2,NOT(BIT_AM))COUNT 5,RSTFQBFAIL
	PUTAUTO FIL_FLOW_TOT
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:2,BIT_AM)COUNT 5,RSTFQBFAIL

	GOSUB MCMSSTOPAVG		;mw000

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED 		;tta001

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

;tta001 begin
	PUTMANL BODY_FEED_TOT 						;Zero the BF Flow totalizer
 	WAITUNTIL AND(BODY_FEED_TOT:CB_FLG:2,NOT(BIT_AM))COUNT 5,RSTFQBFAIL
	PUTAUTO BODY_FEED_TOT
	WAITUNTIL AND(BODY_FEED_TOT:CB_FLG:2,BIT_AM)COUNT 5,RSTFQBFAIL

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter 
;tta001 end
	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.7		ALIGN DEVICES FILTER FILL 1 TRANSFER
;==============================================================================

ADFF1T:
	TEST_FAIL_FG = 0

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	PUTAUTO FIL_FLOW_TOT    ;VCM014
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL
	FIL_FLOW_TOT:IOS_TG:1 = 1	;Enable the flow counter

	GOSUB MCMSSTOPAVG		;mw000

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;VCM059	IF (BODYFEED_SEL = 1) THEN
;VCM059		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
;VCM059	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.8		ALIGN DEVICES FILTER FILL 1 FEED
;==============================================================================

ADFF1F:
	TEST_FAIL_FG = 0

	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_0) THEN		;OFF
		BEGIN
		FAIL_MSG = "FEED TANK LVL MODE OFF"
		GOTO FAIL
		END
;ldk028	IF (FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_LVL_FILL_1) THEN
	IF (FIL_FEED_TNK_LVL:AI_MEAS < FIL_FEED_TNK_LVL_FILL_1) THEN	;ldk028
		BEGIN
		FAIL_MSG = "FEED TANK LVL TOO LO"
		GOTO FAIL
		END
;jh024	IF (COMPAR(FEED_TNK_BRAND,BRAND_ID,BRAND_LENGTH,NE)) THEN
	IF (COMPAR(POL_FEED_TNK_BRAND_PTR,POL_BRAND_ID_PTR,BRAND_LENGTH,NE)) THEN		;jh024
		BEGIN
		FAIL_MSG = "FEED TANK BRAND MISMATCH"
		GOTO FAIL
		END

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	PUTAUTO FIL_FLOW_TOT    ;VCM014
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL
	FIL_FLOW_TOT:IOS_TG:1 = 1	;Enable the flow counter
	GOSUB MCMSSTOPAVG		;mw000

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;jaz000	IF (BODYFEED_SEL = 1) THEN
;VCM059	IF (BODYFEED_SEL = 1) & (PRECOAT_TRANSFER_TYPE_PTR != 1) THEN	;do not run in the first step of dual precoat - jaz000
;VCM059		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
;VCM059	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005

	TIMERON TIMER1_TMR

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;VCM047		ALIGN DEVICES FILTER FILL 1 DILUENT
;==============================================================================
ADFF1D:
	TEST_FAIL_FG = 0
																									;VCM073
	IF (COMPAR(POL_FEED_TNK_BRAND_PTR,POL_BRAND_ID_PTR,BRAND_LENGTH,NE))&(PRECOAT_TEST_FG = 0) THEN		;jh024
		BEGIN
		FAIL_MSG = "FEED TANK BRAND MISMATCH"
		GOTO FAIL
		END

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX		;TB.2.1.3.2.62 Check cip proximity switches

	PUTAUTO FIL_FLOW_TOT    ;VCM014
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL
	FIL_FLOW_TOT:IOS_TG:1 = 1	;Enable the flow counter

	GOSUB RUNCMDDEV			;TB.2.1.3.2.40 RUN COMMAND DEVICES

;VCM059	IF (BODYFEED_SEL = 1) THEN
;VCM059		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
;VCM059	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005

	TIMERON TIMER1_TMR

;	IF (FILTER_MODE = 1) THEN		;manual
;		BEGIN
;		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
;		WAITUNTIL 0
;		END


	GOSUB SSEQAUTO			;TB.2.1.3.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.9		ALIGN DEVICES PRECOAT TRANSFER
;==============================================================================

ADPT:
	;The timing associated with the following control actions is very
	; critical.  All valves should be commanded before checking the status
	; of any valves.


        FIL_FLOW_TOT:IOS_TG:1 = 0       ;VCM014
	PUTMANL FIL_FLOW_TOT		;Zero the filter flow totalizer
 	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,NOT(BIT_AM))COUNT 5,RSTFQBFAIL
	PUTAUTO FIL_FLOW_TOT
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL


	SECOND_PASS = 0		;Check device statuses on 2nd pass	;acj003

	GOSUB CIPPROX			;Check cip proximity switches	;acj003

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES	;acj003

	GOSUB STOPBODYFEED 		;tta001

	IF (FILTER_MODE = 0) THEN		;auto
		BEGIN
		PRECOAT_FAIL_PTR = 0		;clear precoat fail
		IF (PRECOAT_REQ_PTR < 4) THEN	;Precoat transfer initiated
			BEGIN
;acj003			GOSUB STOPBODYFEED
;acj003			GOSUB C6XV310			;CLOSE BEER_FILL_VLV
;acj003			GOSUB C6XV311			;CLOSE BACK_PRESS_VLV
;acj003			PUTMANL FIL_FLOW_CNTL_VLV
;acj003			PUTOUT FIL_FLOW_CNTL_VLV, 0	;0% OPEN
;acj003			GOSUB C6XV317			;CLOSE BEER_FEED_VLV
;tta001 start
WPCM:
			IF ((PRECOAT_TRANSFER_TYPE_PTR = 1) & (PRIBF_LEVEL:AI_MEAS <= PC_BF_MIN_XFR_LVL)) THEN
				BEGIN
				SA_TMP_INT = FLTCNV(SA_TMP_SG, PC_BF_MIN_XFR_LVL, 5, 0) 
				SA_TMP_INT = APPEND(SA_MESSAGE,"WAITING FOR PRIM BF LEVEL > ", SA_TMP_SG)
				LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
				WAITUNTIL (PRIBF_LEVEL:AI_MEAS > PC_BF_MIN_XFR_LVL)
				END
;tta001 end
			SA_MESSAGE = "WAITING FOR PRECOAT MAKEUP"
			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
;acj002			WAITUNTIL (PRECOAT_REQ_PTR >= 2)	;Precoat makeup done
			WAITUNTIL (PRECOAT_REQ_PTR >= 2)	;Precoat makeup done	;acjxyz
			IF (PRECOAT_REQ_PTR < 3) THEN
				PRECOAT_REQ_PTR = 3		;Precoat transfer request
			SA_MESSAGE = "WAITING FOR PRECOAT TRANSFER"
;acj002			WAITUNTIL (PRECOAT_REQ_PTR >= 4)	;Precoat transfer initiated
;tta001			WAITUNTIL (PRECOAT_REQ_PTR >= 4)	;Precoat transfer initiated	;acjxyz
			WAITUNTIL ((PRECOAT_REQ_PTR >= 4) | (PRECOAT_REQ_PTR = 2))	;Precoat transfer initiated	;tta001
			IF(PRECOAT_REQ_PTR = 2) THEN			;tta001
				GOTO WPCM				;tta001
			SA_MESSAGE = " "
			SA_5_MESSAGE = " "
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN
			END
		END

		GOSUB O6XV323	;tta001

;acj002 begin
;acjxyz	LAMP LAMP_ADI, LAMP_NUMBER, YELLOW		;acj002
;acjxyz	SA_MESSAGE = "WAITING FOR PRECOAT TRANSFER"	;acj002
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10183'			;acj002
;acjxyz		WAITUNTIL ('N00136':DIN_VAL)	;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10184'			;acj002
;acjxyz		WAITUNTIL ('N00137':DIN_VAL)	;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE					;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNON 'N10185'			;acj002
;acjxyz		WAITUNTIL ('N00138':DIN_VAL)	;acj002
;acjxyz		END				;acj002
;acjxyz	LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;acj002
;acjxyz	SA_MESSAGE = " "			;acj002
;acj002 end

	;The timing associated with the following control actions is very
	; critical.  All valves should be commanded before checking the status
	; of any valves.

;acj003	SECOND_PASS = 0		;Check device statuses on 2nd pass

;acj003	GOSUB CIPPROX			;Check cip proximity switches

;acj003	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;acj005	IF (BODYFEED_SEL = 1) THEN
;acj005		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.10		ALIGN DEVICES FILTER FILL 2
;==============================================================================

ADFF2:
	IF (FILTER_MODE = 0) THEN		;auto
		PRECOAT_FAIL_PTR = 0		;clear precoat fail

	PUTMANL FIL_FLOW_TOT		;Zero the filter flow totalizer
 	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,NOT(BIT_AM))COUNT 5,RSTFQBFAIL
	PUTAUTO FIL_FLOW_TOT
	WAITUNTIL AND(FIL_FLOW_TOT:CB_FLG:1,BIT_AM)COUNT 5,RSTFQBFAIL
   FIL_FLOW_TOT:IOS_TG:1 = 1       ;VCMGGG

	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED		;tta001

	TIMERON FILL_2_TMR

;acj005	IF (BODYFEED_SEL = 1) THEN
;acj005		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.11		ALIGN DEVICES PRECOAT CIRC
;==============================================================================

ADPC:
	PRECOAT_REQ_PTR = 0			;Precoat fill done

;acj002 begin
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNOFF 'N10180'		;acj002
;acjxyz		TURNOFF 'N10204'		;acj002
;acjxyz		TURNOFF 'N10183'		;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNOFF 'N10181'		;acj002
;acjxyz		TURNOFF 'N10205'		;acj002
;acjxyz		TURNOFF 'N10184'		;acj002
;acjxyz		END				;acj002
;acjxyz	ELSE					;acj002
;acjxyz		BEGIN				;acj002
;acjxyz		TURNOFF 'N10182'		;acj002
;acjxyz		TURNOFF 'N10206'		;acj002
;acjxyz		TURNOFF 'N10185'		;acj002
;acjxyz		END				;acj002
;acj002 end

	;All valves will be opened or closed before checks are made to verify
	; valve statuses.  This is to prevent shocks to the system that would
	; ruin the filter DE layer which would necessitate rebuilding of the DE
	; layer.

	SECOND_PASS = 0		;Check device statuses on 2nd pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;tta001	IF (BODYFEED_SEL = 1) THEN
;tta001		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
;tta001	ELSE					;acj005
	GOSUB STOPBODYFEED		;acj005
;VCM086;VCM076 START  if not dual precoat deselect bodyfeed for J2 and XX
;VCM086  IF ((COMPAR(BRAND_ID,"J24",3,EQ))|(COMPAR(BRAND_ID,"XX4",3,EQ)))&(DUAL_PRECOAT_SELECTION_FG = 0) THEN 
;VCM086      BEGIN
;VCM086      BODYFEED_SEL = 0
;VCM086      PRINT LOG_ADI, "BODYFEED OFF FOR XX4-J24"
;      GOSUB BODFEEDLINEFLUSHCHK
;VCM086		END

 IF (DUAL_PRECOAT_SELECTION_FG = 1) THEN 
      BODYFEED_SEL = 1
 ;VCM076 END

	TIMERON PRECOAT_CIRC_TMR

	RAMP_DOWN_FG = 1

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.12		ALIGN DEVICES CIRC TO FEED
;==============================================================================

ADCTF:
;VCM060	BODYFEED_FLUSH_DONE_FG = 0			;acj000

;VCM087	IF (RAMP_DOWN_FG) THEN
;VCM087		BEGIN		
		IF DUAL_PRECOAT_SELECTION_FG THEN  ;VCM084
			BEGIN
			CIRC_TO_FEED_TIME = CIRC_TO_FEED_TIME_DP
			BODYFEED_VFD_CONTROL_PTR:CB_OTLO:1 = 15   ;VCM083
			BODYFEED_VFD_CONTROL_PTR:CB_OTHI:1 = 100	;VCM083
			BODYFEED_MODE = 1 ;auto VCM083
			BF_CNTRL_DELAY_TIME		= 15	;ZIN260	;POL1		;VCM077 ;VCM083
			BODYFEED_VFD_CNTRL_OUT_INIT = 90.0 ; 8/19/20 was 35.0	;ZFL907	;% out			         	;VCM077
			BODYFEED_VFD_CNTRL_OUT_MIN	= 15.0	;ZFL908	;minimum stroke output allowed		;VCM077
			BODYFEED_VFD_CNTRL_OUT_MAX	= 90.0 ; 8/19/20 was 35.0	;ZFL909	;maximum stroke output allowed		;VCM077
			BF_VFD_DELTA_CHANGE_FLT1 	= -5.0	;ZFL924  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT2 	= -3.0	;ZFL925  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT3 	= -1.0	;ZFL926  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT4 	= 1.0	;ZFL927  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT5 	= 3.0	;ZFL928  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT6 	= 6.0	;ZFL929  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT7 	= 10.0	;ZFL930  ;POL1   /* ;VCM077 */
			BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CNTRL_OUT_INIT
			GOSUB STARTBODYFEED	;START BODYFEED VCM057
			FIL_FLOW_OS = 500  ;VCM062
			END
		ELSE
			BEGIN
			BF_CNTRL_DELAY_TIME		= 15	;ZIN260	;POL1		;VCM077
			BODYFEED_VFD_CNTRL_OUT_INIT = 30.0 ; 8/19/20 was 35.0	;ZFL907	;% out			         	;VCM077
			BODYFEED_VFD_CNTRL_OUT_MIN	= 15.0	;ZFL908	;minimum stroke output allowed		;VCM077
			BODYFEED_VFD_CNTRL_OUT_MAX	= 30.0 ; 8/19/20 was 35.0	;ZFL909	;maximum stroke output allowed		;VCM077
			BF_VFD_DELTA_CHANGE_FLT1 	= -2.0	;ZFL924  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT2 	= 0.0	;ZFL925  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT3 	= 1.0	;ZFL926  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT4 	= 2.0	;ZFL927  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT5 	= 3.0	;ZFL928  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT6 	= 4.0	;ZFL929  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT7 	= 5.0	;ZFL930  ;POL1   /* ;VCM077 */
			END

	IF (RAMP_DOWN_FG) THEN			;VCM087
		BEGIN		
		TIMERON TIMER1_TMR						;tta001 - need to start timer before rampdown is complete
		FIL_FEED_FLOW:PID_SPRT:1 = FEED_FLOW_SETPT_RAMP_VALUE		; setpoint ramp rate set for start of filter ;tta001
		PUTAUTO FIL_FLOW_CNTL_VLV
;SETPOINT FIL_FLOW_CNTL_VLV = FIL_FLOW_RAMP_DOWN
;acj005		FIL_FLOW_CNTL_VLV:PID_SPVL:1 = FIL_FLOW_RAMP_DOWN
RAMPDOWN:
		FIL_FLOW_CNTL_VLV:PID_SPVL:1 = FIL_FLOW_OS	;acj005
;tta001		IF (FIL_FEED_FLOW:AI_MEAS > (FIL_FLOW_OS + 25)) THEN
		SA_TMP_FLT = (FIL_FEED_FLOW:PID_SPVL:1 - FIL_FEED_FLOW:AI_MEAS)			;tta001 
		IF (ABS(SA_TMP_FLT) > RAMP_DOWN_FLOW_DEADBAND) THEN				;tta001
			BEGIN
			SA_MESSAGE = "RAMPING DOWN FLOW"
			GOSUB CONTCHK
			IF DUAL_PRECOAT_SELECTION_FG THEN
				GOSUB BODYFEEDVFDCNTL  ;VCM057
			GOTO RAMPDOWN
			END
;VCMJJJ		WAIT 60
		FIL_FEED_FLOW:PID_SPRT:1 = FEED_FLOW_SETPT_RAMP_ONSTRM			;Restore setpoint ramp rate after getting to Setpoint ;tta001
		SA_MESSAGE = " "
		END

	;All valves will be opened or closed before checks are made to verify
	; valve statuses.  This is to prevent shocks to the system that would
	; ruin the filter DE layer which would necessitate rebuilding of the DE
	; layer.

	SECOND_PASS = 0		;Check device statuses on 2nd pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	TIMERON TIMER1_TMR
;JMS002 START
;  IF (COMPAR(BRAND_ID,"J24",3,EQ))|(COMPAR(BRAND_ID,"XX4",3,EQ)) THEN 
;      BEGIN
;      BODYFEED_SEL = 0
;      GOSUB BODFEEDLINEFLUSHCHK
;      PRINT LOG_ADI, "BOODYFEED OFF FOR XX4-J24"
;		END
;JMS002 END
;tta001	IF (BODYFEED_SEL = 1) THEN
;tta001		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
;tta001	ELSE					;acj005
		IF (DUAL_PRECOAT_SELECTION_FG = 0) THEN  ;VCM057
			GOSUB STOPBODYFEED		;acj005

	TIMERON BF_FLUSH_TIMER		;tta001

;FIL_FEED_FLOW DEV ALARM LIMIT = FIL_FEED_FLOW_DEV_LIM
	FIL_FEED_FLOW:AI_DVLIM = FIL_FEED_FLOW_DEV_LIM

	LHX_TNK_LVL_MAX = XFER_TNK_LVL_MAX_OS			;acj000
	XFER_TNK_LVL_MAX = XFER_TNK_LVL_MAX_OS			;acj000
	FIL_FEED_TNK_MIN_LVL = FIL_FEED_TNK_MIN_LVL_OS		;acj000

	DIFF_PRESS_LIM = DIFF_PRESS_HI_LIM	;acj006

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.13		ALIGN DEVICES ON STREAM
;==============================================================================

ADOS:

;VCM054      BODYFEED_FLUSH_DONE_FG = 0                                        ;JMS002
;  IF (COMPAR(BRAND_ID,"J24",3,EQ))|(COMPAR(BRAND_ID,"XX4",3,EQ)) THEN    ;JMS002
;	   BODYFEED_FLUSH_DONE_FG = 1                                         ;JMS002
;		ELSE                                                               ;JMS002
;	   BODYFEED_FLUSH_DONE_FG = 0                                         ;JMS002

	;All valves will be opened or closed before checks are made to verify
	; valve statuses.  This is to prevent shocks to the system that would
	; ruin the filter DE layer which would necessitate rebuilding of the DE
	; layer.

	FIL_FLOW_TOT:IOS_TG:1 = 0
	FIL_FLOW_TOTD:CAL_VCVL:1 = FIL_FLOW_TOTD:CB_OTVL:1
	PUTMANL FIL_FLOW_TOT		;Zero the filter flow totalizer
	PUTAUTO FIL_FLOW_TOT
	FIL_FLOW_TOT:IOS_TG:1 = 1	;Enable the flow counter 8606fe32
	GOSUB MCMSSTARTAVG		;mw000

	SECOND_PASS = 0		;Check device statuses on 2nd pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB O6XV318			;acj004

	IF (INITIAL_DP	= 9999) THEN   ;POL1 initial DP after build  ;VCM071 
		BEGIN
		GOSUB GETTIMEANDDATE			  			;VCM071
	   TEMP_INT = APPEND(PRODUCTION_START_TIME, CURRENT_DATE," ",CURRENT_TIME)
		INITIAL_DP = FIL_DIFF_PRESS:AI_MEAS
		END

	IF (INITIAL_TURB	= 9999) THEN   ;POL1 initial TURBIDITY after build  ;VCM071 
		INITIAL_TURB = BEER_TURBIDITY:AI_MEAS

	BDYFD_MED_PCT	= POL_BF_TANK_MU_MED_PTR	;ZIN800  ZPT319 ;POL1 bodyfeed makeup medium pct  ;VCM071 
	BDYFD_CRS_PCT	= POL_BF_TANK_MU_CRS_PTR	;ZIN801  ZPT320 ;POL1 bodyfeed makeup coarse pct  ;VCM071 

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES


	IF (BODYFEED_SEL = 1) THEN
		GOSUB STARTBODYFEED	;TB.2.1.9.2.46 START BODYFEED
	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005


;rma050	IF (PGMSTAT("POLRECSA") = NOT_RUNNING) THEN	;acj002
	IF (PGMSTAT(RECOVERY_PGM_NAME) = NOT_RUNNING) THEN   ;rma050   ;acj002
		TIMERON FIL_OS_TMR		;start Filter On Stream timer;VCM018

;FIL_FEED_FLOW DEV ALARM LIMIT = FIL_FEED_FLOW_DEV_LIM
	FIL_FEED_FLOW:AI_DVLIM = FIL_FEED_FLOW_DEV_LIM

	LHX_TNK_LVL_MAX = XFER_TNK_LVL_MAX_OS			;acj000

	BF_DP_INTERVAL_MULTPLR_FL = 2  ;VCM082
   LAST_FILTER_FLOW_SP_FL = FIL_FLOW_CNTL_VLV:PID_SPVL:1

;rma050	IF (PGMSTAT("POLRECSA") = NOT_RUNNING) THEN	;ldk026
	IF (PGMSTAT(RECOVERY_PGM_NAME) = NOT_RUNNING) THEN   ;rma050   ;acj002

		XFER_TNK_LVL_MAX = XFER_TNK_LVL_MAX_OS			;acj000
	ELSE
		XFER_TNK_LVL_MAX = XFER_TNK_LVL_MAX_REC_OS		;ldk026 - use higher level during shell recover

	FIL_FEED_TNK_MIN_LVL = FIL_FEED_TNK_MIN_LVL_OS		;acj000

	DIFF_PRESS_LIM = DIFF_PRESS_HI_LIM	;acj006

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.14		ALIGN DEVICES RECIRC
;==============================================================================

ADR:
	;All valves will be opened or closed before checks are made to verify
	; valve statuses.  This is to prevent shocks to the system that would
	; ruin the filter DE layer which would necessitate rebuilding of the DE
	; layer.

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter
	BODY_FEED_TOT:IOS_TG:1 = 1	;Enable the BF Flow counter  ;tta001
	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 0		;Check device statuses on 2nd pass

	GOSUB CIPPROX			;Check cip proximity switches

	TIMERON FIL_RECIRC_TMR;VCM061

	IF HOPS_ON_FG THEN
		GOSUB STOPHOPS

	IF SPIRE_B_HOPS_ON_FG THEN	;joh009
		GOSUB STOPSPIREB

;bmf000 begin
	;the following logic is handled by the hops program for pol3
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		  HOPS_INJECT_ENABLE_FG_PTR = 0		
;bmf000 end

;rma050	IF (PGMSTAT("POLRECSA") = NOT_RUNNING) THEN			;acj001
	IF (PGMSTAT(RECOVERY_PGM_NAME) = NOT_RUNNING) THEN   ;rma050   ;acj002
		MID FIL_FEED_TNK_LVL_MODE		;AUTO		;acj000

		GOSUB O6XV325			;acj004


	IF (INITIAL_DP	= 9999) THEN   ;POL1 initial DP after build  ;VCM071 
		BEGIN
		GOSUB GETTIMEANDDATE			  			;VCM071
	   TEMP_INT = APPEND(PRODUCTION_START_TIME, CURRENT_DATE," ",CURRENT_TIME)
		INITIAL_DP = FIL_DIFF_PRESS:AI_MEAS
		END


	IF (INITIAL_TURB	= 9999) THEN   ;POL1 initial TURBIDITY after build  ;VCM071 
		INITIAL_TURB = BEER_TURBIDITY:AI_MEAS

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;VCM060
	IF (BODYFEED_SEL = 1)&(BODYFEED_FLUSH_DONE_FG = 0) THEN
			TIMERON BF_FLUSH_TIMER		
		 ELSE
			BEGIN
			TIMEROFF BF_FLUSH_TIMER		
			TIMERCLR BF_FLUSH_TIMER		
			END

;tta001	IF (BODYFEED_SEL = 1) THEN
;tta001		GOSUB RECIRCBODYFEED	;TB.2.1.9.2.48 RECIRC BODYFEED
;tta001	ELSE					;acj005
	GOSUB STOPBODYFEED		;acj005


;FIL_FEED_FLOW DEV ALARM LIMIT = FIL_FEED_FLOW_DEV_LIM
	FIL_FEED_FLOW:AI_DVLIM = FIL_FEED_FLOW_DEV_LIM

	LHX_TNK_LVL_MAX = XFER_TNK_LVL_MAX_RECIRC			;acj000
	XFER_TNK_LVL_MAX = XFER_TNK_LVL_MAX_RECIRC			;acj000
	FIL_FEED_TNK_MIN_LVL = FIL_FEED_TNK_MIN_LVL_RECIRC		;acj000

	DIFF_PRESS_LIM = DIFF_PRESS_OS_LIM	;acj006

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.15		ALIGN DEVICES BLOWBACK NORMAL
;==============================================================================

ADBN:
;FIL_FEED_FLOW DEV ALARM LIMIT = 0
	FIL_FEED_FLOW:AI_DVLIM = 0

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter	;acj004
	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001
	GOSUB MCMSSTOPAVG		;mw000

;VCM060	BODYFEED_FLUSH_DONE_FG = 0

	TIMEROFF SUS_1_TMR
	TIMERCLR SUS_1_TMR

	TIMEROFF SUS_2_TMR
	TIMERCLR SUS_2_TMR

	TIMEROFF SUS_3_TMR
	TIMERCLR SUS_3_TMR

	TIMEROFF SUS_4_TMR
	TIMERCLR SUS_4_TMR

	TIMEROFF SUS_5_TMR
	TIMERCLR SUS_5_TMR

	TIMEROFF SUS_6_TMR
	TIMERCLR SUS_6_TMR

	TIMEROFF SUS_8_TMR
	TIMERCLR SUS_8_TMR

	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_0) THEN		;OFF
		BEGIN
		FAIL_MSG = "FILTER FEED TANK MODE IS OFF"
		GOTO FAIL
		END

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	IF HOPS_ON_FG THEN
		GOSUB STOPHOPS

	IF SPIRE_B_HOPS_ON_FG THEN	;joh009
		GOSUB STOPSPIREB

;bmf000 begin
	;the following logic is handled by the hops program for pol3
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		  HOPS_INJECT_ENABLE_FG_PTR = 0		
;bmf000 end

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED	;tta001

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

;TGD002	IF (FILTER_MODE = 0) THEN		;auto     TGD002
;TGD002		IF (PRECOAT_REQ_PTR = 0) THEN
;TGD002			PRECOAT_REQ_PTR = 1	;Precoat makeup request

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.16		ALIGN DEVICES BLOWBACK DRAIN
;==============================================================================

ADBD:
;FIL_FEED_FLOW DEV ALARM LIMIT = 0
	FIL_FEED_FLOW:AI_DVLIM = 0

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter	;acj004
	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001
	GOSUB MCMSSTOPAVG		;mw000

;VCM060	BODYFEED_FLUSH_DONE_FG = 0

	TIMEROFF SUS_1_TMR
	TIMERCLR SUS_1_TMR

	TIMEROFF SUS_2_TMR
	TIMERCLR SUS_2_TMR

	TIMEROFF SUS_3_TMR
	TIMERCLR SUS_3_TMR

	TIMEROFF SUS_4_TMR
	TIMERCLR SUS_4_TMR

	TIMEROFF SUS_5_TMR
	TIMERCLR SUS_5_TMR

	TIMEROFF SUS_6_TMR
	TIMERCLR SUS_6_TMR

	TIMEROFF SUS_8_TMR
	TIMERCLR SUS_8_TMR
;verify no other final filter in sluice, rinse, or blowback drain steps
;acj008	IF (SLUICE_INUSE != 0) THEN
;acj008		IF (SLUICE_INUSE != SLUICE_BIT) THEN
;acj014	IF (SLUICE_INUSE_POLCOM != 0) THEN			;acj008
;acj014		IF (SLUICE_INUSE_POLCOM != SLUICE_BIT) THEN	;acj008
;VCM001	IF (SLUICE_INUSE_PTR != 0) THEN				;acj014
;VCM001		IF (SLUICE_INUSE_PTR != SLUICE_BIT) THEN	;acj014
;VCM001			BEGIN
;VCM001			GOSUB C606P34			;STOP BOD_FEED_PMP	;acj007
;VCM001			GOSUB C6XV318
;VCM001			GOSUB O6XV325
;VCM001			GOSUB C6XV322
;VCM001			GOSUB C5XV330
;VCM001			GOSUB C6XV319
;acj006			PUTAUTO '8606FC32'
;acj006			'8606FC32':PID_SPVL:1 = FIL_FLOW_OS	;acj004
;VCM001			GOSUB C6XV320
;VCM001			GOSUB C6XV326
;VCM001
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
;VCM001			SA_MESSAGE = "SLUICE VALVE INUSE"
;acj008			WAITUNTIL (SLUICE_INUSE = 0)
;acj014			WAITUNTIL (SLUICE_INUSE_POLCOM = 0)	;acj008
;VCM001			WAITUNTIL (SLUICE_INUSE_PTR = 0)	;acj014
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN
;VCM001			END
;acj008	SLUICE_INUSE = SLUICE_BIT
;acj014	SLUICE_INUSE_POLCOM = SLUICE_BIT	;acj008
;VCM001	SLUICE_INUSE_PTR = SLUICE_BIT		;acj014
;VCM001	SA_MESSAGE = " "

;verify no other filter in blowback drain step				;acj014
	IF (BLOWBACK_DRAIN_INUSE_POLCOM != 0) THEN			;acj014
		IF (BLOWBACK_DRAIN_INUSE_POLCOM != SLUICE_BIT) THEN	;acj014
			BEGIN						;acj014
			GOSUB C606P34		;STOP BOD_FEED_PMP	;acj014
			GOSUB C6XV318					;acj014
			GOSUB O6XV325					;acj014
			GOSUB C6XV322					;acj014
			GOSUB C5XV330					;acj014
;pbh001			GOSUB C6XV319					;acj014
;pbh001			GOSUB C6XV320					;acj014
			GOSUB C6XV326					;acj014

			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW	;acj014
			SA_MESSAGE = "BLOWBACK DRAIN INUSE"		;acj014
			WAITUNTIL (BLOWBACK_DRAIN_INUSE_POLCOM = 0)	;acj014
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN	;acj014
			END						;acj014
	BLOWBACK_DRAIN_INUSE_POLCOM = SLUICE_BIT			;acj014
	SA_MESSAGE = " "						;acj014


	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	IF HOPS_ON_FG THEN
		GOSUB STOPHOPS

	IF SPIRE_B_HOPS_ON_FG THEN	;joh009
		GOSUB STOPSPIREB

;bmf000 begin
	;the following logic is handled by the hops program for pol3
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		  HOPS_INJECT_ENABLE_FG_PTR = 0		
;bmf000 end

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED              ;Stop bodyfeed		;tta001

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

;TGD002	IF (FILTER_MODE = 0) THEN		;auto     TGD002
;TGD002		IF (PRECOAT_REQ_PTR = 0) THEN
;TGD002			PRECOAT_REQ_PTR = 1	;Precoat makeup request

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.17		ALIGN DEVICES VENT
;==============================================================================

ADV:
	POL_RESP = 4				;Signal to recovery

	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED              ;Stop bodyfeed		;tta001

	IF (BLOWBACK_DRAIN_INUSE_POLCOM = SLUICE_BIT) THEN	;acj014
		BLOWBACK_DRAIN_INUSE_POLCOM = 0			;acj014

;acj008	IF (SLUICE_INUSE = SLUICE_BIT) THEN
;acj008		SLUICE_INUSE = 0
;acj014	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj008
;acj014		SLUICE_INUSE_POLCOM = 0			;acj008
;VCM001	IF (SLUICE_INUSE_PTR = SLUICE_BIT) THEN		;acj014
;VCM001		SLUICE_INUSE_PTR = 0			;acj014

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.18		ALIGN DEVICES SLUICE
;==============================================================================

ADS:
	POL_RESP = 5				;Signal to recovery

;verify no other final filter in sluice, rinse, or blowback drain steps
;acj008	IF (SLUICE_INUSE != 0) THEN
;acj008		IF (SLUICE_INUSE != SLUICE_BIT) THEN
;acj014	IF (SLUICE_INUSE_POLCOM != 0) THEN			;acj008
;acj014		IF (SLUICE_INUSE_POLCOM != SLUICE_BIT) THEN	;acj008
;VCM001	IF (SLUICE_INUSE_PTR != 0) THEN				;acj014
;VCM001		IF (SLUICE_INUSE_PTR != SLUICE_BIT) THEN	;acj014
;VCM001			BEGIN
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
;VCM001			SA_MESSAGE = "SLUICE VALVE INUSE"
;acj008			WAITUNTIL (SLUICE_INUSE = 0)
;acj014			WAITUNTIL (SLUICE_INUSE_POLCOM = 0)	;acj008
;VCM001			WAITUNTIL (SLUICE_INUSE_PTR = 0)	;acj014
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN
;VCM001			END
;acj008	SLUICE_INUSE = SLUICE_BIT
;acj014	SLUICE_INUSE_POLCOM = SLUICE_BIT	;acj008
;VCM001	SLUICE_INUSE_PTR = SLUICE_BIT		;acj014
;VCM001	SA_MESSAGE = " "


	SECOND_PASS = 1		;Check device statuses on 1st pass
	FILTER_MODE = 0					;VCM073

	GOSUB CIPPROX			;Check cip proximity switches

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter	;tta001

;tta001	IF (BODYFEED_SEL = 1) THEN
	IF (BODYFEED_SEL = 1) & (SLUICE_CYCLE_COUNT <= 1) THEN		;tta001
		GOSUB DRAINBODYFEED	;TB.2.1.9.2.47 DRAIN BODYFEED
	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

   TIMERON SLUICE_CYCLE_TMR ;VCM020

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.19		ALIGN DEVICES RINSE
;==============================================================================

ADR2:
	POL_RESP = 6				;Signal to recovery

;verify no other final filter in sluice, rinse or drain portion of water out
; or cip
;Verify all other final filters have their sluice outlet and rinse valves closed

;acj008	IF (SLUICE_INUSE != 0) THEN
;acj008		IF (SLUICE_INUSE != SLUICE_BIT) THEN
;acj014	IF (SLUICE_INUSE_POLCOM != 0) THEN			;acj008
;acj014		IF (SLUICE_INUSE_POLCOM != SLUICE_BIT) THEN	;acj008
;VCM001	IF (SLUICE_INUSE_PTR != 0) THEN				;acj014
;VCM001		IF (SLUICE_INUSE_PTR != SLUICE_BIT) THEN	;acj014
;VCM001			BEGIN
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
;VCM001			SA_MESSAGE = "SLUICE VALVE INUSE"
;acj008			WAITUNTIL (SLUICE_INUSE = 0)
;acj014			WAITUNTIL (SLUICE_INUSE_POLCOM = 0)	;acj008
;VCM001			WAITUNTIL (SLUICE_INUSE_PTR = 0)	;acj014
;VCM001			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN
;VCM001			END
;acj008	SLUICE_INUSE = SLUICE_BIT
;acj014	SLUICE_INUSE_POLCOM = SLUICE_BIT	;acj008
;VCM001	SLUICE_INUSE_PTR = SLUICE_BIT		;acj014
;VCM001	SA_MESSAGE = " "


	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	TIMERCLR RINSE_TMR		;tta001
	TIMERON RINSE_TMR		;tta001

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	IF (BODYFEED_SEL = 1) THEN
		GOSUB DRAINBODYFEED	;TB.2.1.9.2.47 DRAIN BODYFEED
	ELSE					;acj005
		GOSUB STOPBODYFEED		;acj005

	SA_MESSAGE = "FILLING FILTER"

	IF (FILTER_MODE = 1) THEN		;manual
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		WAITUNTIL 0
		END

	GOSUB SSEQAUTO			;TB.2.1.9.2.49 SET SEQUENCE AUTO
	RETURN

;==============================================================================
;TB.2.1.9.2.20		ALIGN DEVICES MAINT
;==============================================================================

ADM:
	GOSUB CSEQAUTO			;TB.2.1.9.2.50 CLEAR SEQUENCE AUTO

	FILTER_MODE = 1				;MANUAL
	FILTER_MODE_SAVE = FILTER_MODE

	SECOND_PASS = 1		;Check device statuses on 1st pass

;aj	GOSUB CIPPROX			;Check cip proximity switches

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES ;SYSTEM OFF

	GOSUB STOPBODYFEED		;tta001

	IF PRECOAT_TEST_STARTED_FG THEN ;VCM073
		PRINT LOG_ADI,"MAINT MODE TO INSPECT PRECOAT"

	RETURN

;==============================================================================
;TB.2.1.9.2.21		ALIGN DEVICES CO2 FAIL
;==============================================================================

ADCF:
	SECOND_PASS = 1		;Check device statuses on 1st pass

	GOSUB CIPPROX			;Check cip proximity switches

	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001

	GOSUB MCMSSTOPAVG		;mw000
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES ;SYSTEM OFF

	GOSUB STOPBODYFEED		;tta001

	RETURN

;==============================================================================
;TB.2.1.9.2.22		ALIGN DEVICES HOLD
;==============================================================================

ADH:
	IF (SA_STATE = 9) | (SA_STATE = 10) THEN	;Precoat xfer, filter fill 2
		PRECOAT_FAIL_PTR = 1		;Precoat transfer fail

;FIL_FEED_FLOW DEV ALARM LIMIT = 0
	FIL_FEED_FLOW:AI_DVLIM = 0

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter	;acj004
	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter	;tta001
	GOSUB MCMSSTOPAVG		;mw000

	GOSUB CSEQAUTO			;TB.2.1.9.2.50 CLEAR SEQUENCE AUTO

	SECOND_PASS = 1		;Check device statuses on 1st pass

	TIMEROFF FIL_OS_TMR		;turn off Filter On Stream timer;VCM018
;aj	GOSUB CIPPROX			;Check cip proximity switches
	IF (SA_STATE = 13) | (SA_STATE = 14) THEN	;ON STREAM, RECIRC VCM061
		TIMERON FIL_RECIRC_TMR;VCM061
	  ELSE
		TIMEROFF FIL_RECIRC_TMR;VCM061

	IF HOPS_ON_FG THEN
		GOSUB STOPHOPS

	IF SPIRE_B_HOPS_ON_FG THEN	;joh009
		GOSUB STOPSPIREB

;bmf000 begin
	;the following logic is handled by the hops program for pol3
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		  HOPS_INJECT_ENABLE_FG_PTR = 0		
;bmf000 end

	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

;Recirc vlv align if precoat circ, circ to feed, onstream, recirc
;tta001	IF (SA_STATE >= 11) & (SA_STATE <= 14) & (FILTER_MODE != 2) THEN	;off
;ttaspr		BEGIN					;acj005
;tta001		IF (BODYFEED_SEL = 1) THEN
;tta001			GOSUB RECIRCBODYFEED	;TB.2.1.9.2.48 RECIRC BODYFEED
;tta001		ELSE					;acj005
;tta001			GOSUB STOPBODYFEED		;acj005
;tta001		END					;acj005

	TIMEROFF BF_DP_INTERVAL_TMR	;tta001
;VCM070	TIMERCLR BF_DP_INTERVAL_TMR	;tta001
	TIMEROFF BF_CNTRL_DELAY_TMR	;tta001

	TIMEROFF CO2_PURGE_TMR
	TIMEROFF FILL_2_TMR
	TIMEROFF PRECOAT_CIRC_TMR

	RAMP_DOWN_FG = 0

	IF (BLOWBACK_DRAIN_INUSE_POLCOM = SLUICE_BIT) THEN	;acj014
		BLOWBACK_DRAIN_INUSE_POLCOM = 0			;acj014

;acj008	IF (SLUICE_INUSE = SLUICE_BIT) THEN
;acj008		SLUICE_INUSE = 0
;acj014	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj008
;acj014		SLUICE_INUSE_POLCOM = 0			;acj008
;VCM001	IF (SLUICE_INUSE_PTR = SLUICE_BIT) THEN		;acj014
;VCM001		SLUICE_INUSE_PTR = 0			;acj014

	IF (MOD(FLUSH_COUNTER,2) = 1) THEN		;acj004
		FLUSH_COUNTER = FLUSH_COUNTER - 1	;acj004

	TIMEROFF TIMER1_TMR
	DOMON_STAT_INT = 0		;acj019
	DOMON_STAT_PTR = 0		;acj019

	RETURN

;==============================================================================
;TB.2.1.9.2.23		ALIGN DEVICES FAIL
;==============================================================================
ADF:
	IF (SA_STATE = 9) | (SA_STATE = 10) THEN	;Precoat xfer, filter fill 2
		PRECOAT_FAIL_PTR = 1		;Precoat transfer fail

;FIL_FEED_FLOW DEV ALARM LIMIT = 0
	FIL_FEED_FLOW:AI_DVLIM = 0

	FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the flow counter	;acj004
	BODY_FEED_TOT:IOS_TG:1 = 0	;Disable the BF Flow counter  ;tta001
	GOSUB MCMSSTOPAVG		;mw000

	SECOND_PASS = 1		;Check device statuses on 1st pass

	TIMEROFF FIL_OS_TMR		;turn off Filter On Stream timer;VCM018

	IF (SA_STATE = 13) | (SA_STATE = 14) THEN	;ON STREAM, RECIRC VCM061
		TIMERON FIL_RECIRC_TMR;VCM061
	  ELSE
		TIMEROFF FIL_RECIRC_TMR;VCM061

	IF HOPS_ON_FG THEN
		GOSUB STOPHOPS

	IF SPIRE_B_HOPS_ON_FG THEN	;joh009
		GOSUB STOPSPIREB
;bmf000 begin
	;the following logic is handled by the hops program for pol3
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		  HOPS_INJECT_ENABLE_FG_PTR = 0		
;bmf000 end

;Recirc vlv align if precoat circ, circ to feed, onstream, recirc
	GOSUB RUNCMDDEV			;TB.2.1.9.2.40 RUN COMMAND DEVICES

	GOSUB STOPBODYFEED		;acj005

	TIMEROFF BF_DP_INTERVAL_TMR	;tta001
;VCM070	TIMERCLR BF_DP_INTERVAL_TMR	;tta001
	TIMEROFF BF_CNTRL_DELAY_TMR	;tta001

	TIMEROFF CO2_PURGE_TMR
	TIMEROFF FILL_2_TMR
	TIMEROFF PRECOAT_CIRC_TMR

	RAMP_DOWN_FG = 0

	IF (BLOWBACK_DRAIN_INUSE_POLCOM = SLUICE_BIT) THEN	;acj014
		BLOWBACK_DRAIN_INUSE_POLCOM = 0			;acj014

;acj008	IF (SLUICE_INUSE = SLUICE_BIT) THEN
;acj008		SLUICE_INUSE = 0
;acj014	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj008
;acj014		SLUICE_INUSE_POLCOM = 0			;acj008
;VCM001	IF (SLUICE_INUSE_PTR = SLUICE_BIT) THEN		;acj014
;VCM001		SLUICE_INUSE_PTR = 0			;acj014

	IF (MOD(FLUSH_COUNTER,2) = 1) THEN		;acj004
		FLUSH_COUNTER = FLUSH_COUNTER - 1	;acj004

	TIMEROFF TIMER1_TMR
	DOMON_STAT_INT = 0		;acj019
	DOMON_STAT_PTR = 0		;acj019
	RETURN

;==============================================================================
;TB.2.1.9.2.24		STATE INIT
;==============================================================================

STATEINIT:
	SEQ_STATUS = ""
	SEQ_STATUS_PTR = SEQ_STATUS		;jh024
	POL_SA_STATE_PTR = SA_STATE		;egs049
	SA_MESSAGE = ""
	SA_2_MESSAGE = ""
	SA_3_MESSAGE = ""
	SA_4_MESSAGE = ""
	SA_5_MESSAGE = ""
	FAIL_MSG = ""
	PRINT LOG_ADI,"%p",SA_STATUS
	TIMERCLR STEP_TMR
	TIMERON STEP_TMR
	TIMEROFF IBAD_TMR
	TIMERCLR IBAD_TMR
	LAMP LAMP_ADI,LAMP_NUMBER,GREEN
	LAST_LAMP_STATE = GREEN

	GOSUB CLRCMD		;TB.2.1.9.2.44 CLEAR COMMANDS

	IF POL_SA_STATE_PTR > 1 THEN		;mw000
		MCMS_ABORTED_FG = 0		;mw000

	TIMEROFF TIMER1_TMR
	TIMERCLR TIMER1_TMR

	TIMEROFF CO2_PURGE_TMR
	TIMERCLR CO2_PURGE_TMR
	TIMEROFF FILL_2_TMR
	TIMERCLR FILL_2_TMR
	TIMEROFF PRECOAT_CIRC_TMR
	TIMERCLR PRECOAT_CIRC_TMR
	TIMEROFF FIL_OS_TMR		;turn off Filter On Stream timer;VCM018
	TIMEROFF FIL_RECIRC_TMR;VCM061

	TIMEROFF SUS_7_TMR
	TIMERCLR SUS_7_TMR

	TIMEROFF SUS_8_TMR
	TIMERCLR SUS_8_TMR

	TIMEROFF SUS_9_TMR
	TIMERCLR SUS_9_TMR

	TIMEROFF SUS_10_TMR	;VCM020
	TIMERCLR SUS_10_TMR	;VCM020

	TIMEROFF SUS_11_TMR  ;VCM020
	TIMERCLR SUS_11_TMR  ;VCM020

	TIMEROFF SUS_12_TMR  ;VCM020
	TIMERCLR SUS_12_TMR  ;VCM020

	TIMEROFF SUS_13_TMR  ;VCM020
	TIMERCLR SUS_13_TMR  ;VCM020
;bmf000 begin
	TIMEROFF HOPS_WAIT_TMR
	TIMERCLR HOPS_WAIT_TMR
;bmf000 end

	TIMEROFF BF_DP_INTERVAL_TMR	;tta001
;VCM070	TIMERCLR BF_DP_INTERVAL_TMR	;tta001
	TIMEROFF BF_CNTRL_DELAY_TMR	;tta001
;VCM049	IF(SA_STATE < 12 | SA_STATE > 13)THEN	;tta001
	IF(SA_STATE < 12 | SA_STATE > 14)THEN	;VCM049
		BEGIN
		TIMERCLR BF_DP_INTERVAL_TMR	;VCM070
		TIMERCLR BF_CNTRL_DELAY_TMR	;tta001
		TDINT04_FG = 0			;tta001
		END
	IF (SA_STATE = 7) | (SA_STATE = 13) THEN	;tta001
                LAST_SA_STATUS = SA_STATUS		;Save sa status ;tta001

	IF (SA_STATE = 18) THEN	;VCM073
			BEGIN
			PRECOAT_TEST_STARTED_FG = 0
			PRECOAT_TEST_FG = 0
			END

	TIMEROFF BODY_FEED_LVL_TMR			;VCM049
	TIMERCLR BODY_FEED_LVL_TMR			;VCM049
;start tta001
	TIMEROFF PRECOAT_CIRC_TMR
	TIMERCLR PRECOAT_CIRC_TMR
	IF (SA_STATE = 1) THEN
			BEGIN
			SA_TMP_FLT = BODYFEED_FLOW_TOT:AI_MEAS
			IF (BODYFEED_FLOW_TOT:AI_MEAS > 0) THEN  ;VCM067
				PRINT LOG_ADI, "BEFORE RESET BODYFEED = %4.1f GALS", SA_TMP_FLT
			PUTMANL BODYFEED_FLOW_TOT	
			PUTMANL DIL_BFLINE_FLOW_TOT
			WAIT 1
			PUTAUTO BODYFEED_FLOW_TOT	
			PUTAUTO DIL_BFLINE_FLOW_TOT
			BODYFEED_FLUSH_STARTED_FG = 0
			BF_LINE_PACKED_FG = 0
			LAST_DP_VALUE = 0
			LAST_2ND_DP_VALUE = 0
			LAST_3RD_DP_VALUE = 0
			LAST_4TH_DP_VALUE = 0
			LAST_5TH_DP_VALUE = 0
			DP_5MIN_FLT = 0
			DP_10MIN_FLT = 0
			DP_15MIN_FLT = 0
			DP_20MIN_FLT = 0
			DP_CHANGE_RATE = 0
			BF_VFD_DELTA_CHANGE_FLT = 0
			BODYFEED_VFD_CNTRL_OUT_REQ = 0
;VCM060			BODYFEED_FLUSH_DONE_FG = 0
			BF_LINE_PACK_STARTED_FG = 0
			PRECOAT_MODE_SG = "SINGLE PRECOAT"
			GOSUB DEFAULTVALUES
			END

	IF (SA_STATE = 7) THEN
			BEGIN
			IF(DUAL_PRECOAT_SELECTION_FG = 1)THEN
				PRECOAT_TRANSFER_TYPE_PTR = 1		;set to dual precoat
			ELSE
				PRECOAT_TRANSFER_TYPE_PTR = 0
			END
;end tta001
	TEMP_FG = 0
	TDINTO1_FG = 0
	TDINTO2_FG = 0
	TDINTO3_FG = 0
;VCM068	TDINT04_FG = 0			;tta001
	BODYFEEDEMAILSENT_FG =0 ;pbh003
   BUILD_NOT_DONE_FG = 0 ;VCM072
	DOMON_STAT_INT = 0		;acj019
	DOMON_STAT_PTR = 0		;acj019

	TIMEROFF SLUICE_CYCLE_TMR ;VCM020
	TIMEROFF SLUICE_DRAIN_TMR ;VCM020

	SLUICE_COMPLETE_FG = 0  ;VCM020

;   POL_DO_PRESSOUT_ENABLED_FG  = 0     ;JMS004
;   POL_DO_PRESSOUT_COMPLETE_FG = 0     ;JMS004

	IF (SA_STATE != 18) THEN  ;VCM020
		BEGIN
		SLUICE_CYCLE_COUNT = 0
		TIMERCLR SLUICE_CYCLE_TMR
		TIMERCLR SLUICE_DRAIN_TMR
		END

	IF (SA_STATE != 9) & (SA_STATE != 10) THEN  ;Not precoat xfer or filter fill 2
		GOSUB RELEASEPRECOAT  ;VCM079

;JMS006	SDE_COMM_IN_BLOWBACK_PTR = (SA_STATE = 15 | SA_STATE = 16) ;blowback ;ehb029
	
;ldk030	IF (SA_STATE != 18) & (SA_STATE != 19) THEN  ;SLUICE OR RINSE VCM021
	IF (SA_STATE != 16) & (SA_STATE != 18) & (SA_STATE != 19) THEN  ;SLUICE OR RINSE OR BLOWBACK DRAIN	;ldk030
		GOSUB SLUICERELEASE  ;VCM021

	IF (SA_STATE < 12) | ((SA_STATE > 14) & (SA_STATE < 20)) THEN	;ldk028 - assume went through blowback
		BLOWBACK_RECOVERY_LATCH_FG = 0				;ldk028

	IF !(SA_STATE = 13 | SA_STATE = 12 | SA_STATE = 14) THEN	;on stream, circ to feed, recirc 	;mw000
		STARTUP_DO_FG = 0 		;mw000

;start tta001
	IF SA_STATE = 13 THEN
		BEGIN
		TIMEROFF RINSE_TMR       
		TIMERCLR RINSE_TMR       
		END

	LAST_BODYFEED_SELECT = BODYFEED_SEL	
;VCM060	EXPR6 = COMPAR(SA_STATUS, "CIRC TO FEED",12,EQ) & COMPAR(LAST_SA_STATUS, SA_STATUS,12,EQ)
;VCM060	EXPR6 = EXPR6 | COMPAR(SA_STATUS, "RECIRC",6,EQ) & COMPAR(LAST_SA_STATUS, SA_STATUS,6,EQ)
	;
;VCM060	EXPR7 = COMPAR(SA_STATUS, "CIRC TO FEED",12,EQ) & COMPAR(LAST_SA_STATUS, "RECIRC",6,EQ)
;VCM060	EXPR7 = EXPR7 | (COMPAR(SA_STATUS, "RECIRC",6,EQ) & COMPAR(LAST_SA_STATUS, "CIRC TO FEED",12,EQ))
;VCM060	IF(!EXPR6 & !EXPR7)THEN
;VCM060		BEGIN
		TIMEROFF BF_FLUSH_TIMER
		TIMERCLR BF_FLUSH_TIMER

		TIMEROFF BF_FLUSH_TIMEOUT_TMR ;VCM062
		TIMERCLR BF_FLUSH_TIMEOUT_TMR ;VCM062
;VCM060		END 
  
	IF(SA_STATE = 13)THEN
		LAST_BF_VFD_DELTA_CHANGE_FLT = 0	;init to a random value

      SA_4_MESSAGE = ""               ;Clear sa message 4
      SA_5_MESSAGE = ""               ;Clear sa message 5
      LAST_SA_STATUS = SA_STATUS_PTR          ;Save sa status
      TIMEROFF PRECOAT_CIRC_TMR
      TIMERCLR PRECOAT_CIRC_TMR
      TIMEROFF CO2_PURGE_TMR   
      TIMERCLR CO2_PURGE_TMR   
      TIMEROFF RINSE_TMR       
      TIMERCLR RINSE_TMR       

	SA_STEP_INT = 1
	SA_STEP_COMPLETE_FG = 0
	;
	SA_STEP_INT2 = 1
	SA_STEP_COMPLETE_2_FG = 0
;VCM060	BODYFEED_FLUSH_DONE_FG = 0
	BODYFEED_FLUSH_STARTED_FG = 0
	BF_LINE_PACK_STARTED_FG = 0
	BODYFEED_ERROR_MGS = " "
	;only clear once per state
	TDINTO1_FG = 0
	TDINTO2_FG = 0
	TDINTO3_FG = 0
	WAIT 1        

;end   tta001
	GOSUB UPDATEMCMS		;mw000
;ldk033 start
	;Report uptime as step Onstream, downtime as everything else
	IF (SA_STATE = 13) THEN
		MCMS_DOWNTIME_INT = 1
	ELSE IF  (SA_STATE = 12) | (SA_STATE = 14) THEN	;Recirc
		MCMS_DOWNTIME_INT = 3
	ELSE
		MCMS_DOWNTIME_INT = 2
;ldk033 finish

	RETURN

;==============================================================================
;TB.2.1.9.2.25		CHECK IF DEVS IN AUTO
;==============================================================================
;	if any of the devices that are in the device state form
;	are in manual display the device that failed.
;===============================================================================
;	D E V I C E      M A N U A L      C H E C K      S U B R O U T I N E
;===============================================================================

	;This subroutine will check to see if any devices are in
	;manual.  If so the program will transition to failure mode
	;and exit.  The sequence administrator program will go into
	;failure hold state.

MANLCHK:
	DEV_IN_MANUAL_FG = 0			;Clear the failure flag first.

	IF !AND(DEV_PTR:DEV_MODE,M_0) THEN
		BEGIN
		DEV_IN_MANUAL_FG = 1		; Set fail flag
		GOTO FAIL			; exit
		END
	RETURN					; Check next device



;===============================================================================
;	CHECKMANUAL
;
;	This routine checks for manual devices in the list of devices
;	and returns an error if one is in manual.
;
;=======================================================================
CHKMAN:

	ASSIGN DEV_PTR = '8606BB302'
	FAIL_MSG = "SLUICE INLET BLKBDVLV MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606P34'
	FAIL_MSG = "BODY FEED PUMP MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8605XV231'
	FAIL_MSG = "DILUENT FLUSH VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV307'
	FAIL_MSG = "LEAF DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV322'
	FAIL_MSG = "BODY FEED VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV311'
	FAIL_MSG = "BACK PRESS VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV310'
	FAIL_MSG = "BEER FILL VALVE MANL"
	GOSUB MANLCHK

;aj-dot	ASSIGN DEV_PTR = '8606XV308'
;aj-dot	FAIL_MSG = "GAS BLEED VALVE MANL"
;aj-dot	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV304'
	FAIL_MSG = "AIR VENT VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV301'
	FAIL_MSG = "SLUICE OUTLET VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV305'
	FAIL_MSG = "CO2 VENT VALVE MANL"
	GOSUB MANLCHK

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001		ASSIGN DEV_PTR = '8606XV313'
;VCM001	ELSE					;aj
;VCM001		ASSIGN DEV_PTR = '8606XV413'	;aj
;VCM001	FAIL_MSG = "RINSE DRAIN VALVE MANL"
;VCM001	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV313'	;VCM001
	FAIL_MSG = "RINSE DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV327'
	FAIL_MSG = "VENT DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV312'
	FAIL_MSG = "CO2 PURGE VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV309'
	FAIL_MSG = "BEER INLET VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV323'
	FAIL_MSG = "PRECOAT SUPPLY VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8605XV330'
	FAIL_MSG = "BODY FEED TK MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV31'
	FAIL_MSG = "DILUENT WATER VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV363'				  ;JMS007
	FAIL_MSG = "DILUENT BLOCK VALVE MANL"    ;JMS007
	GOSUB MANLCHK									  ;JMS007

	ASSIGN DEV_PTR = '8606XV32'
	FAIL_MSG = "DILUENT RINSE VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV303'
	FAIL_MSG = "CO2 BLOWDOWN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV306'
	FAIL_MSG = "BLOWBACK VALVE  MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV317'
	FAIL_MSG = "BEER FEED VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV318'
	FAIL_MSG = "BEER OUTLET VALVE MANL"
	GOSUB MANLCHK

;pbh001	ASSIGN DEV_PTR = '8606XV319'
;pbh001  FAIL_MSG = "PRECOAT CIRC VALVE MANL"
;pbh001	GOSUB MANLCHK

;pbh001	ASSIGN DEV_PTR = '8606XV320'
;pbh001	FAIL_MSG = "PRECOAT CIRC VALVE MANL"
;pbh001	GOSUB MANLCHK

;pbh001	ASSIGN DEV_PTR = '8606XV321'
;pbh001	FAIL_MSG = "DILUENT PUMP PAK MANL"
;pbh001	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV324'
	FAIL_MSG = "FILL SUPPLY VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV325'
	FAIL_MSG = "CIRC TO PUMP MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV326'
	FAIL_MSG = "CIRC TO TANK MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606P31'
	FAIL_MSG = "FILTER FEED PUMP MANL"
	GOSUB MANLCHK

;pbh001	ASSIGN DEV_PTR = '8606P33'
;pbh001	FAIL_MSG = "PRECOAT CIRC PUMP MANL"
;pbh001	GOSUB MANLCHK

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001;acj002		ASSIGN DEV_PTR = '8606P15'
;VCM001;acjxyz		ASSIGN DEV_PTR = '8606P33'	;acj002
;VCM001		ASSIGN DEV_PTR = '8606P15'	;acj002	;acjxyz
;VCM001	ELSE					;aj

;JMS006	ASSIGN DEV_PTR = '8606P35'	;VCM001
;JMS006	FAIL_MSG = "SPENT DE PUMP MANL"
;JMS006	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV330'
	FAIL_MSG = "PURGE DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = XFER_TANK_INLET_VLV		;ldk025
	FAIL_MSG = "XFER TANK INLET VALVE MANL"		;ldk025
	GOSUB MANLCHK					;ldk025

	ASSIGN DEV_PTR = '8606XV302'		             ;JMS004
	FAIL_MSG = "FILTER DO PRESSOUT VLV MANL"		 ;JMS004
	GOSUB MANLCHK					       				 ;JMS004

;aj-dot	ASSIGN DEV_PTR = '8606F3'
;aj-dot	FAIL_MSG = "SLUICE DRIVE SOLENOID MANL"
;aj-dot	GOSUB MANLCHK

	RETURN

;==============================================================================
;TB.2.1.9.2.26		CONTINUOUS CHECKS (CONTCHK)
;==============================================================================

CONTCHK:
	;every state except MAINTENANCE  VCM020
	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		BEGIN
		IF (SA_STATE != 20) & (SHELL_CLOSED_SW:DIN_VAL = 0) THEN
			BEGIN
			FAIL_MSG = "FILTER SHELL NOT CLOSED"
			GOTO FAIL
			END
		END

;mw000 start
	EXPR6 = (COMPAR(SEQ_STATUS,"FAIL",4,NE))
	EXPR6 = EXPR6 & (COMPAR(SEQ_STATUS,"HOLD",4,NE)) 
	EXPR6 = EXPR6 & (PGMSTAT(RECOVERY_PGM_NAME) = NOT_RUNNING)
	IF EXPR6 & (SA_STATE = 12 | SA_STATE = 13 | SA_STATE = 14) THEN			;circ to feed, on stream, recirc
		FILTER_DP_FL = FIL_DIFF_PRESS:AI_MEAS
;mw000 end

	;If counterpressure fails on either the Filter Feed tank or Filter
	;Transfer tank, the Final Filtration sequence will transition to Recirc.

	;filter fill 1 transfer through blowback drain		;acj005
	IF (SA_STATE >= 7) & (SA_STATE <= 16) THEN		;acj005
		BEGIN						;acj005
;jh024		IF (!FIL_FEED_TNK_CO2_OK_FG) THEN
		IF (!POL_FIL_FEED_TNK_CO2_OK_FG_PTR) THEN	;jh024
			BEGIN
			FAIL_MSG = "FEED TANK COUNTERPRESSURE FAIL"
			GOTO FAIL
			END
;jh024		IF ((SWING_SEL:DEV_STAT <= S_2) | (UNIT_NUMBER != U_FF1)) & (!XFER_TNK_CO2_OK_FG) THEN
		IF ((SWING_SEL:DEV_STAT <= S_2) | (UNIT_NUMBER != U_FF1)) & (!POL_XFER_TNK_CO2_OK_FG_PTR) THEN	;jh024
			BEGIN
			FAIL_MSG = "XFER TANK COUNTERPRESSURE FAIL"
			GOTO FAIL
			END
;acj008		IF ((SWING_SEL:DEV_STAT >= S_3) & (UNIT_NUMBER = U_FF1)) & (!LHX_TNK_CO2_OK_FG) THEN
		IF ((SWING_SEL:DEV_STAT >= S_3) & (UNIT_NUMBER = U_FF1)) THEN	;acj008
                    IF (!LHX_TNK_CO2_OK_FG_LHX) THEN
			BEGIN
			FAIL_MSG = "LHX TANK COUNTERPRESSURE FAIL"
			GOTO FAIL
			END
		END						;acj005

	;Check Filter Feed, Body Feed and Precoat Circ pumps for Run status
	;after they have been requested to run.  Status should not be Faulted
	;or Not Running.

	IF (FIL_FEED_PMP_ENABLE_FG) THEN
                BEGIN
		IF (FIL_FEED_PMP:DEV_STAT != S_1) THEN		;RUNNING
			BEGIN
			FAIL_MSG = "FIL FEED PUMP NOT RUNNING"
			GOTO FAIL
			END

			SUS_COND = (FIL_FEED_FLOW:AI_MEAS < 200)
			SUS_TIME = 30
			ASSIGN TEMP_PTR = SUS_8_TMR
			GOSUB SUSCOND
	        	IF (TEMP_FG) THEN
                           BEGIN
			   FAIL_MSG = "FILTER LOW FLOW"	
			   GOTO FAIL	
                           END
                END

;PBH001	IF (PRECOAT_CIRC_PMP_ENABLE_FG) THEN
;PBH001		BEGIN  ;VCM028
;pbh001		IF (PRECOAT_CIRC_PMP:DEV_STAT != S_1) THEN	;RUNNING
;pbh001			BEGIN
;pbh001			FAIL_MSG = "PRECOAT CIRC PUMP NOT RUNNING"
;pbh001			GOTO FAIL
;pbh001			END

		SUS_COND = (FIL_FEED_FLOW:AI_MEAS < 1000)&(SA_STATE = 11)  ;VCM028
		SUS_TIME = 60
		ASSIGN TEMP_PTR = SUS_8_TMR
		GOSUB SUSCOND	  ;PBH001 - when goes into the routine won't do anything if the SUS_COND isn't true 
		IF (TEMP_FG) THEN
			BEGIN
			FAIL_MSG = "PRECOAT CIRC LOW FLOW"	
			GOTO FAIL	
			END
;PBH001		END

	GOSUB BFLOWFLOWCHK		;bodyfeed low flow check 	;tta001

	IF (BOD_FEED_PMP_ENABLE_FG) THEN
		IF (BOD_FEED_PMP:DEV_STAT != S_1) THEN		;RUNNING
			BEGIN
			FAIL_MSG = "BODY FEED PUMP NOT RUNNING"
			GOTO FAIL
			END

	IF (BOD_FEED_TNK_CO2_CSS:DIN_VAL=1) THEN   
		BEGIN     ;CSS PROX TO BODYFEED CHECKS  VCM017
		FAIL_MSG = "CSS PROX ON TO BDYFD TANK CO2"
		GOTO FAIL
		END

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) & (POL1_BOD_FEED_TNK_CSS_PX:DIN_VAL=1) THEN		;bmf000
		BEGIN     ;CSS PROX TO BODYFEED CHECKS  VCM017
		FAIL_MSG = "CSS PROX ON TO BDYFD TANK"
		GOTO FAIL
		END

	IF (COMPAR(UNIT_SG,"POL2",4,EQ)) & (POL2_BOD_FEED_TNK_CSS_PX:DIN_VAL=1) THEN		;bmf000
		BEGIN     ;CSS PROX TO BODYFEED CHECKS  VCM017
		FAIL_MSG = "CSS PROX ON TO BDYFD TANK"
		GOTO FAIL
		END

	IF (COMPAR(UNIT_SG,"POL3",4,EQ)) & (POL3_BOD_FEED_TNK_CSS_PX:DIN_VAL=1) THEN		;bmf000
		BEGIN     ;CSS PROX TO BODYFEED CHECKS  VCM017
		FAIL_MSG = "CSS PROX ON TO BDYFD TANK"
		GOTO FAIL
		END


	;Sluice Outlet valve should be closed during CO2 Pressurize and
	;Blowback states.

;acj004 ;(SA_STATUS != "SLUICE") & (SA_STATUS != "RINSE") & (SA_STATUS != "SYSTEM OFF")
;acj004	IF (SA_STATE != 1) & (SA_STATE != 18) & (SA_STATE != 19) THEN
;(SA_STATUS != "SLUICE") & (SA_STATUS != "RINSE") & (SA_STATUS != "BLOWBACK DRAIN")	;acj004 
	IF (SA_STATE != 16) & (SA_STATE != 18) & (SA_STATE != 19) THEN	;acj004
		IF (SLUICE_OUT_VLV:DEV_STAT != S_0) THEN	;CLOSED
			BEGIN
			FAIL_MSG = "SLUICE OUTLET VALVE NOT CLOSED"
			GOTO FAIL
			END
;acj000 begin
;acj005 - move to sub
;acj005	IF (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_AGIT_LVL) THEN	;acj000
;acj005		GOSUB O605AG2		;START BODY FEED AGIT	;acj000
;acj005	ELSE							;acj000
;acj005		GOSUB C605AG2		;STOP BODY FEED AGIT	;acj000
;acj000 end

	GOSUB BODAGIT			;Bodyfeed tank agitator control	;acj005

	;Check for IBAD status on all analog values.
	IBAD_FG = 0

	IF AND(FIL_FEED_TNK_LVL:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "FIL FEED TANK LEVEL IBAD"
		IBAD_FG = 1
		END

	IF AND(BEER_TURBIDITY:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "BEER TURBIDITY IBAD"
		IBAD_FG = 1
		END

	IF AND(BOD_FEED_TNK_LVL:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "BODY FEED TANK LEVEL IBAD"
		IBAD_FG = 1
		END

	IF AND(FIL_FEED_FLOW:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "FILTER FEED FLOW IBAD"
		IBAD_FG = 1
		END

	;Precoat circ, Circ to feed, On stream, Recirc		;acj007
	IF (SA_STATE >= 11) & (SA_STATE <= 14) THEN		;acj007
		BEGIN						;acj007
;AWM006 BEGIN
		IF AND(FIL_DIFF_PRESS:AI_CURAL, SB_OVER) THEN
			BEGIN
			FAIL_MSG = "FILTER DIFF PRESS OVER RANGE"
			IBAD_FG = 1
			END

		IF AND(FIL_DIFF_PRESS:AI_CURAL, SB_UNDER) THEN
			BEGIN
			FAIL_MSG = "FILTER DIFF PRESS UNDER RANGE"
			IBAD_FG = 1
			END
;AWM006 FINISH
		IF AND(FIL_DIFF_PRESS:AI_CURAL, SB_RANG) THEN		;acj006
			BEGIN						;acj006
			FAIL_MSG = "FILTER DIFF PRESS RANGE ALARM"	;acj006
			IBAD_FG = 1					;acj006
			END						;acj006

		EXPR7 = (SPIREB_HOPS_TOT_PTR:AI_MEAS < SPIRE_B_HOPS_LB)
	        EXPR8 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"SYSTEM OFF",10,EQ))
;ldk029	        EXPR9 = (PGMSTAT("POLRECSA") = NOT_RUNNING) 
;rma050	        EXPR9 = (PGMSTAT("POLRECSA") = NOT_RUNNING) | INSTR(REC_SA_STATUS, "PRESSOUT")	;ldk029
	        EXPR9 = (PGMSTAT(RECOVERY_PGM_NAME) = NOT_RUNNING) | INSTR(REC_SA_STATUS, "PRESSOUT") ;rma050	;ldk029

		IF  EXPR7 & EXPR8 & EXPR9 & (HOPS_SEL = 2) THEN              ;VCM015
			SPIREB_PACK_ENABLE_FG_PTR = 1
		ELSE
			SPIREB_PACK_ENABLE_FG_PTR = 0
		END						;acj007

	IF AND(FIL_DIFF_PRESS:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "FILTER DIFF PRESS IBAD"
		IBAD_FG = 1
		END

	IF AND(XFER_TNK_LVL:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "XFER TANK LEVEL IBAD"
		IBAD_FG = 1
		END

	IF (IBAD_FG = 1) THEN
		TIMERON IBAD_TMR
	ELSE
		BEGIN
		TIMEROFF IBAD_TMR
		TIMERCLR IBAD_TMR
		END

	IF (IBAD_TMR > IBAD_SECONDS) THEN
		GOTO FAIL

	GOSUB CIPPROX			;Check cip proximity switches

							  ;VCM046
;		IF ((SA_STATE = 18) | (SA_STATE = 19)) THEN  ;SLUICE OR RINSE  VCM046
;VCM069		IF (SA_STATE = 18) THEN  ;SLUICE OR RINSE  VCM046
;VCM069				BEGIN
;VCM069				SUS_COND = (DE_SLURRY_FILTERS_FLOW:AI_MEAS < 100)
;VCM069				SUS_COND = SUS_COND & (AND('8606P35':DEV_STAT, S_1))
;VCM069				SUS_COND = SUS_COND & (FILTER_LO_LVL:DEV_STAT != S_1)
;VCM069				SUS_COND = SUS_COND & (!SLUICE_LOCALLY_FG)
;VCM069				SUS_TIME = 180
;VCM069				ASSIGN TEMP_PTR = SUS_13_TMR
;VCM069				GOSUB SUSCOND
;VCM069				IF SUS_COND & (SUS_13_TMR > 30) & (SUS_13_TMR < 90) THEN  ;VCM048
;VCM069					BEGIN
;VCM069					GOSUB C6XV313   ;close drain
;VCM069					GOSUB O6XV301	 ; open sluice outlet
;VCM069					GOSUB O6XV311	 ; open back pressure relief
;VCM069					GOSUB C6XV305		; close co2 vent
;VCM069					GOSUB C6XV304	;close air vent
;VCM069					GOSUB C6XV308	;close gas bleed
;VCM069					GOSUB O6XV303	;open co2 blow down
;VCM069					END
;VCM069				ELSE
;VCM069					BEGIN
;VCM069					GOSUB C6XV303	;close co2 blow down
;VCM069					GOSUB C6XV327	;close vent drain
;VCM069					GOSUB O6XV311	 ; open back pressure relief
;VCM069					GOSUB O6XV305		; open co2 vent
;VCM069					GOSUB O6XV308	;open gas bleed
;VCM069					GOSUB O6XV304	;open air vent
;VCM069					END
;VCM069				IF (TEMP_FG) THEN
;VCM069					BEGIN
;VCM069					FAIL_MSG = "LOW SPENT DE FLOW"	
;VCM069					GOTO FAIL
;VCM069					END
;VCM069				END
;VCM069
	;tta001 - begins
		IF ((BODYFEED_SEL != LAST_BODYFEED_SELECT) & BODYFEED_SEL = 0) THEN	;stop bodyfeed line if the bodyfeed is diselected
			BEGIN
			IF((POL_SA_STATE_PTR = 13) | (POL_SA_STATE_PTR = 14)) THEN		;allow to stop the bodyfeed injection in the onstream or recirc steps
				BEGIN	
				GOSUB STOPBODYFEED
				TIMERON NEED_FLUSH_DELAY_TMR
				BODYFEEDFLUSH_REQUIRED_FG = 1
				END
			PRINT LOG_ADI, "BODYFEED DISELECTED BY OPERATOR"
			LAST_BODYFEED_SELECT = BODYFEED_SEL
			END
	;tta001 - end

			IF((POL_SA_STATE_PTR = 13) | (POL_SA_STATE_PTR = 14)) THEN  ;RECIRC OR ON STREAM VCM074
				BEGIN
			  	IF (FIL_DIFF_PRESS:AI_MEAS >= (DIFF_PRESS_BLOWBACK_LIM - DP_OFFSET)) THEN	;HIGH DP THEN SLOW FILTER VCM074
					FIL_FLOW_CNTL_VLV:PID_SPVL:1 = (FIL_FLOW_OS * 0.9)

				IF SC_SA_REINIT_BF_CNTRL_CMD THEN   ;VCM088
					BEGIN
					PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_INIT
					BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CNTRL_OUT_INIT
					PRINT LOG_ADI, "RESTART BF INITIAL OUTPUT  = %3.1f",BODYFEED_VFD_CNTRL_OUT_INIT
					TIMERCLR BF_CNTRL_DELAY_TMR
					SC_SA_REINIT_BF_CNTRL_CMD = 0
					END
				END


;tta001      EXPR6 = (SA_STATE >= 11) & (SA_STATE <= 14) & (FILTER_MODE != 2)		;JMS003
;tta001		EXPR7 = (BODYFEED_SEL = 0) & !(BODYFEED_FLUSH_DONE_FG = 1)		;JMS003
;tta001	   IF (EXPR6 & EXPR7) THEN							;JMS003
;tta001        GOSUB  BODFEEDLINEFLUSHCHK						;JMS003

	;tta001 - begins
	IF(BODYFEEDFLUSH_REQUIRED_FG) & (SA_STATE = 13) THEN
		BEGIN
		GOSUB BODFEEDLINEFLUSHCHK
		END
	;tta001 - end

	RETURN

;==============================================================================
;TB.2.1.9.2.27		FILL TIME CHECK
;==============================================================================

FILLTIMECHK:
	IF (STEP_TMR > DIL_FILL_TIME) THEN
		BEGIN
		IF (FILTER_MED_LVL:DEV_STAT != S_0) THEN	;MED
			BEGIN
			FAIL_MSG = "MEDIUM LEVEL NOT REACHED"
			GOTO FAIL
			END
		IF !(TDINTO1_FG) THEN
			BEGIN
			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
			SA_MESSAGE = "SLOW FILTR FILL,CHECK DIL FEED"
			TIMERON TIMER1_TMR
			TDINTO1_FG = 1
			END
		END

	IF (TIMER1_TMR > DIL_FAIL_TIME) THEN
		BEGIN
		FAIL_MSG = "HI LEVEL NOT REACHED"
		GOTO FAIL
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.28		DRAIN FAIL CHECK
;==============================================================================

DRAINFAILCHK:
	IF (STEP_TMR > DIL_DRAIN_TIME) THEN
		BEGIN
		FAIL_MSG = "FILTER NOT EMPTY"
		GOTO FAIL
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.31		FILL 1 TIME CHECK
;==============================================================================

FILL1TIMECHK:
	IF (TIMER1_TMR > FILL_1_FEED_TIME) THEN
		BEGIN
		FAIL_MSG = "MED LEVEL NOT REACHED"
		GOTO FAIL
		END

;acj004	IF !TDINTO1_FG & (FIL_FEED_TNK_LVL:AI_INVL <= FIL_FEED_TNK_MIN_LVL) THEN
;ldk028	IF !TDINTO1_FG & (FIL_FEED_TNK_LVL:AI_INVL <= FIL_FEED_TNK_DRAIN_LVL) THEN	;acj004
	IF !TDINTO1_FG & (FIL_FEED_TNK_LVL:AI_MEAS <= FIL_FEED_TNK_DRAIN_LVL) THEN	;acj004	;ldk028
		BEGIN
		SA_MESSAGE = "WAITING FOR BEER"
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW
		TIMEROFF TIMER1_TMR

		GOSUB C606P31				;STOP FIL_FEED_PMP

		PUTMANL FIL_FLOW_CNTL_VLV
		PUTOUT FIL_FLOW_CNTL_VLV, 0		;0% OPEN

		GOSUB C6XV317				;CLOSE BEER_FEED_VLV
		GOSUB C6XV310				;CLOSE BEER_FILL_VLV

		TDINTO1_FG = 1
		END

;ldk028	IF TDINTO1_FG & (FIL_FEED_TNK_LVL:AI_INVL > FIL_FEED_TNK_LVL_FILL_1) THEN
	IF TDINTO1_FG & (FIL_FEED_TNK_LVL:AI_MEAS > FIL_FEED_TNK_LVL_FILL_1) THEN	;ldk028
		BEGIN
		TIMERON TIMER1_TMR

		GOSUB O6XV317				;OPEN BEER_FEED_VLV
		GOSUB O6XV310				;OPEN BEER_FILL_VLV

		PUTAUTO FIL_FLOW_CNTL_VLV
		FIL_FLOW_CNTL_VLV:PID_SPVL:1 = FIL_FLOW_INIT	;acj004

		WAIT 3				;acj004
		GOSUB O606P31				;START FIL_FEED_PMP

		SA_MESSAGE = ""
		LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN
		TDINTO1_FG = 0
		END

	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_0) THEN	;OFF
		BEGIN
		FAIL_MSG = "FILTER FEED TANK MODE IS OFF"
		GOTO FAIL
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.32		FILL 2 FAIL CHECK
;==============================================================================

FILL2FAILCHK:
	IF (FILL_2_TMR > FILL_2_FAIL_TIME) THEN
		BEGIN
		FAIL_MSG = "HI LEVEL NOT REACHED"
		GOTO FAIL
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.33		TURBIDITY CHECKS
;==============================================================================

TURBIDITYCHK:
	IF !TDINTO1_FG & (PRECOAT_CIRC_TMR > PRECOAT_CIRC_FAIL_TIME) THEN
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW
		SA_MESSAGE = "DESIRED TURBIDITY NOT REACHED"
		TDINTO1_FG = 1
		END

;tta001	IF !TDINTO2_FG & (PRECOAT_CIRC_TMR > BODYFEED_STOP_TIME) THEN
;tta001		BEGIN
;tta001		IF (BODYFEED_SEL = 1) THEN	;aj
;tta001			GOSUB RECIRCBODYFEED	;TB.2.1.9.2.48 RECIRC BODYFEED
;tta001		TDINTO2_FG = 1
;tta001		END
	RETURN

;==============================================================================
;TB.2.1.9.2.34		LEVEL CHECKS
;==============================================================================

LEVELCHK:
	IF (BODYFEED_SEL) THEN
		BEGIN
		;VCM049 Check bodyfeed tank level to drop at least 1% every 10 minutes the bodyfeed
		;pump is on.  
		IF AND(BOD_FEED_PMP:DEV_STAT,S_1) THEN   ;body feed pump is on 	;den001
			BEGIN							;den001
			TIMERON BODY_FEED_LVL_TMR				;den001
			;reset BOD_FEED_TNK_LVL_STRT if a the bodyfeed tank refills
			IF (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_TNK_LVL_STRT)  THEN
				BOD_FEED_TNK_LVL_STRT = BOD_FEED_TNK_LVL:AI_INVL	;den001	
			;reset the bodyfeed tank level check every 10 minutes if oump is on
			IF ((BODY_FEED_LVL_TMR > BDY_FED_TNK_LVL_TIME)&(BOD_FEED_TNK_LVL:AI_INVL <(BOD_FEED_TNK_LVL_STRT - 1.0))) THEN ;den001
				BEGIN
				TIMERCLR BODY_FEED_LVL_TMR
				BOD_FEED_TNK_LVL_STRT = BOD_FEED_TNK_LVL:AI_INVL	;den001	
				BODYFEEDEMAILSENT_FG = 0 ;pbh003	  Body Feed tank level is dropping so, reset the email sent flag
				END

			END							;den001	
		ELSE 							;den001
			BEGIN							;den001
			TIMEROFF BODY_FEED_LVL_TMR			;den001
			TIMERCLR BODY_FEED_LVL_TMR				;den001
			BOD_FEED_TNK_LVL_STRT = BOD_FEED_TNK_LVL:AI_INVL	;den001	
			BODYFEEDEMAILSENT_FG = 0 ;pbh003	 Since bodyfeed select is turned off rest the email sent flag
			END							;den001	
	
		IF ((BODY_FEED_LVL_TMR > BDY_FED_TNK_LVL_TIME)&(BOD_FEED_TNK_LVL:AI_INVL >(BOD_FEED_TNK_LVL_STRT - 1.0))) THEN ;den001
			BEGIN ;PBH002 Start of where adding to Print statement
			ERROR_STRING = "BODY FEED TNK LVL NOT DROPPING"		;den001  VCM049
			IF( BODYFEEDEMAILSENT_FG = 0 ) THEN	;pbh003
				BEGIN				;pbh003
				PRINT LOG_ADI, "BODY FEED TNK LVL NOT DROPPING" ;PBH002 ADDED this to log so we can tell how frequently it's alerting
				BODYFEEDEMAILSENT_FG = 1	;pbh003
				END				;pbh003
			END  ;PBH002  End of where adding to Print statement

;IF TDINTO (BOD_FEED_TNK_LVL < BOD_FEED_TNK_LO_LIM) THEN	;10%
		IF !TDINTO1_FG & (BOD_FEED_TNK_LVL:AI_INVL < BOD_FEED_TNK_LO_LIM) THEN	;10%
			BEGIN
			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW
			SA_MESSAGE = "BODY FEED TANK LEVEL LOW"
			TDINTO1_FG = 1
			END
		IF TDINTO1_FG & !TDINTO2_FG & (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_TNK_LO_LIM) THEN	;10%
			BEGIN
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN
			SA_MESSAGE = " "
			TDINTO1_FG = 0
			END

;IF TDINTO (BOD_FEED_TNK_LVL < BOD_FEED_TNK_LOLO_LIM) THEN	;1%
		IF !TDINTO2_FG & (BOD_FEED_TNK_LVL:AI_INVL < BOD_FEED_TNK_LOLO_LIM) THEN	;1%
			BEGIN
;acj006			SA_MESSAGE = "CIRC TO FEED INTERRUPTED"
			SA_MESSAGE = "BODYFEED TANK LOLO - PUMP OFF"	;acj006

			GOSUB C606P34			;STOP BOD_FEED_PMP
			GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV
			GOSUB C5XV330		;CLOSE BOD_FEED_TNK_OUT_VLV
;acj006			GOSUB O6XV325		;OPEN CIRC_TO_PMP_VLV
;acj006			GOSUB C6XV326		;CLOSE CIRC_TO_TNK_VLV

			TIMEROFF TIMER1_TMR
			TDINTO2_FG = 1
			END

;IF TDINTO (BOD_FEED_TNK_LVL > BOD_FEED_TNK_OK_LIM) THEN	;15%
		IF TDINTO2_FG & (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_TNK_OK_LIM) THEN	;15%
			BEGIN
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN

			GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
			GOSUB O5XV330		;OPEN BOD_FEED_TNK_OUT_VLV
			WAIT 3				;acj004
			GOSUB O606P34		;START BOD_FEED_PMP
;acj006			GOSUB O6XV326		;OPEN CIRC_TO_TNK_VLV
;acj006			GOSUB C6XV325		;CLOSE CIRC_TO_PMP_VLV

			TIMERON TIMER1_TMR
			TDINTO1_FG = 0
			TDINTO2_FG = 0
			SA_MESSAGE = " "
			END
      END
	RETURN

;==============================================================================
;TB.2.1.9.2.35		BODY FEED LINE REPACK CHECK
;==============================================================================

BODYFEEDLINEREPACKCHK:

	IF(BF_LINE_PACKED_FG | BODYFEED_FLUSH_STARTED_FG | BODYFEED_SEL = 0)THEN	;tta001
		RETURN									;tta001

;  IF (COMPAR(BRAND_ID,"J24",3,EQ))|(COMPAR(BRAND_ID,"XX4",3,EQ)) THEN     ;JMS002
;     RETURN																					  ;JMS002
											;VCM064
	IF (BODYFEED_FLUSH_DONE_FG)|(!BF_LINE_PACKED_FG) THEN	; bodyfeed flush has occurred
		BEGIN
;tta001		GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
		GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV			;tta001
		GOSUB O6XV350			;OPEN BOD_FEED_BLK_VLV			;tta001
		GOSUB O6XV351			;OPEN BOD_FEED_DRAIN_VLV		;tta001
		GOSUB O5XV330			;OPEN BOD_FEED_TNK_OUT_VLV
		PUTMANL BODYFEED_VFD_CONTROL_PTR					;tta001
		PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_MAX		;tta001
		WAIT 3				;acj004
		GOSUB O606P34			;START BOD_FEED_PMP
		BF_LINE_PACK_STARTED_FG = 1			;tta001
		BODYFEED_FLOW_TOT:IOS_TG:1 = 1			;tta001
		SA_MESSAGE = "BODY FEED LINE PACK"
						; wait recirc delay time before
		WAIT (BODYFEED_REPACK_TIME)	; allowing sequence onstream
		BF_LINE_PACKED_FG = 1		;tta001
		BODYFEED_FLUSH_DONE_FG = 0	; clear bodyfeed flush flag
		BODYFEED_FLOW_TOT:IOS_TG:1 = 0	;tta001
		;
		PUTMANL BODYFEED_VFD_CONTROL_PTR		;tta001
		PUTOUT BODYFEED_VFD_CONTROL_PTR, 0		;tta001
		GOSUB C606P34			;STOP BOD_FEED_PMP		;tta001
		GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV		;tta001
		GOSUB C6XV350			;CLOSE BOD_FEED_BLK_VLV		;tta001
		GOSUB C6XV351			;CLOSE BOD_FEED_DRAIN_VLV	;tta001
		GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
		PRINT LOG_ADI, "BODY FEED LINE PACK COMPLETED"	;VCM053
		END
	RETURN


;==============================================================================
;TB.2.1.9.2.36		EMPTY FILTER
;==============================================================================

EMPTYFILTER:
	IF (STEP_TMR > DRAIN_TIME) THEN
		GOSUB C6XV307			;CLOSE LEAF_DRAIN_VLV

	IF (FIL_FEED_TNK_HI_LVL:DEV_STAT = S_1) THEN		;hi level
		BEGIN
		FAIL_MSG = "FEED TANK HIHI LEVEL"
		GOTO FAIL
		END

	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_0) THEN		;OFF
		BEGIN
		FAIL_MSG = "FILTER FEED TANK MODE IS OFF"
		GOTO FAIL
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.37		DRAIN FILTER
;==============================================================================

DRAINFILTER:
	IF (STEP_TMR > DRAIN_TIME) THEN
		GOSUB C6XV307			;CLOSE LEAF_DRAIN_VLV
	RETURN

;==============================================================================
;TB.2.1.9.2.39		RINSE FILTER
;==============================================================================

RINSEFILTER:
;start tta001
; Wait to drain BF Line 
	IF( RINSE_TMR < 15 ) THEN
		BEGIN
 		RETURN
		END
;end tta001

;IF (FILTER_LO_LVL != LO) & (FLUSH_COUNTER IS EVEN NUMBER) THEN
	IF (FILTER_LO_LVL:DEV_STAT != S_1) & (MOD(FLUSH_COUNTER,2) = 0) THEN
		BEGIN
		GOSUB C606P34			;STOP BOD_FEED_PMP ;AWM005
		PUTMANL BODYFEED_VFD_CONTROL_PTR						;tta001
		PUTOUT BODYFEED_VFD_CONTROL_PTR, 0						;tta001
		GOSUB O6XV301			;acj004
		GOSUB C6XV351			;CLOSE BOD_FEED_DRAIN_VLV			;tta001
		GOSUB C6XV350			;CLOSE BOD_FEED_BLK_VLV				;tta001
		GOSUB C5XV231			;CLOSE BOD_FEED_DIL_FLUSH_VLV
		GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV	;acj000
		GOSUB C6BB302			;CLOSE SLUICE_IN_VLV
;JSM006		IF (!SLUICE_LOCALLY_FG) THEN	;ehb029
;JSM006			BEGIN
;JSM006			GOSUB C6XV313		;ehb029
;JSM006			GOSUB O606P35		;SDE PUMP ehb029
;JSM006			END
;JSM006		ELSE				;ehb029
	   GOSUB O6XV313			;VCM024
		FLUSH_COUNTER = FLUSH_COUNTER + 1
		SA_MESSAGE = "DRAINING FILTER"
		TIMERCLR DRAIN_FILTER_TIMER  ;VCM024
		TIMERON DRAIN_FILTER_TIMER
		END

	IF COMPAR(SA_MESSAGE,"DRAINING FILTER",15,EQ)&(DRAIN_FILTER_TIMER > DRAIN_FILTER_TIME) THEN   ;VCM024
		BEGIN
		FAIL_MSG = "DRAIN TIMEOUT:CHECK SYSTEM"
		GOTO FAIL
		END

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN  ;VCM020
		BEGIN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) & (MOD(FLUSH_COUNTER,2) = 1) THEN
			BEGIN
			IF (FLUSH_COUNTER >= ((FLUSH_NUM*2)-1)) THEN
				BEGIN
;JMS006				IF (FLUSH_NUM >= MAX_FLUSHES) & !SDE_RELEASE_POLISH_ALLOF5  THEN 	;ehb029
;JMS006					BEGIN								;ehb029
;JMS006					PRINT LOG_ADI, "FILTER REACHED MAX RINSES, UNLATCH SDE TANK"	;ehb029
;JMS006					SDE_RELEASE_POLISH_ALLOF5 = 1 					;ehb029
;JMS006					END								;ehb029

;JMS006				IF !SLUICE_LOCALLY_FG & !SDE_RELEASE_POLISH_ALLOF5 THEN	;ehb029
;JMS006					BEGIN									;ehb029
;JMS006					SA_2_MESSAGE = "WAIT FOR EMPTY SHELL"				;EHB029
;JMS006					PRINT LOG_ADI,"ADDITIONAL FLUSH CYCLE WHILE WAITING FOR SDE RELEASE"	;ehb029
;JMS006					FLUSH_NUM = (FLUSH_NUM + 1)						;ehb029
;JMS006					RETURN									;ehb029
;JMS006					END									;ehb029

				TEMP_INT = STEP_TMR

RINSEWAIT1:
				GOSUB CONTCHK			;TB.2.1.3.2.26 CONTINUOUS CHECKS
				GOSUB SLUICECHK	   ;VCM020
				IF (STEP_TMR > (TEMP_INT + 30)) THEN  ;WAS WAIT 30 AND FAILED SLUICECHK
					BEGIN            
					TEMP_FG = 1
					FLUSH_COUNTER = 0
					FLUSH_NUM = 2	;ehb029	;Number of filter flushes
					RETURN
					END
				GOTO RINSEWAIT1
				END

			IF (FLUSH_COUNTER < ((FLUSH_NUM*2)-1)) THEN
				BEGIN
;JMS006				GOSUB C606P35		;SDE PUMP ehb029
;				GOSUB C6XV301		;CLOSE SLUICE_OUT_VLV
;VCMOOO				GOSUB O6XV313   ;VCM006		;OPEN POL1 DRAIN VLV    VCM001
				GOSUB C6XV313   ;VCMOOO		;CLOSE POL1 DRAIN VLV  
				GOSUB O5XV231		;OPEN BOD_FEED_DIL_FLUSH_VLV
				GOSUB O6XV350		;OPEN BOD_FEED_BLK_VLV			;tta001
				GOSUB O6XV322		;OPEN BOD_FEED_IN_VLV
				GOSUB C6XV351		;CLOSE BOD_FEED_DRAIN_VLV		;tta001
				PUTMANL BODYFEED_VFD_CONTROL_PTR				;tta001
				PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_MAX	;tta001
				WAIT 3
				GOSUB O606P34		;START BOD_FEED_PMP
				GOSUB O6BB302		;OPEN SLUICE_IN_VLV

				FLUSH_COUNTER = FLUSH_COUNTER + 1
				SA_MESSAGE = "FILLING FILTER"
				TIMEROFF DRAIN_FILTER_TIMER  ;VCM024
				TIMERCLR DRAIN_FILTER_TIMER

				TEMP_INT = STEP_TMR  ;VCM020
RINSEWAIT2:
				GOSUB CONTCHK			;TB.2.1.3.2.26 CONTINUOUS CHECKS
				GOSUB SLUICECHK	   ;VCM022
;JMS006				IF (FLUSH_COUNTER >= 3) & SDE_RELEASE_POLISH_ALLOF5  THEN 	;ehbfat
;JMS006					RETURN							;ehbfat
				IF (STEP_TMR > (TEMP_INT + 60)) THEN  ;WAS WAIT 60 AND FAILED SLUICECHK
					RETURN
				GOTO RINSEWAIT2
				END
			END
		END
	ELSE  ;POLISH 2 OR 3
		BEGIN
;IF (FILTER_LO_LVL = LO) & (FLUSH_COUNTER IS ODD NUMBER) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) & (MOD(FLUSH_COUNTER,2) = 1) THEN
			BEGIN
			IF (FLUSH_COUNTER >= ((FLUSH_NUM*2)-1)) THEN
				BEGIN
;JMS006				IF (FLUSH_NUM >= MAX_FLUSHES) & !SDE_RELEASE_POLISH_ALLOF5  THEN 	;ehb029
;JMS006					BEGIN								;ehb029
;JMS006					PRINT LOG_ADI, "FILTER REACHED MAX RINSES, UNLATCH SDE TANK"	;ehb029
;JMS006					SDE_RELEASE_POLISH_ALLOF5 = 1 					;ehb029
;JMS006					END								;ehb029

;JMS006				IF !SLUICE_LOCALLY_FG & !SDE_RELEASE_POLISH_ALLOF5 THEN	;ehb029
;JMS006					BEGIN									;ehb029
;JMS006					SA_2_MESSAGE = "WAIT FOR SDE TANK TO END RINSE"				;ehb029
;JMS006					PRINT LOG_ADI,"ADDITIONAL FLUSH CYCLE WHILE WAITING FOR SDE RELEASE"	;ehb029
;JMS006					FLUSH_NUM = (FLUSH_NUM + 1)						;ehb029
;JMS006					RETURN									;ehb029
;JMS006					END									;ehb029
				WAIT 30			;acj004
				TEMP_FG = 1
				FLUSH_COUNTER = 0
				FLUSH_NUM = 3	;ehb029	;Number of filter flushes
				END
			ELSE
				BEGIN
;JMS006				GOSUB C606P35		;SDE PUMP ehb029
				GOSUB C6XV301			;acj004
				GOSUB O5XV231		;OPEN BOD_FEED_DIL_FLUSH_VLV
				GOSUB O6XV350		;OPEN BOD_FEED_BLK_VLV			;tta001
				GOSUB O6XV322		;OPEN BOD_FEED_IN_VLV
				WAIT 3				;acj004
				GOSUB O606P34			;START BOD_FEED_PMP
				GOSUB O6BB302			;OPEN SLUICE_IN_VLV
;acj004				GOSUB O8606F3			;TURNON SLUICE_DRIVE

				FLUSH_COUNTER = FLUSH_COUNTER + 1
				SA_MESSAGE = "FILLING FILTER"
				TIMEROFF DRAIN_FILTER_TIMER  ;VCM024
				TIMERCLR DRAIN_FILTER_TIMER
;JMS006				IF (FLUSH_COUNTER >= 3) & SDE_RELEASE_POLISH_ALLOF5  THEN 	;ehbfat
;JMS006					WAIT 1							;ehbfat
;JMS006				ELSE								;ehbfat
					WAIT 60
				END
			END
		END  

	RETURN

;==============================================================================
;              SLUICE CYCLE  VCM020
;==============================================================================
SLUICECYCLE:

	IF (SLUICE_CYCLE_COUNT = 0) THEN
		BEGIN
		SLUICE_CYCLE_COUNT = 1
		GOSUB O8606F3  ;SLUICE DRIVE
		GOSUB O6BB302
		SA_MESSAGE = "SLUICING FILTER"
		IF SLUICE_LOCALLY_FG THEN 					;ehb029
			TEMP_INT = APPEND(SA_MESSAGE,SA_MESSAGE, " TO DRAIN")	;ehb029
;JMS006		ELSE								;ehb029
;JMS006			TEMP_INT = APPEND(SA_MESSAGE,SA_MESSAGE, " TO SPENT DE");ehb029
		TIMERCLR SLUICE_CYCLE_TMR
;DONE IN ADS:	TIMERON SLUICE_CYCLE_TMR
		TIMEROFF SLUICE_DRAIN_TMR
		TIMERCLR SLUICE_DRAIN_TMR
;ehb029		PRINT LOG_ADI, "FIRST SLUICE CYCLE STARTED"
		PRINT LOG_ADI, "FIRST SLUICE CYCLE STARTED, %p", SA_MESSAGE	;ehb029
		END

;JSM006		IF !SLUICE_LOCALLY_FG THEN
;JSM006			BEGIN
;;JSM006			IF  (SLUICE_CYCLE_TMR > 60) & ('8606P35':DEV_STAT != S_1) THEN
;JSM006			IF ('8606P35':DEV_STAT != S_1) THEN
;JSM006				GOSUB O606P35			;START SPENT DE PUMP VCM001
;JSM006			END
;start tta001
	IF (SLUICE_CYCLE_COUNT = 1) & (SLUICE_CYCLE_TMR > 15) & (BODYFEED_SEL = 1)  THEN
		BEGIN
		GOSUB STOPBODYFEED
		END
;end tta001
	IF (SLUICE_CYCLE_COUNT = 1) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3  ;SLUICE DRIVE
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 2
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR   
;DONE IN ADS:		TIMERON SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35			;STOP SPENT DE PUMP VCM001
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "SECOND SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 2) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 3
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR   
;DONE IN ADS:		TIMERON SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35			;STOP SPENT DE PUMP VCM001
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "THIRD SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 3) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 4
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35 			;mrp004
			;DONE IN ADS:     TIMERON SLUICE_CYCLE_TMR
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "FOURTH SLUICE CYCLE STARTED"
			END
		END
			
	IF (SLUICE_CYCLE_COUNT = 4) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 5
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35 			;mrp004
			;DONE IN ADS:     TIMERON SLUICE_CYCLE_TMR
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "FIFTH SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 5) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 6
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35 			;mrp004
			;DONE IN ADS:     TIMERON SLUICE_CYCLE_TMR
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "SIXTH SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 6) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 7
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35 			;mrp004
			;DONE IN ADS:     TIMERON SLUICE_CYCLE_TMR
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "SEVENTH SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 7) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
			SLUICE_CYCLE_COUNT = 8
			GOSUB O6BB302
			GOSUB O8606F3
			TIMERCLR SLUICE_CYCLE_TMR
;JMS006			GOSUB C606P35 			;mrp004
			;DONE IN ADS:     TIMERON SLUICE_CYCLE_TMR
			TIMEROFF SLUICE_DRAIN_TMR
			TIMERCLR SLUICE_DRAIN_TMR
			SA_MESSAGE = "SLUICING"
			PRINT LOG_ADI, "EIGHTH SLUICE CYCLE STARTED"
			END
		END

	IF (SLUICE_CYCLE_COUNT = 8) & (SLUICE_CYCLE_TMR > SLUICE_CYCLE_TIME) THEN
		BEGIN
		GOSUB C6BB302
		GOSUB C8606F3
		TIMERON SLUICE_DRAIN_TMR
		SA_MESSAGE = "DRAINING FILTER"
;		IF (FILTER_LO_LVL:DEV_STAT = S_1) | (SLUICE_DRAIN_TMR > SLUICE_DRAIN_TIME) THEN
		IF (FILTER_LO_LVL:DEV_STAT = S_1) THEN
			BEGIN
;JMS006			GOSUB C606P35 			;mrp004
			SLUICE_COMPLETE_FG = 1
			SA_MESSAGE = "SLUICE CYCLE COMPLETE"
			PRINT LOG_ADI, "EIGTH-FINAL SLUICE CYCLE COMPLETE"
			END
		END

	RETURN

;==============================================================================
;TB.2.1.9.2.40		RUN COMMAND DEVICES (RUNCMDDEV)
;==============================================================================

RUNCMDDEV:
	;start the command device program and wait until it signals that it
	;has completed and has stopped running

	;if all devices commanded properly cmd_sa_status = 1
	;if a device failed cmd_sa_status is 2
	;if we exceed the timeout for completion (150) then goto fail

	;make sure the program isn't already running
	WAITUNTIL (PGMSTAT("POLSADEV") = NOT_RUNNING) COUNT 150, M1FAIL

	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
		SA_MESSAGE = "ALIGNING DEVICES"
	CMD_SA_STATUS_INT = 0
	RUN "POLSADEV"

	;make sure the program starts
	WAITUNTIL (PGMSTAT("POLSADEV") != NOT_RUNNING) COUNT 150, M2FAIL

	WAITUNTIL ((CMD_SA_STATUS_INT > 0) & (PGMSTAT("POLSADEV") = NOT_RUNNING)) COUNT 150, M3FAIL

	IF (CMD_SA_STATUS_INT = 2) THEN
		GOTO FAIL
	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
		SA_MESSAGE = ""
	RETURN

M1FAIL:
	FAIL_MSG = "POLSADEV ALREADY RUNNING"
	GOTO FAIL
M2FAIL:
	FAIL_MSG = "POLSADEV NOT FOUND!"
	GOTO FAIL
M3FAIL:
	FAIL_MSG = "POLSADEV PROGRAM TIMEOUT"
	GOTO FAIL

;==============================================================================
;TB.2.1.9.2.42		CALCULATE NEW STATE (CALCNEWSTATE)
;==============================================================================

CALCNEWSTATE:
	SC_SA_ATNS_CMD = 0

	;INC STATE BY 1 FOR ATNS
	ON SA_STATE GOTO ST2,ST3,ST4,ST5,ST6,ST7,ST8,ST9,ST10,ST11
	ON (SA_STATE-10) GOTO ST12,ST13,ST14,ST15,ST16,ST17,ST18,ST19,ST1
	ON (SA_STATE-20) GOTO ST7,ST9		;VCM047

	;BIG PROBLEM IF WE GET HERE
	FAIL_MSG = "INVALID STATE ENCOUNTERED"
	GOTO FAIL

ST1:	SA_STATE = 1
	SA_STATUS = "SYSTEM OFF"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST2:	SA_STATE = 2
	SA_STATUS = "CO2 PURGE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST3:	SA_STATE = 3
	SA_STATUS = "DILUENT PURGE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST4:	SA_STATE = 4
	SA_STATUS = "DILUENT DRAIN"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST5:	SA_STATE = 5
	SA_STATUS = "CO2 PRESS"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST6:	SA_STATE = 6
	SA_STATUS = "CO2 PRESS TEST"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST7:	SA_STATE = 7
	SA_STATUS = "FILTER FILL 1 TRANSFER"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST8:	SA_STATE = 8
	SA_STATUS = "FILTER FILL 1 FEED"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST9:	SA_STATE = 9
	SA_STATUS = "PRECOAT TRANSFER"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST10:	SA_STATE = 10
	SA_STATUS = "FILTER FILL 2"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST11:	SA_STATE = 11
	SA_STATUS = "PRECOAT CIRC"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST12:	SA_STATE = 12
	SA_STATUS = "CIRC TO FEED"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST13:	SA_STATE = 13
	SA_STATUS = "ON STREAM"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST14:	SA_STATE = 14
	SA_STATUS = "RECIRC"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST15:	SA_STATE = 15
	SA_STATUS = "BLOWBACK NORMAL"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST16:	SA_STATE = 16
	SA_STATUS = "BLOWBACK DRAIN"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST17:	SA_STATE = 17
	SA_STATUS = "VENT"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST18:	SA_STATE = 18
	SA_STATUS = "SLUICE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST19:	SA_STATE = 19
	SA_STATUS = "RINSE"
	SA_STATUS_PTR = SA_STATUS		;jh024
	RETURN

ST22:	SA_STATE = 22							;VCM047
	SA_STATUS = "FILTER FILL 1 DILUENT"
	RETURN

;==============================================================================
;TB.2.1.9.2.43		SA INITIALIZE
;==============================================================================

SAINIT:
	GOSUB CLRCMD		;TB.2.1.9.2.44 CLEAR COMMANDS

	TEST_FAIL_FG = 0
	SA_MESSAGE = ""
	TIMERON STEP_TMR
	TIMERCLR STEP_TMR
	DEV_FAILED_FG = 0

	TIMEROFF SUS_1_TMR
	TIMERCLR SUS_1_TMR

	TIMEROFF SUS_2_TMR
	TIMERCLR SUS_2_TMR

	TIMEROFF SUS_3_TMR
	TIMERCLR SUS_3_TMR

	TIMEROFF SUS_4_TMR
	TIMERCLR SUS_4_TMR

	TIMEROFF SUS_5_TMR
	TIMERCLR SUS_5_TMR

	TIMEROFF SUS_6_TMR
	TIMERCLR SUS_6_TMR

	TIMEROFF SUS_8_TMR
	TIMERCLR SUS_8_TMR

	TIMEROFF BODY_FEED_LVL_TMR			;VCM049
	TIMERCLR BODY_FEED_LVL_TMR			;VCM049

	TIMEROFF DRAIN_FILTER_TIMER  ;VCM024
	TIMERCLR DRAIN_FILTER_TIMER

	CONT_RUN_MODE_FG = 0

	RETURN

;==============================================================================
;TB.2.1.9.2.44		CLEAR COMMANDS
;==============================================================================

CLRCMD:
	SC_SA_ATNS_CMD = 0
	SC_SA_CONT_CMD = 0
	SC_SA_BLOWBACK_CMD = 0
	SC_SA_CIRC_TO_FEED_CMD = 0
	SC_SA_MAINT_CMD = 0
	SC_SA_START_CMD = 0
	SC_SA_REINIT_BF_CNTRL_CMD = 0  ;VCM088
	MSG_ACK_CMD = 0	;ehb029

	RETURN

;==============================================================================
;TB.2.1.9.2.46		START BODYFEED
;==============================================================================

STARTBODYFEED:

	POL_BODYFEED_ACTIVE_PTR = 1	;Bodyfeed Addtion 0=not active, 1=active	;mw001
	GOSUB C5XV231			;CLOSE BOD_FEED_DIL_FLUSH_VLV
	GOSUB C6XV351			;CLOSE BOD_FEED_DRAIN_VLV		;tta001
	GOSUB O6XV350			;OPEN BOD_FEED_BLK_VLV			;tta001
	GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
	GOSUB O5XV330			;OPEN BOD_FEED_TNK_OUT_VLV

;start tta001
	DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 0
	PUTMANL BODYFEED_VFD_CONTROL_PTR							;VCM083									;VCM083
	IF ((BF_CNTRL_DELAY_TMR >= BF_CNTRL_DELAY_TIME) & (BF_CNTRL_DELAY_TIME > 0))|(BF_CNTRL_DELAY_TIME = 0) THEN
			BEGIN
			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT	;grab the last output if we already started
			IF (AND(BOD_FEED_PMP:DEV_STAT,S_0)) THEN		;STOPPED  VCM065
				PRINT LOG_ADI, "START BF SAVED OUTPUT  = %3.2f",BODYFEED_VFD_CNTRL_OUT
			END
	ELSE
			BEGIN
			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_INIT
			IF (AND(BOD_FEED_PMP:DEV_STAT,S_0)) THEN		;STOPPED  VCM065
				PRINT LOG_ADI, "START BF INITIAL OUTPUT  = %3.2f",BODYFEED_VFD_CNTRL_OUT_INIT
			END
;end tta001
	WAIT 3				;acj004

	BODYFEED_FLOW_TOT:IOS_TG:1 = 1		;tta001
  	BOD_FEED_PMP_ENABLE_FG = 1		;tta001
 	BODYFEED_FLUSH_STARTED_FG = 0   	;tta001
	BODYFEED_FLUSH_DONE_FG = 0  ;VCM060

	IF (AND(BOD_FEED_PMP:DEV_STAT,S_0)) THEN		;STOPPED  VCM065
		BEGIN
		SA_TMP_FLT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1		;grab the current value to do the calculations	
;		IF (SA_TMP_FLT = BODYFEED_VFD_CNTRL_OUT_INIT) THEN				;VCM888
;		PRINT LOG_ADI, "START BF CONTROL:BODYFEED_VFD_CNTRL_OUT_INIT %3.2f",BODYFEED_VFD_CNTRL_OUT_INIT
;	  ELSE
		PRINT LOG_ADI, "START BF CONTROL: OUTPUT  = %3.2f",SA_TMP_FLT
		END
	;VCM80 update saved output value
	BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1

	GOSUB O606P34			;START BOD_FEED_PMP
		BF_LINE_PACKED_FG = 1	;VCM064
	RETURN

;==============================================================================
;TB.2.1.9.2.47		DRAIN BODYFEED
;==============================================================================

DRAINBODYFEED:

;start tta001
	BODYFEED_FLOW_TOT:IOS_TG:1 = 0
	SA_TMP_FLT = BODYFEED_FLOW_TOT:AI_MEAS
	IF (BODYFEED_FLOW_TOT:AI_MEAS > 0) THEN  ;VCM067
		PRINT LOG_ADI, "BEFORE RESET BODYFEED = %4.1f GALS", SA_TMP_FLT
	PUTMANL BODYFEED_FLOW_TOT
	WAIT 1
	PUTAUTO BODYFEED_FLOW_TOT
	;
	PUTMANL BODYFEED_VFD_CONTROL_PTR
	PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_MAX

	GOSUB O6XV351			;OPEN BOD_FEED_BLEED_VLV
	GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV
;end tta001
	GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
	GOSUB O6XV350			;OPEN BOD_FEED_BLK_VLV
;tta001	GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
	GOSUB O5XV231			;OPEN BOD_FEED_DIL_FLUSH_VLV
	WAIT 3				;acj004
	GOSUB O606P34			;START BOD_FEED_PMP
	POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw001
;start tta001
	DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 1
	BF_LINE_PACKED_FG = 0
;end tta001

	RETURN

;==============================================================================
;TB.2.1.9.2.48		RECIRC BODYFEED
;==============================================================================

RECIRCBODYFEED:

	GOSUB C606P34			;STOP BOD_FEED_PMP
	GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV
	GOSUB O5XV330			;OPEN BOD_FEED_TNK_OUT_VLV
	GOSUB C5XV231			;CLOSE BOD_FEED_DIL_FLUSH_VLV
	POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw001

	DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 1	;tta001

	RETURN

;==============================================================================
;TB.2.1.9.2.49		SET SEQUENCE AUTO
;==============================================================================

SSEQAUTO:
	;Set the sequence auto bit ($T5) for all devices specified in the
	;device state forms.

	'8606BB302':DEV_TMP0 = OR('8606BB302':DEV_TMP0,T_5)
	'8606P34':DEV_TMP0 = OR('8606P34':DEV_TMP0,T_5)
	'8605XV231':DEV_TMP0 = OR('8605XV231':DEV_TMP0,T_5)
	'8606XV307':DEV_TMP0 = OR('8606XV307':DEV_TMP0,T_5)
	'8606XV322':DEV_TMP0 = OR('8606XV322':DEV_TMP0,T_5)
	'8606XV311':DEV_TMP0 = OR('8606XV311':DEV_TMP0,T_5)
	'8606XV310':DEV_TMP0 = OR('8606XV310':DEV_TMP0,T_5)
;aj-dot	'8606XV308':DEV_TMP0 = OR('8606XV308':DEV_TMP0,T_5)
;	'8606XV304':DEV_TMP0 = OR('8606XV304':DEV_TMP0,T_5)
	'8606XV301':DEV_TMP0 = OR('8606XV301':DEV_TMP0,T_5)
;	'8606XV305':DEV_TMP0 = OR('8606XV305':DEV_TMP0,T_5)
;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001		'8606XV313':DEV_TMP0 = OR('8606XV313':DEV_TMP0,T_5)
;VCM001	ELSE					;aj
;VCM001		'8606XV413':DEV_TMP0 = OR('8606XV413':DEV_TMP0,T_5)	;aj
        '8606XV313':DEV_TMP0 = OR('8606XV313':DEV_TMP0,T_5) ;VCM001
	'8606XV327':DEV_TMP0 = OR('8606XV327':DEV_TMP0,T_5)
	'8606XV312':DEV_TMP0 = OR('8606XV312':DEV_TMP0,T_5)
	'8606XV309':DEV_TMP0 = OR('8606XV309':DEV_TMP0,T_5)
	'8606XV323':DEV_TMP0 = OR('8606XV323':DEV_TMP0,T_5)
	'8605XV330':DEV_TMP0 = OR('8605XV330':DEV_TMP0,T_5)
	'8606XV31':DEV_TMP0 = OR('8606XV31':DEV_TMP0,T_5)
	'8606XV363':DEV_TMP0 = OR('8606XV363':DEV_TMP0,T_5)   ;JMS007
	'8606XV32':DEV_TMP0 = OR('8606XV32':DEV_TMP0,T_5)
;	'8606XV303':DEV_TMP0 = OR('8606XV303':DEV_TMP0,T_5)
	'8606XV306':DEV_TMP0 = OR('8606XV306':DEV_TMP0,T_5)
	'8606XV317':DEV_TMP0 = OR('8606XV317':DEV_TMP0,T_5)
	'8606XV318':DEV_TMP0 = OR('8606XV318':DEV_TMP0,T_5)
;pbh001	'8606XV319':DEV_TMP0 = OR('8606XV319':DEV_TMP0,T_5)
;pbh001	'8606XV320':DEV_TMP0 = OR('8606XV320':DEV_TMP0,T_5)
;pbh001  '8606XV321':DEV_TMP0 = OR('8606XV321':DEV_TMP0,T_5)
	'8606XV324':DEV_TMP0 = OR('8606XV324':DEV_TMP0,T_5)
	'8606XV325':DEV_TMP0 = OR('8606XV325':DEV_TMP0,T_5)
	'8606XV326':DEV_TMP0 = OR('8606XV326':DEV_TMP0,T_5)
	'8606P31':DEV_TMP0 = OR('8606P31':DEV_TMP0,T_5)
;pbh001	'8606P33':DEV_TMP0 = OR('8606P33':DEV_TMP0,T_5)
	'8606XV302':DEV_TMP0 = OR('8606XV302':DEV_TMP0,T_5)   ;JMS004

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;acj002		'8606P15':DEV_TMP0 = OR('8606P15':DEV_TMP0,T_5)
;acjxyz		'8606P33':DEV_TMP0 = OR('8606P33':DEV_TMP0,T_5)	;acj002
;VCM001		'8606P15':DEV_TMP0 = OR('8606P15':DEV_TMP0,T_5)	;acj002	;acjxyz
;VCM001	ELSE					;aj
;VCM001		'8606P45':DEV_TMP0 = OR('8606P45':DEV_TMP0,T_5)		;aj
;        '8606P35':DEV_TMP0 = OR('8606P35':DEV_TMP0,T_5)		;VCM001
	'8606XV330':DEV_TMP0 = OR('8606XV330':DEV_TMP0,T_5)
;aj-dot	'8606F3':DEV_TMP0 = OR('8606F3':DEV_TMP0,T_5)
	RETURN

;==============================================================================
;TB.2.1.9.2.50		CLEAR SEQUENCE AUTO
;==============================================================================

CSEQAUTO:
	;Clear the sequence auto bit ($T5) for all devices specified in the
	;device state forms.

	'8606BB302':DEV_TMP0 = AND('8606BB302':DEV_TMP0,NOT(T_5))
	'8606P34':DEV_TMP0 = AND('8606P34':DEV_TMP0,NOT(T_5))
	'8605XV231':DEV_TMP0 = AND('8605XV231':DEV_TMP0,NOT(T_5))
	'8606XV307':DEV_TMP0 = AND('8606XV307':DEV_TMP0,NOT(T_5))
	'8606XV322':DEV_TMP0 = AND('8606XV322':DEV_TMP0,NOT(T_5))
	'8606XV311':DEV_TMP0 = AND('8606XV311':DEV_TMP0,NOT(T_5))
	'8606XV310':DEV_TMP0 = AND('8606XV310':DEV_TMP0,NOT(T_5))
;aj-dot	'8606XV308':DEV_TMP0 = AND('8606XV308':DEV_TMP0,NOT(T_5))
	'8606XV304':DEV_TMP0 = AND('8606XV304':DEV_TMP0,NOT(T_5))
	'8606XV301':DEV_TMP0 = AND('8606XV301':DEV_TMP0,NOT(T_5))
	'8606XV305':DEV_TMP0 = AND('8606XV305':DEV_TMP0,NOT(T_5))
;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001		'8606XV313':DEV_TMP0 = AND('8606XV313':DEV_TMP0,NOT(T_5));VCM001
;VCM001	ELSE					;aj
;VCM001		'8606XV413':DEV_TMP0 = AND('8606XV413':DEV_TMP0,NOT(T_5))	;aj
        '8606XV313':DEV_TMP0 = AND('8606XV313':DEV_TMP0,NOT(T_5));VCM001
	'8606XV327':DEV_TMP0 = AND('8606XV327':DEV_TMP0,NOT(T_5))
	'8606XV312':DEV_TMP0 = AND('8606XV312':DEV_TMP0,NOT(T_5))
	'8606XV309':DEV_TMP0 = AND('8606XV309':DEV_TMP0,NOT(T_5))
	'8606XV323':DEV_TMP0 = AND('8606XV323':DEV_TMP0,NOT(T_5))
	'8605XV330':DEV_TMP0 = AND('8605XV330':DEV_TMP0,NOT(T_5))
	'8606XV31':DEV_TMP0 = AND('8606XV31':DEV_TMP0,NOT(T_5))
	'8606XV363':DEV_TMP0 = AND('8606XV363':DEV_TMP0,NOT(T_5))      ;JMS007
	'8606XV32':DEV_TMP0 = AND('8606XV32':DEV_TMP0,NOT(T_5))
	'8606XV303':DEV_TMP0 = AND('8606XV303':DEV_TMP0,NOT(T_5))
	'8606XV306':DEV_TMP0 = AND('8606XV306':DEV_TMP0,NOT(T_5))
	'8606XV317':DEV_TMP0 = AND('8606XV317':DEV_TMP0,NOT(T_5))
	'8606XV318':DEV_TMP0 = AND('8606XV318':DEV_TMP0,NOT(T_5))
;pbh001	'8606XV319':DEV_TMP0 = AND('8606XV319':DEV_TMP0,NOT(T_5))
;pbh001	'8606XV320':DEV_TMP0 = AND('8606XV320':DEV_TMP0,NOT(T_5))
;pbh001	'8606XV321':DEV_TMP0 = AND('8606XV321':DEV_TMP0,NOT(T_5))
	'8606XV324':DEV_TMP0 = AND('8606XV324':DEV_TMP0,NOT(T_5))
	'8606XV325':DEV_TMP0 = AND('8606XV325':DEV_TMP0,NOT(T_5))
	'8606XV326':DEV_TMP0 = AND('8606XV326':DEV_TMP0,NOT(T_5))
	'8606P31':DEV_TMP0 = AND('8606P31':DEV_TMP0,NOT(T_5))
;pbh001	'8606P33':DEV_TMP0 = AND('8606P33':DEV_TMP0,NOT(T_5))
	'8606XV302':DEV_TMP0 = OR('8606XV302':DEV_TMP0,T_5)          ;JMS004

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001;acj002		'8606P15':DEV_TMP0 = AND('8606P15':DEV_TMP0,NOT(T_5))
;VCM001;acjxyz		'8606P33':DEV_TMP0 = AND('8606P33':DEV_TMP0,NOT(T_5))	;acj002
;VCM001		'8606P15':DEV_TMP0 = AND('8606P15':DEV_TMP0,NOT(T_5))	;acj002	;acjxyz
;VCM001	ELSE					;aj
;VCM001		'8606P45':DEV_TMP0 = AND('8606P45':DEV_TMP0,NOT(T_5))	;aj
;JMS006	'8606P35':DEV_TMP0 = AND('8606P35':DEV_TMP0,NOT(T_5))	;VCM001
	'8606XV330':DEV_TMP0 = AND('8606XV330':DEV_TMP0,NOT(T_5))
;aj-dot	'8606F3':DEV_TMP0 = AND('8606F3':DEV_TMP0,NOT(T_5))
	RETURN

;==============================================================================
;TB.2.1.9.2.51		FILTER HI LEVEL CHECK
;==============================================================================

FILTERHILVLCHK:

	;If the filter high level probe becomes dry, open the gas bleed valve
	;8606XV308.  The diluent valve will be opened to pack the pump. When
	;the probe becomes wet, close the gas bleed valve.

	IF !TDINTO3_FG & (FILTER_HI_LVL:DEV_STAT != S_1) THEN		;Not hi level
		BEGIN
		IF (SA_STATE = 11) THEN			;Precoat circ
;pbh001			GOSUB O6XV321		;OPEN DIL_PMP_BACK_VLV
		GOSUB O6XV317 ;pbh001 - TO BRING BEER IN FROM FEED TANK SINC REMOVING XV321
		GOSUB O6XV308		;OPEN GAS_BLEED_VLV
		TDINTO3_FG = 1
		END
	ELSE IF TDINTO3_FG & (FILTER_HI_LVL:DEV_STAT = S_1) THEN	;Hi level
		BEGIN
		GOSUB C6XV308		;CLOSE GAS_BLEED_VLV
		IF (SA_STATE = 11) THEN			;Precoat circ
			BEGIN
;VCMJJJ  		WAIT 20
;pbh001			GOSUB C6XV321		;CLOSE DIL_PMP_BACK_VLV
			GOSUB C6XV317 ;pbh001 - TO STOP ADDING BEER FROM FEED TANK SINCE REMVOING XV321
			END
		TDINTO3_FG = 0
		END
	RETURN

;==============================================================================
;TB.2.1.9.2.52		HOPS RATE ERROR CHECK
;==============================================================================
HOPSRATEERRCHK:

	;Checks for hops inject rate deviation error during On Stream operation.

	IF (HOPS_SEL = 1) & (HOPS_ON_FG) THEN ;VCM011
	       BEGIN
		SUS_COND = (AND(HOPS_CNTLR:AI_CURAL, T_6))
		SUS_TIME = HOPS_ERROR_TIME
		ASSIGN TEMP_PTR = SUS_7_TMR
		GOSUB SUSCOND
	        IF (TEMP_FG) THEN
		 BEGIN
	          HOPS_ERROR = 1		; set hops deviation error
		  PRINT LOG_ADI,"HYDRO HOPS DEV ERROR"	;joh009
		  LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
                  LAST_LAMP_STATE = RED
		 END
		IF (!TEMP_FG) & (AND('8619LSL1':DEV_STAT,S_1)) THEN;VCM011
                   BEGIN
                   HOPS_ERROR = 1		; set hops deviation error
                   PRINT LOG_ADI,"HYDROHOPS LINE EMPTY"
                   END
	       END
	ELSE
                BEGIN
		TIMEROFF SUS_7_TMR
		TIMERCLR SUS_7_TMR
                END
		
	IF (HOPS_SEL = 2) THEN
	   	BEGIN
		    ;if hops program is in error, then set error flag
		    IF (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"ERROR",5,EQ)) THEN
			TEMP_FG = 1
		    ELSE 
			TEMP_FG = 0

	        IF (TEMP_FG) THEN
	            BEGIN
	            HOPS_ERROR = 1		; set hops deviation error
	            PRINT LOG_ADI,"SPIRE B HOPS DEV ERROR"
	            LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
                    LAST_LAMP_STATE = RED
	            END    
	       	END	;spire b selected

	IF HOPS_ON_FG & ((HOPS_TOT:AI_MEAS >= HOPS_LB ) | (HOPS_SEL = 0) | (HOPS_SEL = 2)) THEN  ;RDK003
                 BEGIN
					  PRINT LOG_ADI, "%5.2f LBS HYDROHOPS",HOPS_TOT:AI_MEAS
					  PRINT LOG_ADI, "HYDROHOPS PRT = %p",	TRAP_PRT1_TARGET_PTR
                 GOSUB STOPHOPS         ;HOPS INJECTION COMPLETE
					  LAST_HYDROHOP_PRT = TRAP_PRT1_TARGET_PTR ;VCM027
                 LAST_HYDROHOP_LBS = HOPS_TOT:AI_MEAS
					  GOSUB GETTIMEANDDATE
					  HH_STOP_TIME = CURRENT_TIME
					  HH_STOP_DATE = CURRENT_DATE
                 END
        ELSE
	   IF !HOPS_ON_FG & (HOPS_TOT:AI_MEAS < HOPS_LB) & (HOPS_SEL = 1)     THEN	; hops injection not complete
		BEGIN
                HOPS_LB_CNTLR:AI_DVLIM = HOPS_TOL_DVLIM   ;RDK003
		GOSUB O19XV31		;OPEN HOPS_IN_VLV
		FAIL_MSG = "HOPS PUMP FAIL ON"		;acj000
		TURNON '8619DO1'	;Hops pump	;acj000
	   PRINT LOG_ADI, "*HYDROHOPS PUMP ON:PRT = %p*", TRAP_PRT1_TARGET_PTR ;VCM027
		PUTAUTO HOPS_CNTLR			; RE-start hops inlt ctrl
		HOPS_TOT:IOS_TG:1 = 1		; enable hops totalizer
		REPORT_TRIG5_FG = 1		;Hops pump started
		HOPS_ON_FG = 1
		HOPS_TYPE_PLC_PTR = 1		;0=n/a;1=Hydrohops;2=Spire-B hops	;mw000		
	   PRINT LOG_ADI, "%5.2f LBS HYDROHOPS:PRT = %p",HOPS_TOT:AI_MEAS, TRAP_PRT1_TARGET_PTR
		END

;SPIRE B joh009 start
	;Checks for hops inject rate deviation error during On Stream operation.

		EXPR7 = (SPIREB_HOPS_TOT_PTR:AI_MEAS >= SPIRE_B_HOPS_LB) ;bmf000
	;joh010
	IF SPIRE_B_HOPS_ON_FG & ((EXPR7) | (HOPS_SEL = 0)|(HOPS_SEL = 1)) THEN	; hops injection complete
           BEGIN
			   SPIREB_HOPS_TOT_PTR:AI_MEAS = SPIRE_HOP_TOT				;MRP002
	       PRINT LOG_ADI, "%5.2f LBS SPIRE_B",SPIRE_HOP_TOT ;bmf000
	   GOSUB STOPSPIREB
	   SPIREB_HOPS_INJECT_RATIO_PTR = 0.0
           END
	ELSE							; hops injection not complete  ;joh009
	   BEGIN                                                ;bmf000
		EXPR7 = (SPIREB_HOPS_TOT_PTR:AI_MEAS >= SPIRE_B_HOPS_LB) ;bmf000
	   IF !SPIRE_B_HOPS_ON_FG & (!EXPR7) & (HOPS_SEL = 2)    THEN	; hops injection not complete
	      BEGIN
	      ;the following logic is handled by the hops program for pol3
		  HOPS_INJECT_ENABLE_FG_PTR = 1		
		  EXPR8 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"INJECT",5,EQ)) 
		  EXPR9 = (STRLEN(SPIREB_HOPS_SEQ_STATUS_PTR) < 2) 
		  IF (EXPR8 & EXPR9) THEN
		      BEGIN
                      SPIRE_B_HOPS_ON_FG = 1
			HOPS_TYPE_PLC_PTR = 2		;0=n/a;1=Hydrohops;2=Spire-B hops	;mw000
		      TIMEROFF HOPS_WAIT_TMR
		      TIMERCLR HOPS_WAIT_TMR
		      END
		  ELSE IF (SPIREB_HOPS_INJECT_RATIO_PTR > 0.0) THEN
		      BEGIN
		      TIMERON HOPS_WAIT_TMR
		      END	
	
		  IF (HOPS_WAIT_TMR > HOPS_MAX_START_TIME) THEN
		      BEGIN
		      FAIL_MSG = "SPIRE B HOPS START FAILURE"
		      GOTO FAIL
                      END
	      END
	  END						;bmf000

	RETURN

;==============================================================================
;      CHECK SLUICE ARM MOVEMENT SWITCH FOR CHANGE VCM020   LEFT OFF HERE
;==============================================================================
SLUICECHK:
	IF (SLUICE_DRIVE:DOT_VAL = 1) THEN ;VCM020
		BEGIN
		SUS_COND = (SLUICE_MOVEMENT_SW:DIN_VAL = 1)
		SUS_TIME = SLUICE_MOVEMENT_TIME
		ASSIGN TEMP_PTR = SUS_11_TMR
		GOSUB SUSCOND
	        IF (TEMP_FG) THEN
			BEGIN
			FAIL_MSG = "SLUICE NOT OPERATING"	
			GOTO FAIL	
			END

		SUS_COND = (SLUICE_MOVEMENT_SW:DIN_VAL = 0)
		SUS_TIME = SLUICE_MOVEMENT_TIME
		ASSIGN TEMP_PTR = SUS_12_TMR
		GOSUB SUSCOND
		IF (TEMP_FG) THEN
			BEGIN
			FAIL_MSG = "SLUICE NOT OPERATING"	
			GOTO FAIL	
			END
		END
	ELSE
		BEGIN
		TIMEROFF SUS_11_TMR
		TIMERCLR SUS_11_TMR
		TIMEROFF SUS_12_TMR
		TIMERCLR SUS_12_TMR
		END

      RETURN

;==============================================================================
;TB.2.1.9.2.54		BODY FEED LINE FLUSH CHECK
;==============================================================================
BODFEEDLINEFLUSHCHK:

	IF( (BF_LINE_PACK_STARTED_FG) | (BODYFEED_FLUSH_DONE_FG) )THEN		;tta001
		RETURN								;tta001

	;Body Feed line flush status.

;	IF (STEP_TMR >= RECIRC_FLUSH_TIME) & (BODYFEED_SEL = 1) THEN	 ;JMS003						 
;	   IF (!BODYFEED_FLUSH_DONE_FG) THEN									 ;JMS003

;	EXPR6 = (STEP_TMR >= RECIRC_FLUSH_TIME) & (BODYFEED_SEL = 1)	;JMS003
	EXPR6 = (BF_FLUSH_TIMER >= RECIRC_FLUSH_TIME) & (BODYFEED_SEL = 1)	;JMS003
	EXPR6 = EXPR6 & (!BODYFEED_FLUSH_DONE_FG)			;JMS003
	EXPR7 = (BODYFEED_SEL = 0) & (!BODYFEED_FLUSH_DONE_FG)		;JMS003
;	EXPR7 = EXPR7|((BF_LINE_PACKED_FG = 0)&(BODYFEED_FLUSH_DONE_FG = 0)&(BODYFEED_SEL = 1));VCM053
	EXPR7 = EXPR7|((BF_LINE_PACKED_FG = 1)&(BODYFEED_FLUSH_DONE_FG = 0)&(BODYFEED_SEL = 1)&(BF_FLUSH_TIMER >= RECIRC_FLUSH_TIME))
	EXPR8 = ( COMPAR(SA_STATUS, "CIRC TO FEED",12,EQ) | COMPAR(SA_STATUS, "RECIRC",6,EQ) )	;tta001
	EXPR9 = (SA_STATE = 18)						;Sluice			;tta001
	EXPR9 = EXPR9 | ((SA_STATE = 12)&(!BODYFEED_FLUSH_DONE_FG))	;Sluice OR CIRC TO FEED ;VCM053			;tta001

;start tta001
	IF (EXPR6 & EXPR8) | EXPR7 | EXPR9	THEN
		BEGIN					
		IF(BF_FLUSH_TIMER >= RECIRC_FLUSH_TIME)THEN
			BEGIN
			BODYFEED_FLUSH_DONE_FG = 0	
			SA_STEP_INT = 1			
			END				
		IF(!BODYFEED_FLUSH_DONE_FG)THEN		
			BEGIN
			BODYFEED_FLUSH_STARTED_FG = 1	
			TIMERCLR BF_FLUSH_TIMEOUT_TMR ;VCM062
			TIMERON BF_FLUSH_TIMEOUT_TMR ;VCM062
			END
		END					
;end tta001

;tta001	IF EXPR6 | EXPR7 THEN														 ;JMS003
;tta001		BEGIN
;tta001		GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
;tta001		GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
;tta001		GOSUB O5XV231			;OPEN BOD_FEED_DIL_FLUSH_VLV
;tta001		WAIT 3				;acj004
;tta001		GOSUB O606P34			;START BOD_FEED_PMP
;tta001		POL_BF_LINE_FLUSH_ON_PTR = 1	;ldk032
;tta001		SA_MESSAGE = "BODY FEED FLUSH"
;tta001		PRINT LOG_ADI, "FLUSH BODY FEED LINE"            ;JMS002
;tta001
;tta001		WAIT BODYFEED_FLUSH_TIME	; bodyfeed flush time
;tta001
;tta001		GOSUB C606P34			;STOP BOD_FEED_PMP
;tta001		GOSUB C5XV231			;CLOSE BOD_FEED_DIL_FLUSH_VLV
;tta001		GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV
;tta001		GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
;tta001		POL_BF_LINE_FLUSH_ON_PTR = 0	;ldk032
;tta001
;tta001		BODYFEED_FLUSH_DONE_FG = 1	; bodyfeed flush has occurred
;tta001		SA_MESSAGE = " "
;tta001		END

;start tta001
	IF (BODYFEED_FLUSH_STARTED_FG = 1) THEN
		BEGIN
 		IF (!BODYFEED_FLUSH_DONE_FG & SA_STEP_INT = 1) THEN		;Substep 1 - just init
			BEGIN	
			INIT_DIL_BFLINE_VOL = DIL_BFLINE_FLOW_TOT:AI_MEAS
			TIMEROFF BF_FLUSH_TIMER
			TIMERCLR BF_FLUSH_TIMER	
			IF(EXPR9)THEN
				SA_STEP_INT = 3	;jump to the drain step
			ELSE			
			SA_STEP_INT = SA_STEP_INT + 1
;VCM049			TIMEROFF BF_CNTRL_DELAY_TMR
;VCM049			TIMERCLR BF_CNTRL_DELAY_TMR
			PRINT LOG_ADI, "BODYFEED LINE FLUSH STARTED"
			END

		IF (SA_STEP_INT = 2) THEN		;Substep 2 - flush to filter
			BEGIN
			BODYFEED_FLOW_TOT:IOS_TG:1 = 0
;			POL_BODYFEED_ACTIVE_PTR = 1	;Bodyfeed Addtion 0=not active, 1=active	;mw002
			POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw002
			GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
			GOSUB O6XV350			;OPEN BOD_FEED_BLK_VLV
			GOSUB C6XV351			;CLOSE BOD_FEED_DRAIN_VLV
			GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
			GOSUB O5XV231			;OPEN BOD_FEED_DIL_FLUSH_VLV

			WAIT 3				;acj004

			PUTMANL BODYFEED_VFD_CONTROL_PTR
;VCM063			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_MAX
			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_FLUSH_OUT  ;VCM063
	
			GOSUB O606P34				;START BOD_FEED_PMP
			DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 1
			IF (BF_LINE_PACKED_FG = 1) THEN ;VCM049	try to stop extra print statements
				PRINT LOG_ADI, "FLUSH BODY FEED LINE TO FILTER"
			BF_LINE_PACKED_FG = 0
;mw002			POL_BF_LINE_FLUSH_ON_PTR = 1

			SA_MESSAGE = "BODY FEED FLUSH FILTER"

			EXPR6 = (BF_FLUSH_TIMEOUT_TMR < 600) ;VCM062

			IF (!(DIL_BFLINE_FLOW_TOT:AI_MEAS >= (INIT_DIL_BFLINE_VOL + BODYFEED_TO_DRN_VOL))) & EXPR6 THEN		;pack volume not totalized
				BEGIN
				SA_TMP_FLT = ((INIT_DIL_BFLINE_VOL + BODYFEED_TO_DRN_VOL) - DIL_BFLINE_FLOW_TOT:AI_MEAS)	;calculate remaining volume
				SA_TMP_INT = FLTCNV(SA_TMP_SG,SA_TMP_FLT,4,1)
				SA_TMP_INT = APPEND(SA_3_MESSAGE, "BF FLUSH VOL = ", SA_TMP_SG)
				END
			ELSE
				BEGIN
				IF (SA_STEP_COMPLETE_FG = 0) THEN
					BEGIN
					SA_TMP_FLT = (DIL_BFLINE_FLOW_TOT:AI_MEAS - INIT_DIL_BFLINE_VOL )	
               PRINT LOG_ADI, "BF FLUSH VOL = %2.1f ", SA_TMP_FLT  ;VCM055
					IF !EXPR6 THEN
						PRINT LOG_ADI, "BF FLUSH ENDED BY TIMEOUT"  ;VCM062
					END
				SA_STEP_COMPLETE_FG = 1
				END
			END

		ELSE IF (SA_STEP_INT = 3) THEN		;Substep 3 - flush to drain
			BEGIN
			SA_MESSAGE = "BODY FEED FLUSH DRAIN"
			PRINT LOG_ADI, "FLUSH BODY FEED LINE TO DRAIN"
			BODYFEED_FLOW_TOT:IOS_TG:1 = 0
			GOSUB C6XV322
			GOSUB O6XV351
			GOSUB O6XV350
			GOSUB C5XV330
			GOSUB O5XV231
			POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw002
			PUTMANL BODYFEED_VFD_CONTROL_PTR
;VCM063			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT_MAX
			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_FLUSH_OUT  ;VCM063
			WAIT 2          
			GOSUB O606P34            ;Start body feed pump

			DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 1

			WAIT BF_DRAIN_TIME

;mw002			POL_BF_LINE_FLUSH_ON_PTR = 0
			BODYFEED_FLUSH_DONE_FG = 1	;bodyfeed flush has occurred
			TIMEROFF BF_FLUSH_TIMEOUT_TMR ;VCM062
			TIMERCLR BF_FLUSH_TIMEOUT_TMR ;VCM062
			BODYFEEDFLUSH_REQUIRED_FG = 0
			TIMEROFF NEED_FLUSH_DELAY_TMR
			TIMERCLR NEED_FLUSH_DELAY_TMR
			BODYFEED_FLUSH_STARTED_FG = 0
			PRINT LOG_ADI, "BODYFEED LINE FLUSH COMPLETED"
			SA_STEP_COMPLETE_FG = 1
			END


SKIPFLUSHSTEP:

		IF(SA_STEP_COMPLETE_FG)THEN
			BEGIN
			GOSUB STOPBODYFEED
			IF (INSTR(SA_3_MESSAGE, "BF FLUSH"))THEN
				SA_3_MESSAGE = " "
			SA_STEP_COMPLETE_FG = 0
			SA_STEP_INT = SA_STEP_INT + 1
			SA_MESSAGE = " "
			END
		END
;end tta001

	RETURN

;==============================================================================
;TB.2.1.9.2.55		UPDATE SKID (UPDSKD)
;==============================================================================

UPDSKD:
	IF ((STRLEN(ERROR_STRING) != 0) & (LAST_LAMP_STATE != YELLOW)) THEN
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, YELLOW
		LAST_LAMP_STATE = YELLOW
		END
	ELSE IF ((STRLEN(ERROR_STRING) = 0) & (LAST_LAMP_STATE != GREEN )) THEN
		BEGIN
		LAMP LAMP_ADI, LAMP_NUMBER, GREEN
		LAST_LAMP_STATE = GREEN
		END
	SA_MESSAGE = ERROR_STRING
	ERROR_STRING = ""
	RETURN

;==============================================================================
;			TRANSITION T19 CONDITION CHECK
;==============================================================================

T19COND:

;(((FIL_DIFF_PRESS >= DIFF_PRESS_HI_LIM FOR DIFF_PRESS_HI_TIME) &
;(FILTER_RUN_SEL != 1)) |
;((FIL_DIFF_PRESS >= DIFF_PRESS_OS_LIM FOR DIFF_PRESS_HI_TIME) &
;(FILTER_RUN_SEL = 1)) |

	GOSUB FILDP
;acj005	IF (FILTER_RUN_SEL != 1) THEN
	IF (FILTER_RUN_SEL != 2) THEN	;acj005
		T19_COND = TEMP_FG3
	ELSE
;acj006		T19_COND = TEMP_FG
		T19_COND = 0		;acj006

	IF (T19_COND) THEN
		ERROR_STRING = "HI DIFFERENTIAL PRESSURE"

;((FIL_FEED_TNK_LVL < FIL_FEED_TNK_MIN_LVL FOR FIL_FEED_MIN_LVL_TIME) &
;(FIL_FEED_TNK_LVL_MODE != DRAIN)) |
;((FIL_FEED_TNK_LVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME) &
;(FIL_FEED_TNK_LVL_MODE = DRAIN)) |

	GOSUB FEEDTNKLO
	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT != S_1) THEN		;DRAIN
		T19_COND = T19_COND | TEMP_FG2
	ELSE
		T19_COND = T19_COND | TEMP_FG

;((BEER_TURBIDITY > TURBIDITY_HI_LIM FOR HI_TURBIDITY_TIME) &
;(!TURBIDITY_OVERRIDE)) |
;Need a different turbidity setpoint for circ to feed vs Recirc
	SUS_COND = (BEER_TURBIDITY:AI_INVL > TURBIDITY_HI_LIM)
	SUS_TIME = HI_TURBIDITY_TIME
	ASSIGN TEMP_PTR = SUS_3_TMR
	GOSUB SUSCOND
	TEMP_FG = (TEMP_FG & (!TURBIDITY_OVERRIDE))
	IF (TEMP_FG) THEN
		BEGIN
		ERROR_STRING = "HI BEER TURBIDITY"
		T19_COND = 1
		END

	TEMP_FG = (BEER_TURBIDITY:AI_INVL > 6.0)
	TEMP_FG = (TEMP_FG & (!TURBIDITY_OVERRIDE))
	IF (TEMP_FG) THEN
		BEGIN
		ERROR_STRING = "BEER TURBIDITY > 6PPM"
		T19_COND = 1
		END


;(((XFER_TNK_LVL > XFER_TNK_LVL_MAX FOR XFER_TNK_MAX_TIME) |
;(XFER_TNK_LVL_MODE = OFF) | (XFER_TNK_HI_LVL = HI)) &
;((SWING_SEL <= S_2) | (UNIT_NUMBER != U_FF1))) |
	ASSIGN TEMP_PTR = SUS_6_TMR
	IF ((SWING_SEL:DEV_STAT <= S_2) | (UNIT_NUMBER != U_FF1)) THEN
		BEGIN
;ldk028		SUS_COND = (XFER_TNK_LVL:AI_INVL > XFER_TNK_LVL_MAX)
		SUS_COND = (XFER_TNK_LVL:AI_MEAS > XFER_TNK_LVL_MAX)	;ldk028
		SUS_TIME = XFER_TNK_MAX_TIME
		GOSUB SUSCOND
		TEMP_FG = TEMP_FG | (XFER_TNK_HI_LVL:DEV_STAT = S_1)
		IF (XFER_TNK_LVL_MODE:DEV_STAT = S_0) THEN
			BEGIN
			ERROR_STRING = "XFER TANK MODE IS OFF"
			T19_COND = 1
			END

		IF (XFER_TNK_HI_LVL:DEV_STAT = S_1) THEN
			ERROR_STRING = "XFER TANK HI LEVEL PROBE ON"
		END
;(((LHX_TNK_LVL > LHX_TNK_LVL_MAX FOR LHX_TNK_MAX_TIME) |
;(LHX_TNK_LVL_MODE = OFF) | (LHX_TNK_HI_LVL = HI)) &
;(SWING_SEL >= S_3) & (UNIT_NUMBER = U_FF1)) |
	ELSE
		BEGIN
;ldk028		SUS_COND = (LHX_TNK_LVL:AI_INVL > LHX_TNK_LVL_MAX)
		SUS_COND = (LHX_TNK_LVL:AI_MEAS > LHX_TNK_LVL_MAX)	;ldk028
		SUS_TIME = LHX_TNK_MAX_TIME
		GOSUB SUSCOND
		TEMP_FG = TEMP_FG | (LHX_TNK_HI_LVL:DEV_STAT = S_1)
		IF (LHX_TNK_LVL_MODE:DEV_STAT = S_0) THEN
			BEGIN
			ERROR_STRING = "LHX TANK MODE IS OFF"
			T19_COND = 1
			END
		END
	T19_COND = T19_COND | TEMP_FG

;(FIL_FEED_TNK_LVL_MODE = OFF) |
	IF (FIL_FEED_TNK_LVL_MODE:DEV_STAT = S_0) THEN
		BEGIN
		ERROR_STRING = "FEED TANK MODE IS OFF"
		T19_COND = 1
		TEMP_FG3 = 1
		END

;(FILTER_RUN_SEL = 2) |
;acj005	T19_COND = T19_COND | (FILTER_RUN_SEL = 2)
	T19_COND = T19_COND | (FILTER_RUN_SEL = 1)	;acj005

;(FIL_FEED_FLOW IN DEV ALARM) |
	IF AND(FIL_FEED_FLOW:AI_CURAL, T_6) THEN
		BEGIN
		ERROR_STRING = "FEED FLOW DEV ALARM"
		T19_COND = 1
		END

;(HOPS_ERROR))
	IF (HOPS_ERROR) THEN
		BEGIN
      IF (HOPS_SEL = 1) & (AND('8619LSL1':DEV_STAT,S_1)) THEN ;VCM011
			ERROR_STRING = "HYDROHOPS LINE EMPTY"
       ELSE
			ERROR_STRING = "HOPS ERROR"
		T19_COND = 1
		END

;bmf000 begin
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ) & (HOPS_SEL = 2)) THEN
	IF (HOPS_SEL = 2) THEN		;acj016
		BEGIN                  
                EXPR6 = (SPIREB_HOPS_TOT_PTR:AI_MEAS < SPIRE_B_HOPS_LB)
		EXPR7 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"INJECT",5,NE)) 
		EXPR8 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"READY",5,NE)) 
		EXPR9 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"ERROR",5,NE)) 
		EXPR10 = (STRLEN(SPIREB_HOPS_SEQ_STATUS_PTR) > 2) ;in hold or fail
		IF EXPR6 &((EXPR7 & EXPR8 & EXPR9) | EXPR10) THEN
			BEGIN
			IF (SPIREB_HOPS_INJECT_RATIO_PTR != 0) THEN
				BEGIN
				ERROR_STRING = "SPIRE B NOT READY TO INJECT"
				T19_COND = 1
				END
			END
		END
;bmf000 end
   ;VCM019 BEGIN
;	CIRC_TO_PMP_VLV	==	'8606XV325'	; EPN		Final Filter Circulate To Pump Valve
;	CIRC_TO_TNK_VLV	==	'8606XV326'	; EPN		Final Filter Circulate To Tank Valve
;	LEAF_DRAIN_VLV		==	'8606XV307'	; EPN		Final Filter Leaf Drain Valve
   EXPR6 = AND(CIRC_TO_PMP_VLV:DEV_MODE,M_2)
   EXPR7 = AND(CIRC_TO_TNK_VLV:DEV_MODE,M_2)
   EXPR8 = AND(LEAF_DRAIN_VLV:DEV_MODE,M_2)
   IF ((T19_COND = 0) & (EXPR6 | EXPR7 | EXPR8)) THEN
      BEGIN
      IF EXPR6 THEN
         ERROR_STRING = "CIRC TO PUMP VLV IN OVERRIDE"
      IF EXPR7 THEN
         ERROR_STRING = "CIRC TO FEED TNK VLV OVERRIDE"
      IF EXPR8 THEN
         ERROR_STRING = "LEAF DRAIN VALVE IN OVERRIDE"
      T19_COND = 1
      END
   ;VCM019 END

;ldk026	IF (UNIT_NUMBER = U_FF3) & (COMPAR(TRAP_SA_STATUS_PTR, "RECIRCULATE", 11, EQ)) THEN		;ldk025
	IF (COMPAR(TRAP_SA_STATUS_PTR, "RECIRCULATE", 11, EQ)) THEN					;ldk026
		BEGIN											;ldk025
		ERROR_STRING = "TRAP FILTER IN RECIRC"							;ldk025
		T19_COND = 1										;ldk025
		END											;ldk025

	RETURN

;==============================================================================
;		DILUENT PUSH FEED LINE BEFORE BLOWBACK  VCM026W
;==============================================================================
DILPUSHFEED:

	IF (SA_STATE = 13) THEN  ;on stream
		BEGIN
		GOSUB O6XV309
		GOSUB O6XV318
		GOSUB O06XV31
		GOSUB O06XV363     ;JMS007
		GOSUB O6XV324
		GOSUB C6XV317
		END

	IF (SA_STATE = 14) THEN  ;recirc
		BEGIN
		FIL_FLOW_TOT:IOS_TG:1 = 1
		GOSUB O6XV309
		GOSUB O6XV318
		GOSUB O6XV324
		GOSUB O6XV318
		GOSUB C6XV325
		GOSUB O06XV31
		GOSUB O06XV363     ;JMS007
		GOSUB C6XV317
		END

		TIMERCLR DILPUSHFEED_TMR
		TIMERON DILPUSHFEED_TMR

		DILPUSHFEED_START = FIL_FLOW_TOT:AI_MEAS


DILPUSHFEEDSS:
		GOSUB CONTCHK
		IF (FIL_FLOW_TOT:AI_MEAS >(DILPUSHFEED_START + DILPUSHFEED_BBLS))|(DILPUSHFEED_TMR > 15) THEN
			BEGIN
			GOSUB C06XV31
         GOSUB C06XV363       ;JMS007
			FIL_FLOW_TOT:IOS_TG:1 = 0
			PRINT LOG_ADI,"DILPUSHFEED START = %i",DILPUSHFEED_START
			PRINT LOG_ADI,"DILPUSHFEED END = %5.1f",FIL_FLOW_TOT:AI_MEAS
			TEMP_INT = DILPUSHFEED_TMR
			PRINT LOG_ADI,"DILPUSHFEED SECONDS = %i",TEMP_INT
			TIMEROFF DILPUSHFEED_TMR
			TIMERCLR DILPUSHFEED_TMR
			RETURN
			END

		GOTO DILPUSHFEEDSS

;==============================================================================
;			SUSTAINED CONDITION CHECK
;==============================================================================

SUSCOND:

	IF (SUS_COND) THEN
		TIMERON TEMP_PTR
	ELSE
		BEGIN
		TIMEROFF TEMP_PTR
		TIMERCLR TEMP_PTR
		END
	IF (TEMP_PTR > SUS_TIME) THEN
		TEMP_FG = 1
	ELSE
		TEMP_FG = 0

	RETURN

;==============================================================================
;		FILTER DIFFERENTIAL PRESSURE SUSTAINED CONDITION CHECK
;==============================================================================

FILDP:

;(((FIL_DIFF_PRESS >= DIFF_PRESS_HI_LIM FOR DIFF_PRESS_HI_TIME) &
;(FILTER_RUN_SEL != 1)) |
	SUS_TIME = DIFF_PRESS_HI_TIME

;acj006	SUS_COND = (FIL_DIFF_PRESS:AI_INVL >= DIFF_PRESS_HI_LIM)
	SUS_COND = (FIL_DIFF_PRESS:AI_INVL >= DIFF_PRESS_LIM)	;acj006
	ASSIGN TEMP_PTR = SUS_1_TMR
	GOSUB SUSCOND
	TEMP_FG3 = TEMP_FG

;((FIL_DIFF_PRESS >= DIFF_PRESS_OS_LIM FOR DIFF_PRESS_HI_TIME) &
;(FILTER_RUN_SEL = 1)) |
;acj006	SUS_COND = (FIL_DIFF_PRESS:AI_INVL >= DIFF_PRESS_OS_LIM)
;acj006	ASSIGN TEMP_PTR = SUS_2_TMR
;acj006	GOSUB SUSCOND

	RETURN

;==============================================================================
;		FILTER FEED TANK LEVEL LOW SUSTAINED CONDITION CHECK
;==============================================================================

FEEDTNKLO:

;((FIL_FEED_TNK_LVL < FIL_FEED_TNK_MIN_LVL FOR FIL_FEED_MIN_LVL_TIME) &
;(FIL_FEED_TNK_LVL_MODE != DRAIN)) |
	SUS_TIME = FIL_FEED_MIN_LVL_TIME

;ldk028	SUS_COND = (FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_MIN_LVL)
	SUS_COND = (FIL_FEED_TNK_LVL:AI_MEAS < FIL_FEED_TNK_MIN_LVL)	;ldk028
	ASSIGN TEMP_PTR = SUS_4_TMR
	GOSUB SUSCOND
	TEMP_FG2 = TEMP_FG

;((FIL_FEED_TNK_LVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME) &
;(FIL_FEED_TNK_LVL_MODE = DRAIN)) |
;ldk028	SUS_COND = (FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_DRAIN_LVL)
	SUS_COND = (FIL_FEED_TNK_LVL:AI_MEAS < FIL_FEED_TNK_DRAIN_LVL)	;ldk028
	ASSIGN TEMP_PTR = SUS_5_TMR
	GOSUB SUSCOND

	RETURN

;==============================================================================
;		FILTER BLOWBACK DIFFERENTIAL PRESSURE SUSTAINED CONDITION CHECK
;==============================================================================
BLOWBCKDP:
		 ; If DP >= 45 and room in feed tank then blow back
;VCM074	SUS_COND = FIL_DIFF_PRESS:AI_INVL >= (DIFF_PRESS_BLOWBACK_LIM - DP_OFFSET)
;VCM074	SUS_COND = SUS_COND & (FIL_FEED_TNK_LVL:AI_MEAS <= 40.0)   ;VCM074
;VCM074	SUS_TIME = DIFF_PRESS_BLOWBACK_TIME				
;VCM074	ASSIGN TEMP_PTR = SUS_12_TMR						
;VCM074	GOSUB SUSCOND					
;VCM074	IF (TEMP_FG) THEN				
;VCM074		BEGIN
;VCM074		PRINT LOG_ADI, "BLOWBACK ON DP > 45 WITH ROOM IN FEED TANK "	;VCM074
;VCM074		RETURN
;VCM074		END

;VCM074 - not sure what this does with the last line commented out
	SUS_COND = FIL_DIFF_PRESS:AI_INVL >= (DIFF_PRESS_BLOWBACK_LIM - DP_OFFSET)	;ldk030
	SUS_TIME = DIFF_PRESS_BLOWBACK_TIME						;ldk030
	ASSIGN TEMP_PTR = SUS_12_TMR							;ldk030
	GOSUB SUSCOND									;ldk030
;JMS006	SDE_COMM_HIGH_DP_PTR = TEMP_FG							;ldk030

;((FIL_DIFF_PRESS >= DIFF_PRESS_BLOWBACK_LIM FOR DIFF_PRESS_BLOWBACK_TIME)

	SUS_COND = (FIL_DIFF_PRESS:AI_INVL >= DIFF_PRESS_BLOWBACK_LIM)
	SUS_TIME = DIFF_PRESS_BLOWBACK_TIME
	ASSIGN TEMP_PTR = SUS_2_TMR
	GOSUB SUSCOND

	IF (TEMP_FG) THEN					;acj006
		PRINT LOG_ADI, "BLOWBACK ON HI DIFF PRESSURE"	;acj006

;ldk030	SUS_COND = FIL_DIFF_PRESS:AI_INVL >= (DIFF_PRESS_BLOWBACK_LIM - DP_OFFSET)	;ehb029
;ldk030	SUS_TIME = DIFF_PRESS_BLOWBACK_TIME					;ehb029
;ldk030	ASSIGN TEMP_PTR = SUS_12_TMR						;ehb029
;ldk030	GOSUB SUSCOND								;ehb029
;ldk030	SDE_COMM_HIGH_DP_PTR = TEMP_FG						;ehb029
;tta001 start
	; Check to see if max BodyFeed Transfer has occured before blowdown
	TOTAL_BODYFEED_LBS_ACTUAL = (BODYFEED_FLOW_TOT:AI_MEAS)
	IF (TOTAL_BODYFEED_LBS_ACTUAL >= BODYFEED_MAX_BLOWBACK_LIM) THEN
		BEGIN
		PRINT LOG_ADI, "BLOWBACK ON HI TRANSFER AMOUNT"
		TEMP_FG = 1
		END

;tta001 end
	RETURN

;==============================================================================
;		LOG PERFORMANCE DATA AT BLOWBACK ;VCM071
;==============================================================================
LOGBBDATA:

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		SA_TMP_SG = "ZZ3"
	IF (COMPAR(UNIT_SG,"POL2",4,EQ)) THEN
		SA_TMP_SG = "ZZ4"
	IF (COMPAR(UNIT_SG,"POL3",4,EQ)) THEN
		SA_TMP_SG = "ZZ5"

;	IF DUAL_PRECOAT_SELECTION_FG THEN
;		PRECOAT_MODE_SG = "DUAL PRECOAT"
;	  ELSE
;		PRECOAT_MODE_SG = "SINGLE PRECOAT"


;	FILTER_DP_FL = FIL_DIFF_PRESS:AI_MEAS
	SA_TMP_FLT = FIL_FLOW_TOTD:AI_MEAS
	PRINT LOG_ADI, "%p BEER DAILY TOT  = %5.1f GALS", SA_TMP_SG, SA_TMP_FLT
   PRINT LOG_ADI, "%p ON STREAM TIMER = %i MINUTES",SA_TMP_SG, FIL_OS_TMR;VCM018
   PRINT LOG_ADI, "%p RECIRC TIMER = %i MINUTES",SA_TMP_SG, FIL_RECIRC_TMR;VCM061
	PRINT LOG_ADI, "%p %p DP AT BLOW BACK = %5.2f PSI",SA_TMP_SG, BRAND_ID,FILTER_DP_FL	;mw000
	SA_TMP_FLT = BODYFEED_FLOW_TOT:AI_MEAS
	PRINT LOG_ADI, "%p BEFORE RESET BODYFEED = %4.1f GALS", SA_TMP_SG, SA_TMP_FLT
 IF (FIL_FLOW_TOTD:AI_MEAS > 0) THEN
	BEGIN
	BDYFD_RATIO = (SA_TMP_FLT / FIL_FLOW_TOTD:AI_MEAS)
   AGE_BBL_DE_USAGE_RATIO_FL = ((SA_TMP_FLT + PRECOAT_TOTAL_FL)/(FIL_FLOW_TOTD:AI_MEAS)) ;VCM078 ZFL412
	PR_BBL_DE_USAGE_RATIO_FL =((SA_TMP_FLT + PRECOAT_TOTAL_FL)/(FIL_FLOW_TOTD:AI_MEAS * RECIPE_TARGET_EXPANSION))
	END                                                                            ;VCM078 ZFL413 RFL035
	PRINT LOG_ADI, "%p BODYFEED ONLY DE RATIO = %2.2f LBS/BBL", SA_TMP_SG, BDYFD_RATIO   ;VCM078
	PRINT LOG_ADI, "%p AGING BBLS PC+BF DE RATIO = %2.2f LBS/BBL", SA_TMP_SG, AGE_BBL_DE_USAGE_RATIO_FL  ;VCM078
	PRINT LOG_ADI, "%p PR BBLS PC+BF DE RATIO = %2.2f LBS/BBL", SA_TMP_SG, PR_BBL_DE_USAGE_RATIO_FL   ;VCM078
	SA_TMP_FLT = BEER_TURBIDITY:AI_MEAS
	PRINT LOG_ADI, "%p BLOWBACK TURBIDITY = %4.1f PPM", SA_TMP_SG, SA_TMP_FLT
	SA_TMP_FLT = INLINE_AVG_DO:AI_MEAS
	PRINT LOG_ADI, "%p %5.2f AVG D.O.", SA_TMP_SG, SA_TMP_FLT
   PRINT LOG_ADI, "%p INITIAL DP = %2.1f PSI",SA_TMP_SG, INITIAL_DP;VCM061
   PRINT LOG_ADI, "%p INITIAL DO = %4.1f PPB",SA_TMP_SG, INITIAL_DO;VCM061
   PRINT LOG_ADI, "%p INITIAL TURB = %3.1f PPM",SA_TMP_SG, INITIAL_TURB;VCM061
   PRINT LOG_ADI, "%p  PRECOAT MODE = %p",SA_TMP_SG, PRECOAT_MODE_SG;VCM071
	PRINT LOG_ADI, "%p %p PRECOAT = %5.2f GALS",SA_TMP_SG, BRAND_ID,PRECOAT_TOTAL_FL		;mw000
   PRINT LOG_ADI, "%p BDYFD MU MEDIUM = %i PCT",SA_TMP_SG, BDYFD_MED_PCT
   PRINT LOG_ADI, "%p BDYFD MU COARSE = %i PCT",SA_TMP_SG, BDYFD_CRS_PCT

	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		BEGIN
		PRINT LOG_ADI, "%p SUPPLY TANKS = %p %p",SA_TMP_SG,POL1_AGE_TNK1_SG_ALLOF5,POL1_AGE_TNK2_SG_ALLOF5 ;VCM071
		PRINT LOG_ADI, "%p DESTINATION TANK = %p",SA_TMP_SG,POL1_PRT_SG_ALLOF5 ;VCM071
		TRNGRPSNP "POL1_PERF"
		END

	IF (COMPAR(UNIT_SG,"POL2",4,EQ)) THEN
		BEGIN
		PRINT LOG_ADI, "%p SUPPLY TANKS = %p %p",SA_TMP_SG,POL2_AGE_TNK1_SG_ALLOF5,POL2_AGE_TNK2_SG_ALLOF5 ;VCM071
		PRINT LOG_ADI, "%p DESTINATION TANK = %p",SA_TMP_SG,POL2_PRT_SG_ALLOF5 ;VCM071
		TRNGRPSNP "POL2_PERF"
		END

	IF (COMPAR(UNIT_SG,"POL3",4,EQ)) THEN
		BEGIN
		PRINT LOG_ADI, "%p SUPPLY TANKS = %p %p",SA_TMP_SG,POL3_AGE_TNK1_SG_ALLOF5,POL3_AGE_TNK2_SG_ALLOF5 ;VCM071
		PRINT LOG_ADI, "%p DESTINATION TANK = %p",SA_TMP_SG,POL3_PRT_SG_ALLOF5 ;VCM071
		TRNGRPSNP "POL3_PERF"
		END

	RETURN

;==============================================================================
;		BEER TURBIDITY OK SUSTAINED CONDITION CHECK
;==============================================================================

SUSTURB:

;((BEER_TURBIDITY < TURBIDITY_SETPOINT FOR TURBIDITY_TIME) |

;TGD004	SUS_COND = (BEER_TURBIDITY:AI_INVL < TURBIDITY_SETPOINT)
;	SUS_TIME = TURBIDITY_TIME
;	ASSIGN TEMP_PTR = SUS_9_TMR
;	GOSUB SUSCOND
	;Need to make sure the turbidity is less than the high limit for sustained time - begin jaz000
	IF (SA_STATE = 11) THEN					;Pre-coat Circ
		BEGIN
		SUS_COND = (BEER_TURBIDITY:AI_INVL < PRECOAT_TURBIDITY_HI_LIM)
		SUS_TIME = TURBIDITY_TIME		;10 seconds
		ASSIGN TEMP_PTR = SUS_9_TMR
		GOSUB SUSCOND
		END
		;endjaz000
	ELSE									;jaz000
		BEGIN								;jaz000
		SUS_COND = (BEER_TURBIDITY:AI_INVL >= TURBIDITY_HI_LIM)   ;TGD004
		SUS_TIME = HI_TURBIDITY_TIME
		ASSIGN TEMP_PTR = SUS_9_TMR
		GOSUB SUSCOND
		END								;jaz000

	RETURN

;==============================================================================
;		CHECK CIP PROXIMITY SWITCHED
;==============================================================================

CIPPROX:
	IF (FILL_CSR_PROX:DIN_VAL) THEN			;SET
		BEGIN
		TEMP_INT = APPEND(FAIL_MSG,FILL_CSR_PROX_SG," CONNECTED")
		GOTO FAIL
		END

	IF (OUT_CSR_PROX:DIN_VAL) THEN			;SET
		BEGIN
		TEMP_INT = APPEND(FAIL_MSG,OUT_CSR_PROX_SG," CONNECTED")
		GOTO FAIL
		END

	IF (TANK_CSS_PROX:DIN_VAL) THEN			;SET
		BEGIN
		TEMP_INT = APPEND(FAIL_MSG,TANK_CSS_PROX_SG," CONNECTED")
		GOTO FAIL
		END

	IF (FEED_CSS_PROX:DIN_VAL) THEN			;SET
		BEGIN
		TEMP_INT = APPEND(FAIL_MSG,FEED_CSS_PROX_SG," CONNECTED")
		GOTO FAIL
		END

	IF (PRECOAT_CSS_PROX:DIN_VAL) THEN		;SET
		BEGIN
		TEMP_INT = APPEND(FAIL_MSG,PRECOAT_CSS_PROX_SG," CONNECTED")
		GOTO FAIL
		END
	RETURN

;==============================================================================
;		STOP HOPS CONTROL
;==============================================================================

STOPHOPS:
	FAIL_MSG = "HOPS PUMP FAIL OFF"		;acj000
	TURNOFF '8619DO1'	;Hops pump	;acj000
;acj002 begin
;acjxyz	IF (UNIT_NUMBER = U_FF1) THEN		;acj002
;acjxyz		TURNOFF 'N10209'		;acj002
;acjxyz	ELSE IF (UNIT_NUMBER = U_FF2) THEN	;acj002
;acjxyz		TURNOFF 'N10210'		;acj002
;acjxyz	ELSE					;acj002
;acjxyz		TURNOFF 'N10211'		;acj002
;acj002 end
	GOSUB C19XV31		;CLOSE HOPS_IN_VLV
	PUTMANL HOPS_CNTLR			; stop hops inlt ctrl
	PUTOUT HOPS_CNTLR, 0			;0% OPEN
	HOPS_TOT:IOS_TG:1 = 0		; hold hops totalizer
   HOPS_LB_CNTLR:AI_DVLIM = 0   ;RDK003
	REPORT_TRIG6_FG = 1		;Hops pump stoped
	HOPS_ON_FG = 0
	HOPS_TYPE_PLC_PTR = 0			;0=n/a;1=Hydrohops;2=Spire-B hops	;mw000
	RETURN

;==============================================================================
;		STOP SPIRE B HOPS CONTROL		;joh009
;==============================================================================

STOPSPIREB:

;bmf000 begin
	;tell the hops program to stop injecting.  Wait until the hops program
	; has left the injecting state or has gone to fail or hold.  This check
	; ensures that the hops program has received the stop injection request.
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ)) THEN
;acj016	    BEGIN
		IF (SPIREB_HOPS_TOT_PTR:AI_MEAS >= SPIRE_B_HOPS_LB)&(HOPS_SEL = 2) THEN 
			HOPS_HOT_FLUSH_CMD_PTR = 1 
	    HOPS_INJECT_ENABLE_FG_PTR = 0		
            SPIRE_B_HOPS_ON_FG = 0
	    TIMERCLR HOPS_WAIT_TMR
	    TIMERON HOPS_WAIT_TMR
SPIREBWAIT:
	    EXPR8 = (COMPAR(SPIREB_HOPS_SA_STATUS_PTR,"INJECT",5,EQ))
	    EXPR9 = (STRLEN(SPIREB_HOPS_SEQ_STATUS_PTR) < 2)
	    ;hops still in inject and not in hold or fail
	    IF (EXPR8 & EXPR9) THEN
	        BEGIN
		HOPS_INJECT_ENABLE_FG_PTR = 0		
		IF (HOPS_WAIT_TMR > HOPS_MAX_STOP_TIME) THEN		    
		     BEGIN
		     FAIL_MSG = "SPIRE B HOPS STOP FAILURE"
		     GOTO FAIL
                     END
		WAIT 1
		GOTO SPIREBWAIT
		END
            SPIRE_B_HOPS_ON_FG = 0
	HOPS_TYPE_PLC_PTR = 0			;0=n/a;1=Hydrohops;2=Spire-B hops	;mw000
	    TIMEROFF HOPS_WAIT_TMR
	    TIMERCLR HOPS_WAIT_TMR
;acj016	    END
;acj015	ELSE
;acj015	    BEGIN
;bmf000 end 
;acj015	TURNOFF '8619DO33'			;stop spire b injection pump
;acj015	GOSUB C19XV33				;set spire b valve to recirc
;acj015	PUTMANL SPIRE_B_HOPS_CNTLR		;stop hops inlt ctrl
;acj015	PUTOUT SPIRE_B_HOPS_CNTLR, 0		;0% OPEN
;acj015	SPIRE_B_HOPS_TOT:IOS_TG:1 = 0		;hold hops totalizer
;acj015	SPIRE_B_HOPS_TOTD:CAL_VCVL:1 = 0
;acj015        SPIRE_B_HOPS_LB_CNTLR:AI_DVLIM = 0 
;acj015	SPIRE_B_HOPS_ON_FG = 0
;acj015	    END		;bmf000

	RETURN

;==============================================================================
;		STOP BODYFEED
;==============================================================================

STOPBODYFEED:


;JMS005 START
;tta001	GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
;mw002	POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;ldk032 - moved from below
;tta001	GOSUB O5XV231			;OPEN BOD_FEED_DIL_FLUSH_VLV
;tta001	GOSUB O6XV322			;OPEN BOD_FEED_IN_VLV
;tta001	GOSUB O606P34			;START BOD_FEED_PMP	;acj006
;tta001	SA_MESSAGE = "BODY FEED FLUSH"
;tta001	PRINT LOG_ADI, "FLUSH BODY FEED LINE"            
;tta001	POL_BF_LINE_FLUSH_ON_PTR = 1	;ldk032
;tta001
;tta001	WAIT BODYFEED_FLUSH_TIME
;JMS005 END 

	IF (AND(BOD_FEED_PMP:DEV_STAT,S_1)) THEN		;RUNNING  VCM065
		BEGIN
		SA_TMP_FLT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1		;grab the current value to do the calculations	
		PRINT LOG_ADI, "STOP BF CONTROL: OUTPUT  = %3.2f",SA_TMP_FLT

		EXPR6 = (!BODYFEED_FLUSH_STARTED_FG & !BODYFEED_FLUSH_DONE_FG )
      EXPR6 = EXPR6 & ((SA_STATE = 12)|(SA_STATE = 13)|(SA_STATE = 14))  ;VCM087
		IF EXPR6  THEN
			BODYFEED_VFD_CNTRL_OUT = SA_TMP_FLT ;use the last value for STARTBODYFEED routine
		PRINT LOG_ADI, "SAVED STOP BF CONTROL: OUTPUT  = %3.2f",BODYFEED_VFD_CNTRL_OUT
		END

	BODYFEED_FLOW_TOT:IOS_TG:1 = 0 				;tta001
	DIL_BFLINE_FLOW_TOT:IOS_TG:1 = 0			;tta001
	GOSUB C606P34			;STOP BOD_FEED_PMP	;acj006

	PUTMANL BODYFEED_VFD_CONTROL_PTR			;tta001
	PUTOUT BODYFEED_VFD_CONTROL_PTR, 0			;tta001

	TIMEROFF BODYFEED_RUNNING_TMR 				;tta001
	BOD_FEED_PMP_ENABLE_FG = 0 				;tta001

	GOSUB C6XV322			;CLOSE BOD_FEED_IN_VLV
	GOSUB C6XV350			;CLOSE BOD_FEED_BLK_VLV		;tta001
	GOSUB C6XV351			;CLOSE BOD_FEED_DRAIN_VLV	;tta001
	GOSUB C5XV231			;CLOSE BOD_FEED_DIL_FLUSH_VLV
;acj006	GOSUB C606P34			;STOP BOD_FEED_PMP
	GOSUB C5XV330			;CLOSE BOD_FEED_TNK_OUT_VLV
;ldk032	 POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw001
	POL_BODYFEED_ACTIVE_PTR = 0	;Bodyfeed Addtion 0=not active, 1=active	;mw002
;mw002	POL_BF_LINE_FLUSH_ON_PTR = 0	;ldk032

	IF(SA_STEP_COMPLETE_FG) THEN			;tta001
		RETURN					;tta001

	RETURN

;acj000 begin
;==============================================================================	;acj000
;TB.2.1.9.2.56		CO2 PRESS TIMEOUT CHECK					;acj000
;==============================================================================	;acj000
							;acj000
CO2TIMEOUT:						;acj000
	IF (STEP_TMR > CO2_PRESS_FAIL_TIME) THEN	;acj000
		BEGIN					;acj000
		FAIL_MSG = "FILTER NOT PRESSURIZING"	;acj000
		GOTO FAIL				;acj000
		END					;acj000
	RETURN						;acj000

;==============================================================================	;acj000
;TB.2.1.9.2.57		FILTER FULL CHECK					;acj000
;==============================================================================	;acj000
							;acj000
FILTERFULLCHK:						;acj000
	IF (FILTER_HI_LVL:DEV_STAT = S_1) THEN	;Hi level	;acj000
		BEGIN					;acj000
		TIMERON TIMER1_TMR		;acj004
		FAIL_MSG = "FILTER HI LEVEL"		;acj000
		IF (TIMER1_TMR > 30) THEN	;acj004
			GOTO FAIL				;acj000
		END					;acj000
	RETURN						;acj000

;acj000 end
;acj005 begin
;==============================================================================	;acj005
;		RECIRC STEP TIME CHECK						;acj005
;==============================================================================	;acj005
									;acj005
STEPTIMECHK:								;acj005
	IF (STEP_TMR > MAX_RECIRC_TIME) THEN				;acj005
		BEGIN							;acj005
		GOSUB O6XV326						;acj005
		GOSUB C6XV325						;acj005
		END							;acj005
	RETURN								;acj005

;==============================================================================	;acj005
;		BODYFEED TANK AGITATOR CONTROL					;acj005
;==============================================================================	;acj005

BODAGIT:							;acj005
;	IF (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_AGIT_LVL) THEN	;acj005
;		GOSUB O605AG2		;START BODY FEED AGIT	;acj005
;	ELSE							;acj005
;		GOSUB C605AG2		;STOP BODY FEED AGIT	;acj005
;	RETURN							;acj005

  IF (BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_AGIT_LVL) THEN	;acj005
         GOSUB O605AG2		;START BODY FEED AGIT	;acj005  
	ELSE							;acj005
     		GOSUB C605AG2		;STOP BODY FEED AGIT	;acj005 

    IF ((BOD_FEED_TNK_LVL:AI_INVL > BOD_FEED_AGIT_LVL)&(BOD_FEED_TNK_CO2_TNK:DIN_VAL=1)) THEN   
         GOSUB O5XV024       ;TURN ON BODY FEED TNK CO2  ;MRP000
   ELSE 
         GOSUB C5XV024      ;TURN OFF BODY FEED TANK C02 ;MRP000
  	RETURN							;acj005
                                     ;MRP000
;==============================================================================	;acj005
;		FILTER FLOW CHECK					;acj005
;==============================================================================	;acj005

FILFLOWCHK:								;acj005
	IF (STEP_TMR > FIL_FLOW_INIT_TIME) THEN				;acj005
		BEGIN							;acj005
		PUTAUTO FIL_FLOW_CNTL_VLV				;acj005
		FIL_FLOW_CNTL_VLV:PID_SPVL:1 = FIL_FLOW_INIT		;acj005
		END							;acj005
	RETURN								;acj005
;acj005 end

;==============================================================================	;acj013
;		BAS TOTALIZERS						;acj013
;==============================================================================	;acj013

BASTOT:							;acj013
	BAS_TETRA_HOPS_TOT = HOPS_TOT:AI_MEAS		;acj013
;acj016	IF (COMPAR(UNIT_SG,"POL3",4,EQ)) THEN		;bmf000
		BAS_SPIREB_HOPS_TOT = SPIREB_HOPS_TOT_PTR:AI_MEAS ;bmf000
;acj015	ELSE						;bmf000
;acj015	BAS_SPIREB_HOPS_TOT = SPIRE_B_HOPS_TOT:AI_MEAS	;acj013
	RETURN						;acj013

;===============================================================================	;acj018
;			RESET OG AVERAGE						;acj018
;===============================================================================	;acj018
RESETOGAVG:										;acj018
	BRAND_ID = POL_BRAND_ID_PTR						;jh024
	PRINT LOG_ADI, "RESET BLEND A AVG OG %2.2f DEG P, BRAND %p", AGEDBEER_AVG_OG:AI_MEAS, BRAND_ID	;acj018
	PRINT LOG_ADI, "RESET BLEND B AVG OG %2.2f DEG P, BRAND %p", SECOND_BEER_AVG_OG:AI_MEAS, BRAND_ID	;acj018
	PRINT LOG_ADI, "RESET FINISHED AVG OG %2.2f DEG P, BRAND %p", FIL_OUTLET_AVG_OG:AI_MEAS, BRAND_ID	;acj018

	PUTMANL AGEDBEER_AVG_OG, 3		;fassing or blender aged beer a		;acj018
	PUTMANL AGEDBEER_AVG_OG, 4							;acj018
	PUTMANL SECOND_BEER_AVG_OG, 3		;dummy or blender aged beer b		;acj018
	PUTMANL SECOND_BEER_AVG_OG, 4							;acj018
	PUTMANL FIL_OUTLET_AVG_OG, 3		;dummy or finished beer			;acj018
	PUTMANL FIL_OUTLET_AVG_OG, 4							;acj018
	WAIT 1										;acj018
	PUTAUTO AGEDBEER_AVG_OG, 3		;fassing or blender aged beer a		;acj018
	PUTAUTO AGEDBEER_AVG_OG, 4							;acj018
	PUTAUTO SECOND_BEER_AVG_OG, 3		;dummy or secondary aged beer b		;acj018
	PUTAUTO SECOND_BEER_AVG_OG, 4							;acj018
	PUTAUTO FIL_OUTLET_AVG_OG, 3		;dummy or finished beer			;acj018
	PUTAUTO FIL_OUTLET_AVG_OG, 4							;acj018
	RETURN										;acj018

;==============================================================================	;acj019
;               D.O. MONITORING							;acj019
;==============================================================================	;acj019
DOMON:										;acj019
	IF (AND(DOMON_EPN_PTR:AI_CURAL, SB_HI+SB_HIHI)) THEN			;acj019
		BEGIN								;acj019
		IF (DOMON_STAT_INT != 2) THEN					;acj019
			BEGIN							;acj019
			DOMON_STAT_PTR = 2					;acj019
			DOMON_STAT_INT = 2					;acj019
			END							;acj019
		END								;acj019
	ELSE									;acj019
		IF (DOMON_STAT_INT != 1) THEN					;acj019
			BEGIN							;acj019
			DOMON_STAT_PTR = 1					;acj019
			DOMON_STAT_INT = 1					;acj019
			END							;acj019
	RETURN									;acj019
;===============================================================================
;       RESERVE sluice  
;===============================================================================
SLUICERESERVE:		;VCM021
	IF SLUICE_LOCALLY_FG THEN	;ehb029
		RETURN			

	ASSIGN TEMP_PTR = SLUICE_RESERVE_SG_ALLOF5	;Reservation string
	SA_TMP_SG = UNIT_SG				;IDENTIFIER string
	SA_TMP1_SG = "SLUICE WATER"			;System to be reserved (16 char maximum)
	GOSUB RESERVE

	RETURN
;===============================================================================
;       RELEASE sluice        
;===============================================================================
SLUICERELEASE:	  ;VCM021

	ASSIGN TEMP_PTR = SLUICE_RESERVE_SG_ALLOF5	;Reservation string
	SA_TMP_SG = UNIT_SG								;Identifier string
	SA_TMP1_SG = "SLUICE WATER"						;System to be reserved
	GOSUB RELEASE

	RETURN

;===============================================================================
;       RESERVE PRECOAT SYSTEM
;===============================================================================
RESERVEPRECOAT:		;VCM079

	ASSIGN TEMP_PTR = POL_PC_RESERVE_SG_ALLOF5	;Reservation string
	SA_TMP_SG = UNIT_SG				;IDENTIFIER string
	SA_TMP1_SG = "PRECOAT"			;System to be reserved (16 char maximum)
	GOSUB STDRESERVE

	RETURN
;===============================================================================
;       RELEASE PRECOAT SYSTEM
;===============================================================================
RELEASEPRECOAT:	  ;VCM079

	ASSIGN TEMP_PTR = POL_PC_RESERVE_SG_ALLOF5	;Reservation string
	SA_TMP_SG = UNIT_SG								;Identifier string
	SA_TMP1_SG = "PRECOAT"						;System to be reserved
	GOSUB RELEASE

	RETURN

;ldk025 added routine
;===============================================================================
;       RESERVE TRANSFER TANK INLET LINE  
;===============================================================================
RESERVEXFERINLETLINE:

	RESOLVE TEMP_PTR = XFER_TANK_INLET_LINE_RESERVE_PTR	;Reservation string
	SA_TMP_SG = UNIT_SG					;IDENTIFIER string
	SA_TMP1_SG = "XFER INLET LINE"				;System to be reserved (16 char maximum)
	GOSUB STDRESERVE

	RETURN
;ldk025 added routine
;===============================================================================
;       RELEASE TRANSFER TANK INLET LINE
;===============================================================================
RELEASEXFERINLETLINE:

	RESOLVE TEMP_PTR = XFER_TANK_INLET_LINE_RESERVE_PTR	;Reservation string
	SA_TMP_SG = UNIT_SG								;Identifier string
	SA_TMP1_SG = "XFER INLET LINE"						;System to be reserved
	GOSUB RELEASE

	RETURN


;===============================================================================
;		RESERVE SYSTEM (STANDARD #INCLUDE) VCM021
;===============================================================================
RESERVE:
	MSG_POSTED_FG = 0 ;ehb029
	TEMP_INT = (STRLEN(SA_TMP_SG))
	EXPR6 = (COMPAR(TEMP_PTR,SA_TMP_SG,TEMP_INT,NE))
;ehb029	IF (EXPR6 | (TEMP_INT != STRLEN(TEMP_PTR))) THEN	;If not already the owner
;JMS006	IF (EXPR6 | (TEMP_INT != STRLEN(TEMP_PTR))) | !SDE_AVAILABLE_TO_POLISH_ALLOF5 THEN	;If not already the owner ;ehb029
     IF (EXPR6 | (TEMP_INT != STRLEN(TEMP_PTR))) THEN	;If not already the owner   ;JMS006
		BEGIN
SLUICELOOP:
;ehb029		IF ((STRLEN(TEMP_PTR) > 0) & COMPAR(TEMP_PTR," ",1,NE)) THEN	;If reserved by another
;JMS006		IF ((STRLEN(TEMP_PTR) > 0) & COMPAR(TEMP_PTR," ",1,NE)) & !SLUICE_LOCALLY_FG THEN	;If reserved by another
		IF ((STRLEN(TEMP_PTR) > 0) & COMPAR(TEMP_PTR," ",1,NE)) THEN	;If reserved by another   ;JMS006
			TEMP_INT = APPEND(ERROR_STRING,"WAIT TO RSRV ",SA_TMP1_SG)
;ehb029		END
		GOSUB UPDSKD
		IF (STEP_TMR > 2400) THEN
			BEGIN
			FAIL_MSG = "WAIT FOR SLUICE TIMEOUT"
			GOTO FAIL
			END

;ehb029		IF ((STRLEN(TEMP_PTR) = 0) | COMPAR(TEMP_PTR," ",1,EQ)) THEN
;JMS006		IF ((STRLEN(TEMP_PTR) = 0) | COMPAR(TEMP_PTR," ",1,EQ)) & SDE_AVAILABLE_TO_POLISH_ALLOF5 THEN
      IF ((STRLEN(TEMP_PTR) = 0) | COMPAR(TEMP_PTR," ",1,EQ)) THEN  ;JMS006
			BEGIN
			TEMP_PTR = SA_TMP_SG		;Reserve system
			PRINT LOG_ADI,"%p RESERVED BY %p",SA_TMP1_SG,SA_TMP_SG
			SA_3_MESSAGE = ""		;ehb029
			SA_4_MESSAGE = ""		;ehb029
			SA_5_MESSAGE = ""		;ehb029
;			SLUICE_LOCALLY_FG = 0		;ehb029
			ERROR_STRING = ""
			GOSUB UPDSKD
			TIMERCLR STEP_TMR
			END
;ehbyyy		ELSE IF ((!SDE_AVAILABLE_TO_POLISH_ALLOF5) & (STRLEN(SA_4_MESSAGE) < 2) & MSG_POSTED_FG) THEN	;ehb029
;JMS006		ELSE IF ((!SDE_AVAILABLE_TO_POLISH_ALLOF5) & (STRLEN(SA_4_MESSAGE) < 2) & MSG_POSTED_FG & SLUICE_LOCALLY_FG) THEN	;ehbyyy
		ELSE IF ((STRLEN(SA_4_MESSAGE) < 2) & MSG_POSTED_FG & SLUICE_LOCALLY_FG) THEN	;ehbyyy   ;JMS006
		;polish filters have their own sde pumps so one may sluice locally while the other uses the header
			BEGIN									;ehb029
			SA_3_MESSAGE = ""							;ehb029
			SA_4_MESSAGE = ""							;ehb029
			SA_5_MESSAGE = ""							;ehb029
;ehbyyy			SLUICE_LOCALLY_FG = 1							;ehb029
			ERROR_STRING = ""							;ehb029
			GOSUB UPDSKD								;ehb029
			TIMERCLR STEP_TMR							;ehb029
			END									;ehb029
		ELSE ;not available
			BEGIN
			GOSUB ACKCHK	;ehb029

;JMS006			IF !SDE_AVAILABLE_TO_POLISH_ALLOF5 & !MSG_POSTED_FG THEN		;ehb029
;JMS006				BEGIN								;ehb029
;JMS006				SA_3_MESSAGE = "SDE TANK NOT AVAILABLE"				;ehb029
;JMS006				SA_4_MESSAGE = "SELECT DESTINATION AND ACK TO"			;ehb029
;JMS006				SA_5_MESSAGE = "CONT, OR WAIT FOR SPENT DE"			;ehb029
;JMS006				MSG_POSTED_FG = 1						;ehb029
;JMS006				END								;ehb029
;JMS006			ELSE IF SDE_AVAILABLE_TO_POLISH_ALLOF5 & MSG_POSTED_FG THEN		;ehb029
;JMS006				BEGIN								;ehb029
;JMS006				SA_3_MESSAGE = ""						;ehb029
;JMS006				SA_4_MESSAGE = ""						;ehb029
;JMS006				SA_5_MESSAGE = ""						;ehb029
;JMS006;				SLUICE_LOCALLY_FG = 0						;ehb029
;JMS006				MSG_POSTED_FG = 0						;ehb029
;JMS006				END								;ehb029

;ehb029			IF (COMPAR(TEMP_PTR,SA_TMP_SG,TEMP_INT,NE)) THEN
;ehb029				BEGIN
			WAIT 5
			GOTO SLUICELOOP
;ehb029				END
			END
		END ;ehb029

	RETURN

;ldk025 added routine
;===============================================================================
;		RESERVE SYSTEM (NON-STANDARD #INCLUDE)
;===============================================================================
STDRESERVE:
;There is not wait function here...it is either get it or FAIL
	TEMP_INT = (STRLEN(SA_TMP_SG))
	EXPR6 = (COMPAR(TEMP_PTR,SA_TMP_SG,TEMP_INT,NE))
	IF (EXPR6 | (TEMP_INT != STRLEN(TEMP_PTR))) THEN	;If not already the owner
		BEGIN
		IF ((STRLEN(TEMP_PTR) > 0) & COMPAR(TEMP_PTR," ",1,NE)) THEN	;If reserved by another
			BEGIN
			TEMP_INT = APPEND(FAIL_MSG,SA_TMP1_SG," ALREADY OWNED")
			GOTO FAIL
			END
		TEMP_PTR = SA_TMP_SG		;Reserve system
		PRINT LOG_ADI,"%p RESERVED BY %p",SA_TMP1_SG,SA_TMP_SG
		END
	RETURN


;===============================================================================
;		RELEASE SYSTEM (STANDARD #INCLUDE)  VCM021
;===============================================================================
RELEASE:
	TEMP_INT = (STRLEN(SA_TMP_SG))
	EXPR6 = (COMPAR(TEMP_PTR,SA_TMP_SG,TEMP_INT,EQ))
	IF (EXPR6 & (TEMP_INT = STRLEN(TEMP_PTR))) THEN	;If the owner
		BEGIN
		TEMP_PTR = ""		;Release system
		PRINT LOG_ADI,"%p RELEASED BY %p",SA_TMP1_SG,SA_TMP_SG
		END
	RETURN
;===============================================================================
;	GET TIME AND DATE INFORMATION  VCM027
;===============================================================================
GETTIMEANDDATE:

        TEMP_INT = TIMSTR(SA_TMP_SG)
        TEMP_INT = MIDSTR(SA_TMP_SG,CURRENT_TIME,1,5)

        ; Convert the Getdate integers into strings inorder to append these values
        ; to a date formatted string (mm/dd/yy).

        GETDATE DAY_OF_WEEK,DAY_OF_MONTH,MONTH,YEAR

        ; The integers from GETDATE are copied into a temp string because fltcnv will not
        ; put a leading 0 on a month with only one digit.

        ; If the month value is less than 10 a 0 must be put on the front.  The date
        ; format sent to hist dba is mm/dd/yy.

        TEMP_INT = FLTCNV(SA_TMP_SG,MONTH,2,0)

;        IF MONTH < 10 THEN
;	      TEMP_INT = APPEND(MONTH_STRING,"0",SA_TMP_SG)
;        ELSE
	      TEMP_INT = APPEND(MONTH_STRING,SA_TMP_SG)

        ; If the day of the month value is less than 10 a 0 must be put on the front.  The date
        ; format sent to hist dba is mm/dd/yy.

        TEMP_INT = FLTCNV(SA_TMP_SG,DAY_OF_MONTH,2,0)

;        IF DAY_OF_MONTH < 10 THEN
;	    TEMP_INT = APPEND(DAY_STRING,"0",SA_TMP_SG)
;        ELSE
	    TEMP_INT = APPEND(DAY_STRING,SA_TMP_SG)

        ; If the year value is less than 10 a 0 must be put on the front.  The date
        ; format sent to hist dba is mm/dd/yyyy.

        TEMP_INT = FLTCNV(SA_TMP_SG,YEAR,2,0)

;        IF YEAR < 10 THEN
;	    TEMP_INT = APPEND(YEAR_STRING,"0",SA_TMP_SG)
;        ELSE
	    TEMP_INT = APPEND(YEAR_STRING,SA_TMP_SG)

        TEMP_INT = APPEND(CURRENT_DATE,MONTH_STRING,"/",DAY_STRING,"/",YEAR_STRING)

	RETURN


;mw000 added routine
;==============================================================================	
;	UPDATE MCMS PROCEDURE, STATE, STATUS NUMBERS
;==============================================================================
UPDATEMCMS:
	;update unit procedure number
	IF (POL_SA_STATE_PTR != 1) THEN
		MCMS_PROCEDURE_PTR = 62
	ELSE
		MCMS_PROCEDURE_PTR = 0

	;update step number 
	MCMS_STATE_PTR = POL_SA_STATE_PTR

	;Update the status number for PLC
	IF (POL_SA_STATE_PTR != 1) THEN
		MCMS_STATUS_PTR = 1
	ELSE
		BEGIN
		IF MCMS_ABORTED_FG THEN
			MCMS_STATUS_PTR = 998		;Aborted
		END

	RETURN

;mw000 added routine
;*******************************************************************************
;		STARTUP DO
;*******************************************************************************
STARTUPDO:
	;caputre D.O. value after 100 bbl 
	IF (FIL_FLOW_TOTD:AI_MEAS >= STARTUP_TOT_FL) & !(STARTUP_DO_FG) THEN
		BEGIN
		DO_STARTUP_FL = DOMON_EPN_PTR:AI_MEAS
		PRINT LOG_ADI, "%p DO AT STARTUP = %5.2f PPB",BRAND_ID, DO_STARTUP_FL
		INITIAL_DO = DO_STARTUP_FL  ;VCM071
		STARTUP_DO_FG = 1
		END

	RETURN

;mw000 added routine
;*******************************************************************************
;		STOP AVERAGING FLOW AND TURBIDITY
;*******************************************************************************
MCMSSTOPAVG:

	INLINE_AVG_TURBIDITY:IOS_TG:1 = 0		;'8606AI31AV'
	INLINE_AVG_DO:IOS_TG:1 = 0			;'8606DM81AV'		
	INLINE_AVG_FLOW:IOS_TG:1 = 0			;'8606FC32AV'
	INLINE_AVG_FLOW:IOS_TG:2 = 0
	FIL_FLOW_TOTF:IOS_TG:1 = 0			;'8606FQ32F'		

	RETURN

;mw000 added routine
;*******************************************************************************
;		START AVERAGING FLOW AND TURBIDITY
;*******************************************************************************
MCMSSTARTAVG:
	FIL_FLOW_TOTF:IOS_TG:1 = 1			;'8606FQ32F'		
	INLINE_AVG_TURBIDITY:IOS_TG:1 = 1		;'8606AI31AV'  
	INLINE_AVG_DO:IOS_TG:1 = 1			;'8606DM81AV' 	   	
	INLINE_AVG_FLOW:IOS_TG:2 = 1			;'8606FC32AV'
	INLINE_AVG_FLOW:IOS_TG:1 = 1

	PUTAUTO FIL_FLOW_TOTF							
	PUTAUTO INLINE_AVG_TURBIDITY		
	PUTAUTO INLINE_AVG_DO							
	PUTAUTO INLINE_AVG_FLOW,4
	PUTAUTO INLINE_AVG_FLOW

	RETURN
;===============================================================================
;
; SPECIFIC DEVICE CLOSE AND OPEN SUBROUTINES
;
;===============================================================================

C5XV024:                            ;MRP000
        ASSIGN DEV_PTR = '8605XV024'
        FAIL_MSG = "BDY FEED TNK CO2 VLV FAIL CLS"
        GOSUB CLOSDEV
;        P8605XV024 = 0		; Clear cont. check flag
        RETURN


O5XV024:                            ;MRP000
        ASSIGN DEV_PTR = '8605XV024'
        FAIL_MSG = "BDY FEED TNK CO2 VLV OPN"
        GOSUB OPENDEV
;        P8605XV024 = 1		; Set cont. check flag
        RETURN

C6BB302:
	ASSIGN DEV_PTR = '8606BB302'
	FAIL_MSG = "SLUICE INLET BLKBDV FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606BB302 = 0		; Clear cont. check flag
	RETURN


O6BB302:
	ASSIGN DEV_PTR = '8606BB302'
	FAIL_MSG = "SLUICE INLET BLKBDV FAIL OPN"
	GOSUB OPENDEV
;aj	P8606BB302 = 1		; Set cont. check flag
	RETURN


C606P34:
	ASSIGN DEV_PTR = '8606P34'
	FAIL_MSG = "BODY FEED PUMP FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606P34 = 0		; Clear cont. check flag
	BOD_FEED_PMP_ENABLE_FG = 0		; Clear cont. check flag	;aj
	RETURN


O606P34:
	ASSIGN DEV_PTR = '8606P34'
	FAIL_MSG = "BODY FEED PUMP FAIL OPN"
	GOSUB OPENDEV
;aj	P8606P34 = 1		; Set cont. check flag
	BOD_FEED_PMP_ENABLE_FG = 1		; Set cont. check flag	;aj
	RETURN


C5XV231:
	ASSIGN DEV_PTR = '8605XV231'
	FAIL_MSG = "DILUENT FLUSH VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8605XV231 = 0		; Clear cont. check flag
	RETURN


O5XV231:
	ASSIGN DEV_PTR = '8605XV231'
	FAIL_MSG = "DILUENT FLUSH VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8605XV231 = 1		; Set cont. check flag
	RETURN


C6XV307:
	ASSIGN DEV_PTR = '8606XV307'
	FAIL_MSG = "LEAF DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV307 = 0		; Clear cont. check flag
	RETURN


O6XV307:
	ASSIGN DEV_PTR = '8606XV307'
	FAIL_MSG = "LEAF DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV307 = 1		; Set cont. check flag
	RETURN


C6XV322:
	ASSIGN DEV_PTR = '8606XV322'
	FAIL_MSG = "BODY FEED VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV322 = 0		; Clear cont. check flag
	RETURN


O6XV322:
	ASSIGN DEV_PTR = '8606XV322'
	FAIL_MSG = "BODY FEED VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV322 = 1		; Set cont. check flag
	RETURN


C6XV311:
	ASSIGN DEV_PTR = '8606XV311'
	FAIL_MSG = "BACK PRESS VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV311 = 0		; Clear cont. check flag
	RETURN


O6XV311:
	ASSIGN DEV_PTR = '8606XV311'
	FAIL_MSG = "BACK PRESS VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV311 = 1		; Set cont. check flag
	RETURN


C6XV310:
	ASSIGN DEV_PTR = '8606XV310'
	FAIL_MSG = "BEER FILL VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV310 = 0		; Clear cont. check flag
	RETURN


O6XV310:
	ASSIGN DEV_PTR = '8606XV310'
	FAIL_MSG = "BEER FILL VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV310 = 1		; Set cont. check flag
	RETURN


C6XV308:
;aj-dot	ASSIGN DEV_PTR = '8606XV308'
	FAIL_MSG = "GAS BLEED VALVE FAIL CLS"
;aj-dot	GOSUB CLOSDEV
;aj	P8606XV308 = 0		; Clear cont. check flag

	TURNOFF '8606XV308'		;aj - dot
	RETURN


O6XV308:
;aj-dot	ASSIGN DEV_PTR = '8606XV308'
	FAIL_MSG = "GAS BLEED VALVE FAIL OPN"
;aj-dot	GOSUB OPENDEV
;aj	P8606XV308 = 1		; Set cont. check flag

	TURNON '8606XV308'		;aj - dot
	RETURN


C6XV304:
	ASSIGN DEV_PTR = '8606XV304'
	FAIL_MSG = "AIR VENT VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV304 = 0		; Clear cont. check flag
	RETURN


O6XV304:
	ASSIGN DEV_PTR = '8606XV304'
	FAIL_MSG = "AIR VENT VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV304 = 1		; Set cont. check flag
	RETURN


C6XV301:
	ASSIGN DEV_PTR = '8606XV301'
	FAIL_MSG = "SLUICE OUTLET VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV301 = 0		; Clear cont. check flag
	RETURN


O6XV301:
	ASSIGN DEV_PTR = '8606XV301'
	FAIL_MSG = "SLUICE OUTLET VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV301 = 1		; Set cont. check flag
	RETURN


C6XV305:
	ASSIGN DEV_PTR = '8606XV305'
	FAIL_MSG = "CO2 VENT VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV305 = 0		; Clear cont. check flag
	RETURN


O6XV305:
	ASSIGN DEV_PTR = '8606XV305'
	FAIL_MSG = "CO2 VENT VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV305 = 1		; Set cont. check flag
	RETURN


C6XV313:
	ASSIGN DEV_PTR = '8606XV313'	;VCM001
	FAIL_MSG = "RINSE DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
	RETURN

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001		ASSIGN DEV_PTR = '8606XV313'
;VCM001	ELSE					;aj
;VCM001		ASSIGN DEV_PTR = '8606XV413'	;aj
;VCM001	FAIL_MSG = "RINSE DRAIN VALVE FAIL CLS"
;VCM001	GOSUB CLOSDEV
;VCM001;aj	P8606XV313 = 0		; Clear cont. check flag
;VCM001	RETURN


O6XV313:
	ASSIGN DEV_PTR = '8606XV313'	;VCM001
	FAIL_MSG = "RINSE DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
	RETURN

;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001		ASSIGN DEV_PTR = '8606XV313'
;VCM001	ELSE					;aj
;VCM001		ASSIGN DEV_PTR = '8606XV413'	;aj
;VCM001	FAIL_MSG = "RINSE DRAIN VALVE FAIL OPN"
;VCM001	GOSUB OPENDEV
;VCM001;aj	P8606XV313 = 1		; Set cont. check flag
;VCM001	RETURN


C6XV327:
	ASSIGN DEV_PTR = '8606XV327'
	FAIL_MSG = "VENT DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV327 = 0		; Clear cont. check flag
	RETURN


O6XV327:
	ASSIGN DEV_PTR = '8606XV327'
	FAIL_MSG = "VENT DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV327 = 1		; Set cont. check flag
	RETURN


C6XV312:
	ASSIGN DEV_PTR = '8606XV312'
	FAIL_MSG = "CO2 PURGE VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV312 = 0		; Clear cont. check flag
	RETURN


O6XV312:
	ASSIGN DEV_PTR = '8606XV312'
	FAIL_MSG = "CO2 PURGE VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV312 = 1		; Set cont. check flag
	RETURN


C6XV309:
	ASSIGN DEV_PTR = '8606XV309'
	FAIL_MSG = "BEER INLET VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV309 = 0		; Clear cont. check flag
	RETURN


O6XV309:
	ASSIGN DEV_PTR = '8606XV309'
	FAIL_MSG = "BEER INLET VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV309 = 1		; Set cont. check flag
	RETURN


C6XV323:
	ASSIGN DEV_PTR = '8606XV323'
	FAIL_MSG = "PRECOAT SUPPLY VALV FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV323 = 0		; Clear cont. check flag
	RETURN


O6XV323:
	ASSIGN DEV_PTR = '8606XV323'
	FAIL_MSG = "PRECOAT SUPPLY VALV FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV323 = 1		; Set cont. check flag
	RETURN


C5XV330:
	ASSIGN DEV_PTR = '8605XV330'
	FAIL_MSG = "BODY FEED TK FAIL CLS"
	GOSUB CLOSDEV
;aj	P8605XV330 = 0		; Clear cont. check flag
	RETURN


O5XV330:
	ASSIGN DEV_PTR = '8605XV330'
	FAIL_MSG = "BODY FEED TK FAIL OPN"
	GOSUB OPENDEV
;aj	P8605XV330 = 1		; Set cont. check flag
	RETURN


C06XV31:
	ASSIGN DEV_PTR = '8606XV31'
	FAIL_MSG = "DILUENT WATER VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV31 = 0		; Clear cont. check flag
	RETURN


O06XV31:
	ASSIGN DEV_PTR = '8606XV31'
	FAIL_MSG = "DILUENT WATER VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV31 = 1		; Set cont. check flag
	RETURN


C06XV363:                                            ;JMS007
	ASSIGN DEV_PTR = '8606XV363'                      ;JMS007
	FAIL_MSG = "DILUENT BLOCK VALVE FAIL CLS"         ;JMS007
	GOSUB CLOSDEV                                     ;JMS007
	RETURN                                            ;JMS007


O06XV363:                                            ;JMS007
	ASSIGN DEV_PTR = '8606XV363'                      ;JMS007
	FAIL_MSG = "DILUENT BLOCK VALVE FAIL OPN"         ;JMS007
	GOSUB OPENDEV                                     ;JMS007
	RETURN                                            ;JMS007


C06XV32:
	ASSIGN DEV_PTR = '8606XV32'
	FAIL_MSG = "DILUENT RINSE VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV32 = 0		; Clear cont. check flag
	RETURN


O06XV32:
	ASSIGN DEV_PTR = '8606XV32'
	FAIL_MSG = "DILUENT RINSE VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV32 = 1		; Set cont. check flag
	RETURN


C6XV303:
	ASSIGN DEV_PTR = '8606XV303'
	FAIL_MSG = "CO2 BLOWDOWN VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV303 = 0		; Clear cont. check flag
	RETURN


O6XV303:
	ASSIGN DEV_PTR = '8606XV303'
	FAIL_MSG = "CO2 BLOWDOWN VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV303 = 1		; Set cont. check flag
	RETURN


C6XV306:
	ASSIGN DEV_PTR = '8606XV306'
	FAIL_MSG = "BLOWBACK VALVE  FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV306 = 0		; Clear cont. check flag
	RETURN


O6XV306:
	ASSIGN DEV_PTR = '8606XV306'
	FAIL_MSG = "BLOWBACK VALVE  FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV306 = 1		; Set cont. check flag
	RETURN


C6XV317:
	ASSIGN DEV_PTR = '8606XV317'
	FAIL_MSG = "BEER FEED VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV317 = 0		; Clear cont. check flag
	RETURN


O6XV317:
	ASSIGN DEV_PTR = '8606XV317'
	FAIL_MSG = "BEER FEED VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV317 = 1		; Set cont. check flag
	RETURN


C6XV318:
	ASSIGN DEV_PTR = '8606XV318'
	FAIL_MSG = "BEER OUTLET VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV318 = 0		; Clear cont. check flag
	RETURN

O6XV318:
	ASSIGN DEV_PTR = '8606XV318'
	FAIL_MSG = "BEER OUTLET VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV318 = 1		; Set cont. check flag
	RETURN

; start tta001
C6XV350:
	ASSIGN DEV_PTR = '8606XV350'
	FAIL_MSG = "BF FEED VALVE FAIL CLS"
	GOSUB CLOSDEV
	RETURN
O6XV350:
	ASSIGN DEV_PTR = '8606XV350'
	FAIL_MSG = "BF FEED VALVE FAIL OPN"
	GOSUB OPENDEV
	RETURN

C6XV351:
	ASSIGN DEV_PTR = '8606XV351'
	FAIL_MSG = "BF DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
	RETURN
O6XV351:
	ASSIGN DEV_PTR = '8606XV351'
	FAIL_MSG = "BF DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
	RETURN


C6XV352:
	ASSIGN DEV_PTR = '8606XV352'
	FAIL_MSG = "PC DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
	RETURN
O6XV352:
	ASSIGN DEV_PTR = '8606XV352'
	FAIL_MSG = "PC DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
	RETURN
; end tta001

;pbh001	C6XV319:
;pbh001	ASSIGN DEV_PTR = '8606XV319'
;pbh001	FAIL_MSG = "PRECOAT CIRC VALVE FAIL CLS"
;pbh001	GOSUB CLOSDEV
;aj	P8606XV319 = 0		; Clear cont. check flag
;pbh001	RETURN


;pbh001	O6XV319:
;pbh001	ASSIGN DEV_PTR = '8606XV319'
;pbh001	FAIL_MSG = "PRECOAT CIRC VALVE FAIL OPN"
;pbh001	GOSUB OPENDEV
;aj	P8606XV319 = 1		; Set cont. check flag
;pbh001	RETURN


;pbh001	C6XV320:
;pbh001	ASSIGN DEV_PTR = '8606XV320'
;pbh001	FAIL_MSG = "PRECOAT CIRC VALVE FAIL CLS"
;pbh001	GOSUB CLOSDEV
;aj	P8606XV320 = 0		; Clear cont. check flag
;pbh001	RETURN


;pbh001	O6XV320:
;pbh001	ASSIGN DEV_PTR = '8606XV320'
;pbh001	FAIL_MSG = "PRECOAT CIRC VALVE FAIL OPN"
;pbh001	GOSUB OPENDEV
;aj	P8606XV320 = 1		; Set cont. check flag
;pbh001	RETURN


;pbh001	C6XV321:
;pbh001	ASSIGN DEV_PTR = '8606XV321'
;pbh001	FAIL_MSG = "DILUENT PUMP PAK FAIL CLS"
;pbh001	GOSUB CLOSDEV
;aj	P8606XV321 = 0		; Clear cont. check flag
;pbh001	RETURN


;pbh001	O6XV321:
;pbh001	ASSIGN DEV_PTR = '8606XV321'
;pbh001	FAIL_MSG = "DILUENT PUMP PAK FAIL OPN"
;pbh001	GOSUB OPENDEV
;aj	P8606XV321 = 1		; Set cont. check flag
;pbh001	RETURN


C6XV324:
	ASSIGN DEV_PTR = '8606XV324'
	FAIL_MSG = "FILL SUPPLY VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV324 = 0		; Clear cont. check flag
	RETURN


O6XV324:
	ASSIGN DEV_PTR = '8606XV324'
	FAIL_MSG = "FILL SUPPLY VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV324 = 1		; Set cont. check flag
	RETURN


C6XV325:
	ASSIGN DEV_PTR = '8606XV325'
	FAIL_MSG = "CIRC TO PUMP FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV325 = 0		; Clear cont. check flag
	RETURN


O6XV325:
	ASSIGN DEV_PTR = '8606XV325'
	FAIL_MSG = "CIRC TO PUMP FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV325 = 1		; Set cont. check flag
	RETURN


C6XV326:
	ASSIGN DEV_PTR = '8606XV326'
	FAIL_MSG = "CIRC TO TANK FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV326 = 0		; Clear cont. check flag
	RETURN


O6XV326:
	ASSIGN DEV_PTR = '8606XV326'
	FAIL_MSG = "CIRC TO TANK FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV326 = 1		; Set cont. check flag
	RETURN


C606P31:
	ASSIGN DEV_PTR = '8606P31'
	FAIL_MSG = "FILTER FEED PUMP FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606P31 = 0		; Clear cont. check flag
	FIL_FEED_PMP_ENABLE_FG = 0		; Clear cont. check flag	;aj
	RETURN


O606P31:
	ASSIGN DEV_PTR = '8606P31'
	FAIL_MSG = "FILTER FEED PUMP FAIL OPN"
	GOSUB OPENDEV
;aj	P8606P31 = 1		; Set cont. check flag
	FIL_FEED_PMP_ENABLE_FG = 1		; Set cont. check flag	;aj
	RETURN


;pbh001 C606P33:
;pbh001	ASSIGN DEV_PTR = '8606P33'
;pbh001	FAIL_MSG = "PRECOAT CIRC PUMP FAIL CLS"
;pbh001	GOSUB CLOSDEV
;aj	P8606P33 = 0		; Clear cont. check flag
;pbh001	PRECOAT_CIRC_PMP_ENABLE_FG = 0		; Clear cont. check flag	;aj
;pbh001	RETURN


;pbh001 O606P33:
;pbh001	ASSIGN DEV_PTR = '8606P33'
;pbh001	FAIL_MSG = "PRECOAT CIRC PUMP FAIL OPN"
;pbh001	GOSUB OPENDEV
;aj	P8606P33 = 1		; Set cont. check flag
;pbh001	PRECOAT_CIRC_PMP_ENABLE_FG = 1		; Set cont. check flag	;aj
;pbh001	RETURN


;VCM001C606P15:
;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001;acj002		ASSIGN DEV_PTR = '8606P15'
;VCM001;acjxyz		RETURN	;acj002
;VCM001		ASSIGN DEV_PTR = '8606P15'	;acjxyz
;VCM001	ELSE					;aj

;JMS006C606P35
;JMS006	ASSIGN DEV_PTR = '8606P35'	;;VCM001
;JMS006	FAIL_MSG = "SPENT DE PUMP FAIL CLS"
;JMS006	GOSUB CLOSDEV
;JMS006;aj	P8606P15 = 0		; Clear cont. check flag
;JMS006	RETURN


;VCM001O606P15:
;VCM001	IF (UNIT_NUMBER = U_FF1) THEN		;aj
;VCM001;acj002		ASSIGN DEV_PTR = '8606P15'
;VCM001;acjxyz		RETURN	;acj002
;VCM001		ASSIGN DEV_PTR = '8606P15'	;acjxyz
;VCM001	ELSE					;aj

;JSM006O606P35:
;JSM006	ASSIGN DEV_PTR = '8606P35'	;;VCM001
;JSM006	FAIL_MSG = "SPENT DE PUMP FAIL OPN"
;JSM006	WAIT 5  ; let air bleed out of DE pump suction
;JSM006	GOSUB OPENDEV
;JSM006	WAIT 5  ; let air bleed out of DE pump suction
;JSM006	IF (DE_SLURRY_FILTERS_FLOW:AI_MEAS > 40) THEN
;JSM006		GOTO DEFLOWOK
;JSM006	ELSE
;JSM006		GOSUB C606P35			;START SPENT DE PUMP VCM001
;JSM006	WAIT 5  ; let air bleed out of DE pump suction
;JSM006	ASSIGN DEV_PTR = '8606P35'
;JSM006	FAIL_MSG = "SPENT DE PUMP FAIL OPN"  ;VCM083
;JSM006	GOSUB OPENDEV
;JSM006DEFLOWOK:
;JSM006	RETURN

C6XV330:
	ASSIGN DEV_PTR = '8606XV330'
	FAIL_MSG = "PURGE DRAIN VALVE FAIL CLS"
	GOSUB CLOSDEV
;aj	P8606XV330 = 0		; Clear cont. check flag
	RETURN


O6XV330:
	ASSIGN DEV_PTR = '8606XV330'
	FAIL_MSG = "PURGE DRAIN VALVE FAIL OPN"
	GOSUB OPENDEV
;aj	P8606XV330 = 1		; Set cont. check flag
	RETURN


C8606F3:
	FAIL_MSG = "SLUICE DRIVE SOLENO FAIL CLS"
	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		TURNOFF '8606P36'		; dot VCM020
	TURNOFF '8606F3'		;aj - dot
	RETURN


O8606F3:
	FAIL_MSG = "SLUICE DRIVE SOLENO FAIL OPN"
	IF (COMPAR(UNIT_SG,"POL1",4,EQ)) THEN
		TURNON'8606P36'		; dot VCM020
	TURNON '8606F3'			;aj - dot
	RETURN

;FOLLOWING NOT CREATED FROM DEVICE TABLES

C19XV31:
	ASSIGN DEV_PTR = '8619XV31'
	FAIL_MSG = "HOPS IN VALVE FAIL CLS"
	GOSUB CLOSDEV
	RETURN


O19XV31:
	ASSIGN DEV_PTR = '8619XV31'
	FAIL_MSG = "HOPS IN VALVE FAIL OPN"
	GOSUB OPENDEV
	RETURN

;acj015 O19XV33:	;joh009 start
;acj015	ASSIGN DEV_PTR = '8619XV33'
;acj015	FAIL_MSG = "SPIRE B HOPS IN VALVE FAIL OPN"
;acj015	GOSUB OPENDEV
;acj015	RETURN
;acj015 C19XV33:
;acj015	ASSIGN DEV_PTR = '8619XV33'
;acj015	FAIL_MSG = "SPIRE B HOPS IN VALVE FAIL CLS"
;acj015	GOSUB CLOSDEV
;acj015	RETURN
		;joh009 end
;acj000 begin
C605AG2:							;acj000
	ASSIGN DEV_PTR = '8605AG2'				;acj000
	FAIL_MSG = "BOD FEED TNK AGITATOR FAIL CLS"		;acj000
	GOSUB CLOSDEV						;acj000
	RETURN							;acj000

O605AG2:							;acj000
	ASSIGN DEV_PTR = '8605AG2'				;acj000
	FAIL_MSG = "BOD FEED TNK AGITATOR FAIL OPN"		;acj000
	GOSUB OPENDEV						;acj000
	RETURN							;acj000
;acj000 end

C509XV34:
	IF INSTR(XFER_TANK_INLET_LINE_RESERVE_PTR, UNIT_SG) THEN;ldk025
		BEGIN						;ldk025
		ASSIGN DEV_PTR = XFER_TANK_INLET_VLV		;ldk025
		FAIL_MSG = "XFER TNK INLET VLV FAIL CLS"	;ldk025
		GOSUB CLOSDEV					;ldk025
		END						;ldk025
	RETURN

O509XV34:
	IF INSTR(XFER_TANK_INLET_LINE_RESERVE_PTR, UNIT_SG) THEN;ldk025
		BEGIN						;ldk025
		ASSIGN DEV_PTR = XFER_TANK_INLET_VLV		;ldk025
		FAIL_MSG = "XFER TNK INLET VLV FAIL OPN"	;ldk025
		GOSUB OPENDEV					;ldk025
		END						;ldk025
	RETURN

C6XV302:                                         ;JMS004   
	ASSIGN DEV_PTR = '8606XV302'
	FAIL_MSG = "FILTER DO PRESSOUT VLV CLS"
	GOSUB CLOSDEV
	RETURN


O6XV302:														 ;JMS004
	ASSIGN DEV_PTR = '8606XV302'
	FAIL_MSG = "FILTER DO PRESSOUT VLV OPN"
	GOSUB OPENDEV
	RETURN


;===============================================================================
;		O P E N		D E V I C E	S U B R O U T I N E
;===============================================================================

	;This subroutine will attempt to open any device that it is
	;commanded to. The subroutine will check for five things:
	;	if the program is already in failure hold (DEV_FAILED)
	;	if the device has been faulted ($f0)
	;	if the device has been interlocked ($s4)
	;	if the device is already open ($s1)
	;	if the device is in manual ($m0) it will be put to auto

OPENDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

	IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTOPN

; if the fault bit is set or the interlock bit is set
; then send the program to fail

	IF (AND(DEV_PTR:DEV_DFLG,F_0) | AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO FLTOPN

; if device is already opened
; then return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_1)) THEN
		GOTO OUTOPN

	DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)	;put device into auto

; open device and waituntil either device opens or faults
	OPEN DEV_PTR
	WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_1) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTOPN

; if device is faulted
	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		BEGIN
FLTOPN:		DEV_FAILED_FG=1		; set failure hold flag
		GOTO FAIL
		END
OUTOPN:
	RETURN

;===============================================================================
;		C L O S E	D E V I C E	S U B R O U T I N E
;===============================================================================

	;This subroutine will attempt to open any device that it is
	;commanded to. The subroutine will check for five things:
	;	if the program is already in failure hold (DEV_FAILED)
	;	if the device has been faulted ($f0)
	;	if the device has been interlocked ($s4)
	;	if the device is already closed ($s0)
	;	if the device is in manual ($m0)

CLOSDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

	IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTCLS

; if the fault bit is set, send the program to hold

	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		GOTO FLTCLS

; if the interlock bit is set, return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTCLS

; if device is already closed
; then return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_0)) THEN
		GOTO OUTCLS

	DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)	;put device into auto

; close device and waituntil either device closes or faults
	CLOSE DEV_PTR
	WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_0) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTCLS

; if device is faulted
	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		BEGIN
FLTCLS:		DEV_FAILED_FG=1			; set failure hold flag
		GOTO FAIL
		END
OUTCLS:
	RETURN

;===============================================================================
;		Bodyfeed Flow Control		;tta001 added
;===============================================================================
BODYFEEDVFDCNTL:	

	IF (BODYFEED_SEL = 0) THEN
		RETURN
		
	BF_VFD_NO_CHANGE_FG = 0	;clear the flag before use it
;VCM049	TIMERON BF_CNTRL_DELAY_TMR

;	IF DUAL_PRECOAT_SELECTION_FG THEN  ;VCM057
;		BEGIN
;		TIMERON BF_DP_INTERVAL_TMR
;		BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1		;grab the current value to do the calculations

		;after x seconds, re-sample DP and recheck need to adjust bodyfeed flow
;		IF (BF_DP_INTERVAL_TMR > BF_DP_INTERVAL_TIME) THEN	;in secs
;			BEGIN
;			CURRENT_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS		;take the sample
;			GOSUB CALDPRATE		;calculate the DP rate of rise
;			END
;		END

	;when entering ON STREAM, (wait delay time)
	IF (BF_CNTRL_DELAY_TMR < BF_CNTRL_DELAY_TIME) & (SA_STATE = 13) THEN
		BEGIN
		TIMERON BF_CNTRL_DELAY_TMR  ;VCM049
		LAST_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS	;take first sample  ;VCM068
		RETURN
		END																									  ;1=auto, 2=manual
	 ELSE
		BEGIN
		TIMEROFF BF_CNTRL_DELAY_TMR  ;VCM068 ONLY ONCE PER FILTER RUN
		IF (LAST_DP_VALUE = 0) THEN  ;VCM083
			LAST_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS	;take first sample  ;VCM083
		END
;VCM068	ELSE IF ((BF_CNTRL_DELAY_TMR < (BF_CNTRL_DELAY_TIME + (BF_DP_INTERVAL_TIME/60)))& (BODYFEED_MODE = 1)) THEN	;60 + 5 minutes
;VCM068		BEGIN
;VCM068		IF(!TDINT04_FG)THEN
;VCM068			BEGIN
			; calculate ramp rate
;VCM068			BF_TMP_FLT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1 - (BODYFEED_VFD_CNTRL_RAMPDOWN_OUT / (BODYFEED_VFD_CNTRL_RAMPDOWN_TIM * 60))
;VCM068			PUTMANL BODYFEED_VFD_CONTROL_PTR
;VCM068			PUTOUT BODYFEED_VFD_CONTROL_PTR, BF_TMP_FLT 
;VCM068			PRINT LOG_ADI, "BF CONTROL:OUT CHANGED TO BF_TMP_FLT %2.1f",BF_TMP_FLT 
;VCM068			WAIT 2
;VCM068			; if output is not at rampdown value then return
;VCM068			IF (BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1 > BODYFEED_VFD_CNTRL_RAMPDOWN_OUT) THEN
;VCM068				BEGIN
;VCM068				RETURN
;VCM068				END
;VCM068			ELSE
;VCM068				BEGIN
;VCM068				PUTMANL BODYFEED_VFD_CONTROL_PTR
;VCM068				PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_RAMPDOWN_OUT 
;VCM068			PRINT LOG_ADI, "BF CONTROL:OUT = BODYFEED_VFD_CNTRL_RAMPDOWN_OUT %2.1f",BODYFEED_VFD_CNTRL_RAMPDOWN_OUT
;VCM068				WAIT 2
;VCM068				END
;VCM068			; if output is not at rampdown value then return
;VCM068			BF_SAMPLE_COUNTER_INT = 1
;VCM068			LAST_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS	;take first sample
;VCM068			TIMEROFF BF_CNTRL_DELAY_TMR  ;VCM049 ONLY ONCE PER FILTER RUN
;VCM068			TDINT04_FG = 1
;VCM068			END
;VCM068		END

	TIMERON BF_DP_INTERVAL_TMR
	BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1		;grab the current value to do the calculations

		;VCM082 if flow SP increases >= than 10 bph reset interval tmr. If SP change => 20 bph reset tmr 
		;and double interval time before increasinf bf
	IF (FIL_FLOW_CNTL_VLV:PID_SPVL:1 > (LAST_FILTER_FLOW_SP_FL + 10)) THEN
		BEGIN
		TIMERCLR BF_DP_INTERVAL_TMR
		IF (FIL_FLOW_CNTL_VLV:PID_SPVL:1 > (LAST_FILTER_FLOW_SP_FL + 20)) THEN
			BF_DP_INTERVAL_MULTPLR_FL = 2
		PRINT LOG_ADI, "BF CONTROL: FLOW SP INCREASE %.2f to %.2f RESET INTERVAL TIMER", LAST_FILTER_FLOW_SP_FL, FIL_FLOW_CNTL_VLV:PID_SPVL:1
      LAST_FILTER_FLOW_SP_FL = FIL_FLOW_CNTL_VLV:PID_SPVL:1
		END

			;if delay for recirc or flow sp change still sample dp at 300 secs
	IF (BF_DP_INTERVAL_MULTPLR_FL > 1) THEN	;VCM083
		IF (BF_DP_INTERVAL_TMR > BF_DP_INTERVAL_TIME)&(BF_DP_INTERVAL_TMR < (BF_DP_INTERVAL_TIME + 5)) THEN
			LAST_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS	;take sample  ;VCM083

	;after x seconds, re-sample DP and recheck need to adjust bodyfeed flow
;VCM082	IF (BF_DP_INTERVAL_TMR > BF_DP_INTERVAL_TIME) THEN	;in secs
	IF (BF_DP_INTERVAL_TMR > (BF_DP_INTERVAL_TIME * BF_DP_INTERVAL_MULTPLR_FL)) THEN	;in secs  ;VCM082
		BEGIN
		BF_DP_INTERVAL_MULTPLR_FL = 1  ;VCM082
      LAST_FILTER_FLOW_SP_FL = FIL_FLOW_CNTL_VLV:PID_SPVL:1
		CURRENT_DP_VALUE = FIL_DIFF_PRESS:AI_MEAS		;take the sample
		BF_SAMPLE_COUNTER_INT = BF_SAMPLE_COUNTER_INT + 1
;VCM082		PRINT LOG_ADI, "BF CONTROL: DP CHANGED FROM %.5f to %.5f IN %i SECS", LAST_DP_VALUE, CURRENT_DP_VALUE, BF_DP_INTERVAL_TIME
		PRINT LOG_ADI, "BF CONTROL: DP CHANGED FROM %.5f to %.5f IN %i SECS", LAST_DP_VALUE, CURRENT_DP_VALUE, BF_DP_INTERVAL_TMR  ;VCM082
 
		GOSUB CALDPRATE		;calculate the DP rate of rise

		;calculate the VFD output delta change
       		IF (DP_CHANGE_RATE < 4) THEN
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT1	;-1.5%
       		ELSE IF (DP_CHANGE_RATE < 4.75) THEN
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT2	;-0.9%
       		ELSE IF (DP_CHANGE_RATE < 5.5) THEN				    
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT3	;-0.4%
       		ELSE IF (DP_CHANGE_RATE < 6.5) THEN
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT4	;no ajustment, all good
       		ELSE IF (DP_CHANGE_RATE < 7.25) THEN
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT5	;0.6%
       		ELSE IF (DP_CHANGE_RATE < 8) THEN
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT6	;1.3%
       		ELSE 
       			BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT7	;2.0%

		;reasons to don't change the VFD output
		TEMP_FG2 = BODYFEED_MODE = 2		;bodyfeed is in manual mode
		TEMP_FG3 = (BF_VFD_DELTA_CHANGE_FLT > 0 & FIL_DIFF_PRESS:AI_MEAS >= DIFF_PRESS_HI_LIM)	;DP is high
		EXPR6 =   (BODYFEED_FLOW:AI_INVL <= 2.0) & (BF_VFD_DELTA_CHANGE_FLT < 0.0);VCM066

		IF(TEMP_FG2 | TEMP_FG3 | EXPR6)THEN  ;VCM066
			BEGIN
			BF_VFD_NO_CHANGE_FG = 1		;don't change the output flag
			SA_TMP_FLT = FIL_DIFF_PRESS:AI_MEAS

			IF(TEMP_FG3)THEN
				BEGIN
				PRINT LOG_ADI, "BF CONTROL: OUTPUT NOT INCREASED BECAUSE HIGH DP, DP = %.1f PSIG", SA_TMP_FLT 
				BODYFEED_ERROR_MGS = "NOT INCREASED BECAUSE HIGH DP"	;egs174
				END

			IF EXPR6 THEN
				PRINT LOG_ADI, "BF CONTROL: OUTPUT NOT DECREASED DUE TO MIN 2 GPM BF FLOW" 

;			IF EXPR6 & (BODYFEED_FLOW:AI_INVL <= 1.9)& (BODYFEED_VFD_CONTROL_PTR:CB_OTVL:1 < BODYFEED_VFD_CNTRL_OUT_MAX) THEN  ;VCM066 try to stay at 2 or above
;				BEGIN
;				SA_TMP_FLT = (BODYFEED_VFD_CNTRL_OUT + 1)
;				PUTMANL BODYFEED_VFD_CONTROL_PTR	
;				PUTOUT BODYFEED_VFD_CONTROL_PTR, SA_TMP_FLT
;				END
			END

		;calculate the new VFD output
		BODYFEED_VFD_CNTRL_OUT_REQ = BODYFEED_VFD_CNTRL_OUT + BF_VFD_DELTA_CHANGE_FLT	;request = actual output + delta

		;VFD output must be between MIN and MAX
		IF (BODYFEED_VFD_CNTRL_OUT_REQ < BODYFEED_VFD_CNTRL_OUT_MIN) THEN
			BODYFEED_VFD_CNTRL_OUT_REQ = BODYFEED_VFD_CNTRL_OUT_MIN
		ELSE IF (BODYFEED_VFD_CNTRL_OUT_REQ > BODYFEED_VFD_CNTRL_OUT_MAX) THEN
			BODYFEED_VFD_CNTRL_OUT_REQ = BODYFEED_VFD_CNTRL_OUT_MAX

;		IF(!BF_VFD_NO_CHANGE_FG)THEN	;change the VFD output if is ok to do it
		IF(!BF_VFD_NO_CHANGE_FG) & (BODYFEED_VFD_CNTRL_OUT != BODYFEED_VFD_CNTRL_OUT_REQ) THEN	;change the VFD output if is ok to do it
			BEGIN
			PRINT LOG_ADI, "BF CONTROL: OUTPUT ADJUSTED FROM %.1f to %.1f", BODYFEED_VFD_CNTRL_OUT, BODYFEED_VFD_CNTRL_OUT_REQ
			BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_CNTRL_OUT_REQ
			PUTMANL BODYFEED_VFD_CONTROL_PTR	
			PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT
			BODYFEED_ERROR_MGS = "OUTPUT CHANGED SUCCESFULLY"
			END

		GOSUB UPDATEDPVAR
		LAST_BF_VFD_DELTA_CHANGE_FLT = BF_VFD_DELTA_CHANGE_FLT
		LAST_BODYFEED_MODE = BODYFEED_MODE	
		TIMERCLR BF_DP_INTERVAL_TMR
		END

	;if is in manual mode
	IF(BODYFEED_MODE = 2)THEN
		BEGIN
		;VFD output must be between MIN and MAX
		IF (BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ < BODYFEED_VFD_CNTRL_OUT_MIN) THEN
			BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ = BODYFEED_VFD_CNTRL_OUT_MIN
		ELSE IF (BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ > BODYFEED_VFD_CNTRL_OUT_MAX) THEN
			BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ = BODYFEED_VFD_CNTRL_OUT_MAX

		BODYFEED_VFD_CNTRL_OUT = BODYFEED_VFD_MANUAL_CNTRL_OUT_REQ
		PUTMANL BODYFEED_VFD_CONTROL_PTR	
		PUTOUT BODYFEED_VFD_CONTROL_PTR, BODYFEED_VFD_CNTRL_OUT
		WAIT 1
		END

	RETURN

;===============================================================================
;		CALCULATE THE DELTA PRESSURE RATE OF RISE	;tta001 added
;===============================================================================
CALDPRATE:

		;calculate the differential pressure rate
		IF(BF_SAMPLE_COUNTER_INT <= 4)THEN	;until 4 samples are taken, a linear DP rate is calculated
			BEGIN
			DP_CHANGE_RATE = (CURRENT_DP_VALUE - LAST_DP_VALUE) * 3600 / BF_DP_INTERVAL_TIME	;convert dp/sec to dp/hr
			END
		ELSE
			BEGIN
			;calculate the DP rate of rise first
			DP_5MIN_FLT = (CURRENT_DP_VALUE - LAST_DP_VALUE) * 12
			DP_10MIN_FLT = (CURRENT_DP_VALUE - LAST_2ND_DP_VALUE) * 6
			DP_15MIN_FLT = (CURRENT_DP_VALUE - LAST_3RD_DP_VALUE) * 4
			DP_20MIN_FLT = (CURRENT_DP_VALUE - LAST_4TH_DP_VALUE) * 3
			;
			DP_CHANGE_RATE = (DP_5MIN_FLT + DP_10MIN_FLT + DP_15MIN_FLT + DP_20MIN_FLT)/4
			END

	RETURN

;===============================================================================
;		UPDATE THE DELTA PRESSURE VARIABLES	;tta001 added
;===============================================================================
UPDATEDPVAR:

	LAST_5TH_DP_VALUE = LAST_4TH_DP_VALUE
	LAST_4TH_DP_VALUE = LAST_3RD_DP_VALUE
	LAST_3RD_DP_VALUE = LAST_2ND_DP_VALUE
	LAST_2ND_DP_VALUE = LAST_DP_VALUE
	LAST_DP_VALUE = CURRENT_DP_VALUE

	RETURN

;==============================================================================
;                       BODYFEED LEVEL CHECKS		;tta001 added
;==============================================================================
BFLEVELCHK:

        IF (BODYFEED_SEL) & (BOD_FEED_TNK_LVL:AI_MEAS < BOD_FEED_TNK_LO_LIM) THEN
                ERROR_STRING = "BODY FEED TANK LEVEL LOW"

        RETURN



;==============================================================================
;		BODYFEED LOW FLOW CHECK			;tta001 added
;==============================================================================
BFLOWFLOWCHK:

	TEMP_FG2 = (BOD_FEED_TNK_OUT_VLV:DEV_STAT = S_1)

;VCM052	IF (BODYFEED_SEL = 1) THEN
	IF (BODYFEED_SEL = 1) & (STEP_TMR > 60) THEN  ;VCM052 DELAY FOR ONE MINUTE
		BEGIN
		ASSIGN TEMP_PTR = SUS_10_TMR
		SUS_TIME = LOW_BODYFEED_FLOW_TIME
		SUS_COND = (BODYFEED_FLOW:AI_INVL < LOW_BODYFEED_FLOW) & BOD_FEED_PMP_ENABLE_FG
		IF SUS_COND THEN
			BEGIN
			IF(TEMP_FG2)THEN
				ERROR_STRING = "INSUFFICIENT BODYFEED FLOW"
			ELSE
				ERROR_STRING = "LOW BODYFEED DILUENT FLOW"
			END
		GOSUB SUSCOND
		IF TEMP_FG THEN   ;VCM050
			BEGIN
			FAIL_MSG = ERROR_STRING
			GOTO FAIL
			END
		END

	RETURN

;==============================================================================
;                       CLEAR VARIABLES FOR BLOWBACK 	;tta001 added
;==============================================================================
CLRVARSBB:

        FIL_FLOW_TOT:IOS_TG:1 = 0		;Disable the flow counter       
;		  FIL_FLOW_TOT:IOS_TG:1 = 0	;Disable the per shift flow counter
	 	  DILUENT_IN_FILTER_FG = 0			 		;ZFG145 VCM048
		  START_FILTER_WITH_DILUENT_FG = 0     ;ZFG146 VCM048 

        WAIT 1
        ;Clear the Beer flow batch, Spire B batch, Hydrohops batch
        FIL_FLOW_TOTD:CAL_VCVL:1 = FIL_FLOW_TOTD:CB_OTVL:1
        PUTMANL FIL_FLOW_TOT
        PUTAUTO FIL_FLOW_TOT
        WAIT 1

	PUTMANL BODYFEED_FLOW_TOT
	WAIT 1
	PUTAUTO BODYFEED_FLOW_TOT
	    
;VCM060	BODYFEED_FLUSH_DONE_FG = 0

   RETURN
;==============================================================================
;                       CHANGE BACK TO DEFAULT VALUES	;tta001 added
;==============================================================================
DEFAULTVALUES:

	BF_VFD_DELTA_CHANGE_FLT1 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT1
	BF_VFD_DELTA_CHANGE_FLT2 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT2
	BF_VFD_DELTA_CHANGE_FLT3 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT3
	BF_VFD_DELTA_CHANGE_FLT4 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT4
	BF_VFD_DELTA_CHANGE_FLT5 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT5
	BF_VFD_DELTA_CHANGE_FLT6 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT6
	BF_VFD_DELTA_CHANGE_FLT7 = DEFAULT_BF_VFD_DELTA_CHANGE_FLT7

	RETURN

;==============================================================================
;                       INITIALIZE AUTO BODYFEED SEETINGS  ;VCM085
;==============================================================================
BODYFEEDINIT:

	 IF (FILTER_MODE = 0) THEN  ;auto mode
		BEGIN 
		; if dual, then set to use Prim 1 BF tank first - start tta001
		IF (DUAL_PRECOAT_SELECTION_FG = 1) THEN   ;VCM084
			BEGIN
			BODYFEED_VFD_CONTROL_PTR:CB_OTLO:1 = 15   ;VCM083
			BODYFEED_VFD_CONTROL_PTR:CB_OTHI:1 = 100	;VCM083
			BODYFEED_MODE = 1 ;auto VCM083
			BF_CNTRL_DELAY_TIME		= 15	;ZIN260	;POL1		;VCM077 ;VCM083
			BODYFEED_VFD_CNTRL_OUT_INIT = 90.0 ; 8/19/20 was 35.0	;ZFL907	;% out			         	;VCM077
			BODYFEED_VFD_CNTRL_OUT_MIN	= 15.0	;ZFL908	;minimum stroke output allowed		;VCM077
			BODYFEED_VFD_CNTRL_OUT_MAX	= 90.0 ; 8/19/20 was 35.0	;ZFL909	;maximum stroke output allowed		;VCM077
			BF_VFD_DELTA_CHANGE_FLT1 	= -5.0	;ZFL924  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT2 	= -3.0	;ZFL925  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT3 	= -1.0	;ZFL926  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT4 	= 1.0	;ZFL927  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT5 	= 3.0	;ZFL928  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT6 	= 6.0	;ZFL929  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT7 	= 10.0	;ZFL930  ;POL1   /* ;VCM077 */
			PRECOAT_TRANSFER_TYPE_PTR = 1
			CIRC_TO_FEED_TIME = CIRC_TO_FEED_TIME_DP
			FIL_FLOW_OS = 500  ;VCM062
			END
		ELSE
			BEGIN
			BF_CNTRL_DELAY_TIME		= 15	;ZIN260	;POL1		;VCM077
			BODYFEED_VFD_CNTRL_OUT_INIT = 30.0 ; 8/19/20 was 35.0	;ZFL907	;% out			         	;VCM077
			BODYFEED_VFD_CNTRL_OUT_MIN	= 15.0	;ZFL908	;minimum stroke output allowed		;VCM077
			BODYFEED_VFD_CNTRL_OUT_MAX	= 30.0 ; 8/19/20 was 35.0	;ZFL909	;maximum stroke output allowed		;VCM077
			BF_VFD_DELTA_CHANGE_FLT1 	= -2.0	;ZFL924  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT2 	= 0.0	;ZFL925  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT3 	= 1.0	;ZFL926  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT4 	= 2.0	;ZFL927  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT5 	= 3.0	;ZFL928  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT6 	= 4.0	;ZFL929  ;POL1   /* ;VCM077 */
			BF_VFD_DELTA_CHANGE_FLT7 	= 5.0	;ZFL930  ;POL1   /* ;VCM077 */
			PRECOAT_TRANSFER_TYPE_PTR = 0
			CIRC_TO_FEED_TIME = CIRC_TO_FEED_TIME_SP	;was the existing time before dual precoat added
			END
		END

	RETURN
;*******************************************************************************
;
;	ERROR HANDLING SUBROUTINE
;
;*******************************************************************************
;
;	ERROR_NUM:	Error number storage
;	ERROR_LIN:	Error line storage
;
;	This subroutine handles any error problems resulting from the
;	execution of this program. Each error is handled in 3 different
;	ways. If the error is insignificant, it is ignored and the program
;	returns to resume execution. If the error is significant but not
;	critical (valid), it is reported to printer and program continues
;	normal execution. If it is critical the program suspends execution
;	a message is printed to the printer, and SKD light is blinked.
;
;	List of specifically handled errors:
;
;	Error	Description				Type
;	-----	-----------				----
;	19	program already in kick subroutine	valid
;	32	undefined communications packet type	insignificant
;	41	pcm db header not loaded		insignificant
;	69	ipn not defined				insignificant
;	87	Holding program that is not running	critical
;	162	no such program this pcm		insignificant
;	165	sequence program already running	critical
;	170	serial number mismatch			critical
;	179	illegal subroutine			insignificant
;	187	could not be remote access		insignificant
;	193	no such program this pcm		valid
;	198	illegal subroutine stack nesting	insignificant
;	199	illegal recipe data file		critical
;	200	recipe file not loaded inot memory	critical
;	201	recipe load not enabled			critical
;	222	boards dead				insignificant
;	226	board error				insignificant
;	245	both pcms down				insignificant

ERRSUB:
	ERROR_NUM = ABS(ERRNUM())
	ERROR_LIN = ERRLIN()

;	if error insignificant , clear error and return to main code
;aj	IF (ERROR_NUM = 32) | (ERROR_NUM = 41) | (ERROR_NUM = 69) THEN
;aj		ERSRET			;return to program

;aj	IF (ERROR_NUM = 162) | (ERROR_NUM = 179) | (ERROR_NUM = 187) THEN
;aj		ERSRET			;return to program

;aj	IF (ERROR_NUM = 198) | (ERROR_NUM = 222) | (ERROR_NUM = 226) THEN
;aj		ERSRET			;return to program

;aj	IF (ERROR_NUM = 245) THEN
;aj		ERSRET			;return to program

;	if error is valid, print message, clear error, and return to program

	PRINT LOG_ADI, "*** ERROR %i AT LINE %i ***",ERROR_NUM,ERROR_LIN
;aj	IF (ERROR_NUM = 193) | (ERROR_NUM = 19) | (ERROR_NUM = 251) THEN
;aj		ERSRET		;return to program

;	if error crtical, message has been printed, blink SKD light
;	wait for engineer to correct problem

;aj	PRINT LOG_ADI, "** SABL PROG. FAILED NEED CORRECTIVE ACTION**"

;aj	SA_MESSAGE = "PROGRAM FAILED"

	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
        LAST_LAMP_STATE = RED
;aj	ERSCLR

;aj begin
	IF (ERROR_NUM = 187) THEN				;aj
		FAIL_MSG = "CROSS PCM COMMUNICATION ERROR"	;aj
	ELSE							;aj
		FAIL_MSG = "PROGRAM ERROR"			;aj
	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN	;aj
		BEGIN					;aj
		ERSCLR					;aj
		GOTO FAIL				;aj
		END					;aj
	SA_MESSAGE = FAIL_MSG				;aj
;aj end
;aj	WAITUNTIL (0)
;aj	LAMP LAMP_ADI,LAMP_NUMBER,BLACK		; skd black(off)
	ERSRET

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#include<sa_ackchk.inc>	/* ehb029 */
	END
