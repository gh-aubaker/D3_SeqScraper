;******************************************************************************
;* 	                                                                      *
;*	                                                                      *
;*     THIS PROGRAM IS FOR PCM8, PRIMARY 2, UNIT PRIM2			      *
;*									      *
;*									      *
;******************************************************************************
;*									      *
;*						        		      *
;*	PROGRAM NAME:	DUA0:[D3DATA.PCM8.SABL]PRIRECSA.SEQ		      *
;*									      *
;* 	                                                                      *
;*     THIS PROGRAM IS FOR PCM8, PRIMARY 2, UNIT PRIM2			      *
;*	                                                                      *
;*									      *
;*	PROJECT NAME:	MILLER BREWING, TRENTON, OHIO			      *
;*	PROJECT NUM :	TI 48851 CO					      *
;*	PCM NUMBER  :	PCM8						      *
;*	WRITTEN BY  :	ACJones						      *
;*									      *
;*	DATE	    :	FEB 18, 1994					      *
;*									      *
;*									      *
;*									      *
;*	MODIFICATION LOG						      *
;*									      *
;*	DATE		PATCH ID	DESCRIPTION			      *
;*	----		--------	-----------			      *
;	22-apr-94	acj000		Startup changes.
;	25-APR-94	DMW042594	want skid to stand out on wyst turnback
;					request.
;	25-apr-94	acj001		Startup changes.
;	02-may-94	acj002		Partial recovery redesign.
;	12-jul-94	acjxxx		Copied from pcm4 & modified for
;					pcm8 (pcm4 split).
;	01-aug-94	acj003		LHX integration changes.
;	03-aug-94	acj004		Integrated test changes.
;	13-sep-94	acj005		Retrofit dvs000,rdk001 for pcm8 startup.
;	06/13/94	DVS000		BAS CODE	;acj005
;	9/23/94		dmw007		added code for lhx feed tank empty 2
;					to tell lhx when recovery controlling
;					lhx chiller.
;	26-sep-94	acj006		Startup changes (LHX).
;	03-oct-94	acj007		Add sluice_inuse checks.
;	13-oct-94	acj008		Startup changes.
;       19-OCT-94	VCM001		DISABLE GLYCOL TO BTA IN SHELL REC. AND
;                                       PUT IN LHX H2O SP FOR TEMP. CONTROL
;*	27-oct-94	VCM002		added code for 8500xv204 & 205	      *
;       08-NOV-94       RDK003          Partial recovery changes.
;       23-NOV-94       VCM003          PUT FF TNK TO DRAIN AFTER CFT MT 1
;       09-JAN-95       VCM004          WAITUNTIL OPER RESP TO GOTO PRI8
;*	14-MAR-95	VCM005		CLOSE SLUICE OUT VALVE IF SLUICE BIT  *
;*					IS NOT FOR PRIMARY 2		      *
;	10-MAR-96	VCM006		REMOVE YST TRNBCKS SOONER
;	11-MAR-96	VCM007		CLOSE 06XV21 IF XFER HI LVL
; 	12-MAR-96	VCM008		IF BTA REC DONE THEN DON'T DO A 
;                                       CONTINUE REQUEST IN XFER MT 3
;	18-NOV-96	VCM009		ALLOW LHX SELECT ENABLE AFTER PARTIAL
;	07-dec-96	VCM010		Changes for polish filter DE
;					modifications (separate drains)
;       22-jul-97	VCM011		Added CFG7
;	15-DEC-99	VCM012		Added CFG*_DRAIN_YST_FG
;       20-MAR-00	VCM013		Remove turnback prompt because yeast
;					drain valves added.
;	08-AUG-03 	MGG000		Logic to clear waituntil across PCM's Ver 11
;	04-JAN-06	VCM014		Since cft recirc line removed used fass hdr diluent 
;					for recovery cft fill 1 step
;	07-apr-06	fly000		added code for cfg10
;	07-apr-06	fly001		use ai_meas for cft level
;  	07-apr-06 	fly002      	Changed fass common variables to allof4
;	18-apr-06	rma003		fixed hold/fail to use stackclr cmd
;	18-apr-06	rma004		store original reason for fail
;	17-MAY-06	VCM016		TELL CFT TO RINSE FOR FULL RECOVERY during shell recover
;	13-oct-06	rma005		remove references to cfg2 and cfg3, suport CFG1 and CFG4 as swing CFGs
;	15-DEC-06	VCM017		Check for fail status in CFGRNPREQ "NO CENT SELECTED" statement
;					to avoid continuous print statements and GOTO FAIL looping 
;	04-JAN-07   	VCM018		Comment out FASS_REC_CFT_FILL_1_PTR
;	01-JUN-10``	MRP002		REPLACE OLD DRAIN VLVS WITH NEW VLVS
;	14-july-10	mrp003		dont empty cft until feed tank is MT
;	24-AUG02010 	VCM019		If not S7 bump up cft fill 1 by 50 bbls
;	01-SEP-2010 	VCM020		Hold FASS in hold/fail if in cft fill 1
;	16-jun-2013 	mrp005		remove fasscooler dil vlv 
;	14-OCT-2014 	VCM021		MEL changes for partial recovery
;	15-OCT-2014	VCM047 		Adding diluent recovery changes
;	17-feb-2016	jaz048		Changing local variables to ALLOF variables to communicate with new BTA programs
;	17-feb-2016	mw049		Changes for MEL
;	14-feb-2017	ldk050		Use ALLOF8 variables for BTA sequence and SA statuses
;	16-JUN-2017	VCM048		Changes for partial recovery
;	11-JAN-2018	VCM049		Changes for precoat circ pump and valves removal
;	12-JAN-2018	PBH001		Commented out a couple more items for the precoat circ pump and valve removal
;	28-FEB-2018	VCM050		Check feed & xfer tank levels for SCAN and LOCAL in CONTCHK
;	25-APR-2018	PBH003		Updates Prior to removing EPN's xv219/220/221 P23 for Precoat Recirc line
;	23-Oct-2019	rma006		Updates for Single Pass Filtration
;	26-oct-2019	rma007		remove message
;	26-oct-2019	rma008		cent_full for cft fill 1 is in pct level
;	29-oct-2019	jaz000		Changes for single pass filtration and CFG11
;	30-oct-2019	rma009		open bta2 anode bypass valve in XFER TNK EMPTY 3
;  30-JAN-2020 JMS001      Added cfg9 to recovery 
;	19-FEB-2020	VCM051		changed CFG10_FG from ZFG742 to ZFG720 to match graphic selection
;	03-MAR-2020	VCM052		If in BYPASS mode set REC_DEV_CNTL flag to allow RUNCMDDEV
;  19-JUN-2020 JMS002      Removed DE pump and sluice destination-now all sluice goes to drain
;  05-NOV-2020 JMS003      Added safety for feed tank to low to start filter feed pump
;  19-NOV-2021 JMS004      Added block diluent valve 8606XV362
;	27-SEP-2022	jac053      POLBMXPROD reserve e-f header dil
;	27-SEP-2022	jac054	   add remopendev/remclosdev   
;  23-DEC-2022 JMS005      Default to full recovery before program exit
;******************************************************************************
;
;	PROGRAM FUNCTION:	This program performs the sequence
;	----------------	administration for the primary filter recovery
;				system
;
;	SUBROUTINES REFERENCED:
;	----------------------
;
;		SUBROUTINE	DESCRIPTION
;		~~~~~~~~~~	~~~~~~~~~~~
;		1.  ERRSUB	PROGRAM RUN-TIME ERRORS
;		2.  OPENDEV	OPENS DEVICES, CHECKING FOR ERRORS
;		3.  CLOSDEV	CLOSES DEVICES, CHECKING FOR ERRORS
;
;===============================================================================
;
;	REFERENCE DOCUMENTS:
;	-------------------
;
;		DOCUMENT			ORIGIN
;		~~~~~~~~			~~~~~~
;
;	1.	Excelerator design		TI
;		DTDD REV1
;
;	2	Functional Specification	MILLER
;
;	3	I/O list			MILLER
;
;*******************************************************************************
;
;	DEFINE UNITS
;	------------

	UNIT PRIM2	;acjxxx

;rma005	COMMON PRIMCM,FASSCM,CFGCM,LHX,ALLOF4,POLCOM	;acj007
	COMMON PRIMCM,FASSCM,CFGCM,LHX,ALLOF4,POLCOM,ALLOF8,ALLOF5	;rma005
	RUNIT PRIM2

;*******************************************************************************
;
;	VARIABLE DEFINITION
;	-------------------

	BLACK				==	0		; EQUATE	Skid panel black
	GREEN				==	1		; EQUATE	Skid panel green
	RED				==	2		; EQUATE	Skid panel flash red
	YELLOW				==	3		; EQUATE	Skid panel flash red
	NOT_RUNNING			==	-1		; EQUATE	Sabl program not running
	SB_IBAD				==	2048		; EQUATE	Ibad
	LOG_ADI				==	12		; EQUATE	Log adi
	LAMP_ADI			==	11		; EQUATE	Lamp adi
	CIP_RELEASE			==	0		; EQUATE	CIP RELEASE 170 SERVICE
	CIP_REQUEST			==	1		; EQUATE	CIP REQUEST 170 SERVICE
	CIP_CONFIRMED			==	11		; EQUATE	CIP REQUEST CONFIRMED

	INTERLOCKED			==	16		; EQUATE	INTERLOCKED STATUS BIT ($S4)
	INTLK				==	16384		; EQUATE	INTERLOCK BIT ($T30)
	SEQAUTO				==	32		; EQUATE	SEQAUTO BIT ($T5)
	BRAND_LENGTH			==	2		; EQUATE	Brand string length
	NO_BRAND			==	20		; EQUATE	Number of brands
	U_PRIM2				==	3		; EQUATE	PRIM2 unit number	;acjxxx
	LHX_AVAIL			==	1		; EQUATE	LHX not in use (NONE status on LHX selector device)
;VCM050
	BIT_RL      == 128      ;local remote bit                     
	BIT_AM      == 64       ;controller in auto                   
	BIT_ALLIN   == 16       ;ai_almct field bit for alarm inhibit 
	BIT_SCAN    == 8        ;scan bit                             

; EPN REFERENCES

;AI
	FIL_FEED_TNK_LVL		==	'8509LI4'	; EPN		Primary Filter Feed Tank Level Transmitter	;acjxxx
	FIL_FEED_FLOW			==	'8606FC22'	; EPN		Primary Filter Feed Flow Element	;acjxxx
	XFER_TNK_LVL			==	'8509LI5'	; EPN		Filter Transfer Tank Level Transmitter	;acjxxx
	FIL_FLOW_TOT			==	'8606FQ22B'	; EPN		Filter flow totalizer			;acjxxx
	FIL_FLOW_TOTD			==	'8606FQ22D'	; EPN		Filter flow totalizer			;acjxxx

	LHX_TNK_LVL			==	'8510LI4'	; EPN		LHX Tank Level Transmitter
	CFT1_LVL			==	'8412LI1'	; EPN		Centrifuge Feed Tank 1 Level Transmitter
	CFT2_LVL			==	'8412LI2'	; EPN		Centrifuge Feed Tank 2 Level Transmitter
	CFT3_LVL			==	'8412LI3'	; EPN		Centrifuge Feed Tank 3 Level Transmitter
	LHX_COOLER_TEMP			==	'8610TC24'	; EPN		LHX Cooler Temperature
	CFT2_BBLS_AI	==	'8412VI2'	; EPN		Centrifuge Feed Tank 2 Level Transmitter VCM048

;DIN

;DOT

;DEV
	FIL_FEED_TNK_HI_LVL		==	'8509LH41'	; EPN		Primary Filter Feed Tank High Level Probe	;acjxxx
	FIL_FEED_PMP			==	'8606P21'	; EPN		Primary Filter Feed Pump		;acjxxx
	BLOWBACK_VLV			==	'8606XV206'	; EPN		Primary Filter Blowback Valve		;acjxxx
;	DIL_IN_VLV			==	'8632XV23' 	; EPN		Diluent Inlet Valve to Fill Supply Line	;acjxxx
	SLUICE_OUT_VLV			==	'8606XV201'	; EPN		Primary Filter Sluice Outlet Valve	;acj007

	CFT1_IN_VLV			==	'8412XV103'	; EPN		Cent Feed Tank Inlet Valve
	CFT2_IN_VLV			==	'8412XV203'	; EPN		Cent Feed Tank Inlet Valve
	CFT3_IN_VLV			==	'8412XV303'	; EPN		Cent Feed Tank Inlet Valve

	CFT1_MODE			==	'8412V1'	; EPN		Centrifuge Feed Tank 1 Level Mode
	CFT2_MODE			==	'8412V2'	; EPN		Centrifuge Feed Tank 2 Level Mode
	CFT3_MODE			==	'8412V3'	; EPN		Centrifuge Feed Tank 3 Level Mode

	BTA2_ANODE_BYPASS_VLV == '8608XV253'	;rma009 BTA2 Anode bypass valve

	XFER_TNK_HI_LVL			==	'8509LH51'	; EPN		Filter Transfer Tank High Level probe	;acjxxx
	FIL_FEED_TNK_LVL_MODE		==	'8509V4'	; EPN		Filter Feed Tank Level Mode		;acjxxx
	XFER_TNK_LVL_MODE		==	'8509V5'	; EPN		Filter Transfer Tank Level Mode		;acjxxx

	LHX_TNK_LVL_MODE		==	'8510V4'	; EPN		LHX Tank Level Mode
	LHX_SEL				==	'LHXSEL'	; EPN		LHX selector
	SWING_SEL			==	'SWINGSEL'	; EPN		Filter F3 Swing selector

;BMXD3_BTAE_FHDR_DIL_BUSY_DIN

	BMXD3_BTAE_HDR_DIL_BUSY_DIN	==	'BMXEDILBUSY'		/*BTA 1, E F hdr dil line is busy BY AGE MATRIX POLBMXPROD jac0054*/	
	D3BMX_BTAE_HDR_DIL_BUSY_DOT	==	'D3EDILBUSY'		/*BTA 1, E F fhdr dil line is busy POLBMXPROD jac0054*/	
	BMXD3_BTAF_HDR_DIL_BUSY_DIN	==	'BMXFDILBUSY'		/*BTA 1, E F hdr dil line is busy BY AGE MATRIX POLBMXPROD jac0054*/	
	D3BMX_BTAF_HDR_DIL_BUSY_DOT	==	'D3FDILBUSY'		/*BTA 1, E F fhdr dil line is busy POLBMXPROD jac0054*/	

; UNIT REFERENCES

	STOP_CMD			==	ZFG700		; PRIM1		Stop command
	START_CMD			==	ZFG701		; PRIM1		Start command
	HOLD_CMD			==	ZFG702		; PRIM1		Hold command
	CONT_CMD			==	ZFG703		; PRIM1		Continue command
	SC_SA_STOP_CMD			==	ZFG704		; PRIM1		Sc sa stop command
	SC_SA_CONT_CMD			==	ZFG705		; PRIM1		Sc sa continue command
	DEV_IN_MANUAL_FG		==	ZFG706		; PRIM1		Device in manual
	IBAD_FG				==	ZFG707		; PRIM1		Ai ibad check flag
	DEV_FAILED_FG			==	ZFG708		; PRIM1		Device failed flag

	TEMP_FG				==	ZFG709		; PRIM1		Temporary flag
	FIL_FEED_PMP_ENABLE_FG		==	ZFG710		; PRIM1		Fil feed pump enable
	CONT_CHK_FG			==	ZFG711		; PRIM1		Continuous check flag
	PARTIAL_REC_SEL			==	ZFG712		; PRIM1		Partial recovery select
	DATA_FAIL_FG			==	ZFG713		; PRIM1		Data fail flag
	ALREADY_INITIALIZED_FG		==	ZFG714		; PRIM1		SC ALREADY HAS RUN INITIALIZATION
	CFG1_FG				==	ZFG715		; PRIM1		Centrifuge 1 selected
;rma005	CFG4_FG				==	ZFG715		; PRIM1		Centrifuge 1/3 selected
	CFG4_FG				==	ZFG717		;rma005 PRIM1		Centrifuge 4 selected
;rma005	CFG5_FG				==	ZFG716		; PRIM1		Centrifuge 2/4 selected
;rma005	CFG6_FG				==	ZFG717		; PRIM1		Centrifuge 3/6 selected
;rma006	CFG7_FG				==	ZFG720  ;VCM011	; PRIM1		Centrifuge 7 selected
;rma006	CFG8_FG				==	ZFG721  ;VCM011	; PRIM1		Centrifuge 8 selected
	CFG11_FG				==	ZFG721  ;rma006	; PRIM1		Centrifuge 11 selected
	CFG9_FG				==	ZFG723  ;fly000	; PRIM1		Centrifuge 10 selected
;VCM051	CFG10_FG			==      ZFG742  ;fly000 ; PRIM1  	Centrifuge 10 selected
	CFG10_FG			==      ZFG720  ;VCM051 ; PRIM1  	Centrifuge 10 selected
	SKIP_FASSHDR_REC_FG 		==	ZFG718		; PRIM1		Skip fass header recovery flag	;acj000
	TD_INTO1_FG			==	ZFG719		; PRIM1		TD into flag	;acj006

	PRI_CHK_REQ			==	ZFG724		; PRIM1		Primary filter check request
	PRI_OS_REQ			==	ZFG725		; PRIM1		Primary filter on stream request
	PRI_RECIRC_REQ			==	ZFG726		; PRIM1		Primary filter recirc request
	PRI_BLOWBACK_REQ		==	ZFG727		; PRIM1		Primary filter blowback request
	PRI_HOLD_REQ			==	ZFG728		; PRIM1		Primary filter hold request
	PRI_CONT_REQ			==	ZFG729		; PRIM1		Primary filter continue request

	SECOND_PASS_FG			==	ZFG735		;jac054  TO USE STANDARD ;VARS ARE USED IN PRIRECDEV EQUATES

	EXPR1						==	ZFG840		;rma006
	EXPR2						==	ZFG841		;rma006
	EXPR3						==	ZFG842		;rma006
	EXPR4						==	ZFG843		;rma006


;mw049	BTA_RUN_REQ			==	ZFG730		; PRIM1		Beer to aging run request
;mw049	BTA_HOLD_REQ			==	ZFG731		; PRIM1		Beer to aging hold request
;mw049	BTA_REC_REQ			==	ZFG732		; PRIM1		Beer to aging release request
	PRIM2_BTA2_RUN_REQ_FG_ALLOF8	==	TFG157          ; PRIM1		Beer to aging run request	;mw049
	PRIM2_BTA2_HOLD_REQ_FG_ALLOF8	==	TFG158          ; PRIM1		Beer to aging hold request	;mw049
	PRIM2_BTA2_REC_REQ_FG_ALLOF8	==	TFG159          ; PRIM1		Beer to aging release request	;mw049

	REC_DEV_CNTL			==	ZFG733		; PRIM1		Recovery pgm controlling devices
;mw049	BTA_DISABLE_GLYCOL		==	ZFG734		; PRIM1		Beer to aging - Disable glycol
;mw049	BTA_CONT_REQ			==	ZFG735		;RDK001		;acj005
	BTA2_DISABLE_GLYCOL_FG_ALLOF8	==	TFG160          ; PRIM1		Beer to aging - Disable glycol	;mw049
	BTA2_CONT_REQ_FG_ALLOF8		==	TFG161	;mw049
	TEMP_SC_FG			==	ZFG740		; PRIM1		Temporary sc flag
	SUS_COND			==	ZFG741		; PRIM1		Sustained condition flag

	SC_MSG_TMR			==	ZST700		; PRIM1		Sc message timer
	IBAD_TMR			==	ZST701		; PRIM1		Ibad timer
	STEP_TMR			==	ZST702		; PRIM1		Step timer
	TIMER1_TMR			==	ZST703		; PRIM1		Timer1 timer

	SUS_1_TMR			==	ZST704		; PRIM1		Sustained condition timer

	SC_MSG_TIME			==	ZIN700		; PRIM1		Sc message time
	ERROR_NUM			==	ZIN703		; PRIM1		Error number
	ERROR_LIN			==	ZIN704		; PRIM1		Error line
	SA_STATE			==	ZIN707		; PRIM1		Sa state
	STK_CNT				==	ZIN710		; PRIM1		Stack clear counter
	IBAD_SECONDS			==	ZIN711		; PRIM1		Ibad time
	UNIT_NUMBER			==	ZIN712		; PRIM1		Unit number
	LAST_LAMP_STATE			==	ZIN713		; PRIM1		LAST STATE OF SKID LAMP (UPDSKD)
	LAMP_NUMBER			==	ZIN714		; PRIM1		LAMP NUMBER USED BY SA PROGRAM
	CMD_SA_STATUS_INT		==	ZIN715		; PRIM1		Run command devices status
	TIME_OUT			==	ZIN717		; PRIM1		CSR FLOW DELAY TIME TO BEGIN CHKING FLOW SWITCH.
	BAT_ERR				==	ZIN718		; PRIM1		BATCH TRACKING ERROR CODE

	SHELL_REC_TIME			==	ZIN720		; PRIM1		Shell recover step time
	PCT_RINSE_TIME			==	ZIN721		; PRIM1		Precoat line reclaim step time
	RINS_FILL_TIME			==	ZIN722		; PRIM1		Filter feed line rinse step time
	RINS_CIRC_TIME			==	ZIN723		; PRIM1		Circ to feed rinse step time
	BB_RINSE_TIME			==	ZIN724		; PRIM1		Blowback rinse step time
	RINS_ONL_TIME			==	ZIN725		; PRIM1		On stream line rinse step time
	FEED_FILL_FINAL_TIME		==	ZIN726		; PRIM1		Primary feed tk fill final step time
	XFER_FILL_FINAL_TIME		==	ZIN727		; PRIM1		Primary transfr fill final step time
	RINSE_1_TIME			==	ZIN728		; PRIM1		Rinse 1 step time
	CFT_FILL_TIME			==	ZIN729		; PRIM1		Cent feed tank fill step time

	PRI_RESP			==	ZIN731		; PRIM1		Primary filter sequence response
;jaz048	BTA_RESP			==	ZIN732		; PRIM1		Beer to aging sequence response
	BTA2_PRIM2_RESP_ALLOF8		==	TIN191 		; PRIM1		Beer to agining sequence response moved to allof8 ;jaz048
	CENT_FEED_MIN_LVL_TIME		==	ZIN735		; PRIM1		Centrifuge Feed Tank Minimum Level Time
;acj003	LHX_MIN_LVL_TIME		==	ZIN736		; PRIM1		LHX Tank Minimum Level Time
	RECIRC_LINE_TIME		==	ZIN737		; PRIM1		Recirc line rinse step time
	FASS_COOL_TIME			==	ZIN738		; PRIM1		Fass cooler rinse step time
	XFER_FILL_1_TIME		==	ZIN739		; PRIM1		Xfer tank fill 1 step time
	SUS_TIME			==	ZIN740		; PRIM1		Sustained condition time

	FIL_FEED_MIN_LVL_TIME		==	ZIN121		; PRIM1		Filter Feed Tank Minimum Level Time
	SLUICE_BIT			==	ZIN135		; PRIM1		Sluice valve inuse reservation #	;acj007
	PRIM_LHX			==	ZIN150		; PRIM1		Filter Select status in lhxsel
	SA_TMP_INT		==	ZIN845		; PRIM1		VCM048
;mw049 	XFER_TNK_DRAIN_LVL		==	ZIN845		; PRIM1		Filter Transfer Tank Drain Level Limit
;mw049	XFER_TNK_MIN_TIME		==	ZIN846		; PRIM1		Transfer Tank Minimum Level Time
        PRIM2_XFER_TNK_DRAIN_LVL_ALLOF8	==	TIN196          ; PRIM1		Filter Transfer Tank Drain Level Limit ;mw049
        PRIM2_XFER_TNK_MIN_TIME_ALLOF8	==	TIN187          ; PRIM1		Transfer Tank Minimum Level Time       ;mw049


	CLS_REM_LOOP_CNT                ==      ZIN158		;* CHECKED remclsdev loop counter jac054 *;
	OPN_REM_LOOP_CNT                ==      ZIN159		;* remopndev loop counter jac054 *;


	ONSTREAM_VOL			==	ZFL707		; PRIM1		On stream volume
	FEED_FULL			==	ZFL708		; PRIM1		Filter feed tank full level
	XFER_FULL			==	ZFL709		; PRIM1		Xfer tank full level
	CENT_FEED_TNK_DRAIN_LVL		==	ZFL710		; PRIM1		Centrifuge Feed Tank Drain Level Limit
;acj003	LHX_TNK_DRAIN_LVL		==	ZFL711		; PRIM1		LHX Tank Drain Level Limit
	CENT_FULL			==	ZFL712		; PRIM1		Cent feed tank full level
	LHX_COOLER_TEMP_H2O		==	ZFL713		; PRIM1		LHX cooler temp for h2o
	CENT_FULL_LHX			==	ZFL714		; PRIM1		Cent feed tank full level (with lhx)
	CENT_FULL_NOLHX			==	ZFL715		; PRIM1		Cent feed tank full level (without lhx)

	BYPASSED_CENT_FULL_LHX	== ZFL740		;rma006
	BYPASSED_CENT_FULL_XFR	== ZFL741		;rma006

	FIL_FEED_TNK_DRAIN_LVL		==	ZFL117		; PRIM1		Filter Feed Tank Drain Level Limit

;DVS000													;acj005
	BAS_BTA_FILL_FG			==	ZFG134		; PRIM1 BTA BAS RUN COMPLETE FLAG	;acj005
	ONSTREAM_FG			==	ZFG135		;RDK001					;acj005
	SA_TMP_FLT		==	ZFL830		; PRIM1	VCM048
;mw049	INPUT_FERM_1_BBLS		==	ZFL811		; PRIM1	BTA BAS INPUT FERM1		;acj005
;mw049	INPUT_FERM_2_BBLS		==	ZFL812		; PRIM1	BTA BAS INPUT FERM2		;acj005
;mw049	INPUT_FERM_3_BBLS		==	ZFL813		; PRIM1	BTA BAS INPUT FERM3		;acj005
;mw049	INPUT_FERM_4_BBLS		==	ZFL814		; PRIM1	BTA BAS INPUT FERM4		;acj005
;mw049	INPUT_FERM_5_BBLS		==	ZFL815		; PRIM1	BTA BAS INPUT FERM5		;acj005
;mw049	INPUT_FERM_6_BBLS		==	ZFL816		; PRIM1	BTA BAS INPUT FERM6		;acj005
	BTA2_INPUT_FERM_1_BBLS_ALLOF8	==	TFL021		; PRIM1	BTA BAS INPUT FERM1	;mw049		
	BTA2_INPUT_FERM_2_BBLS_ALLOF8	==	TFL022		; PRIM1	BTA BAS INPUT FERM2	;mw049	
	BTA2_INPUT_FERM_3_BBLS_ALLOF8	==	TFL023		; PRIM1	BTA BAS INPUT FERM3	;mw049	
	BTA2_INPUT_FERM_4_BBLS_ALLOF8	==	TFL024		; PRIM1	BTA BAS INPUT FERM4	;mw049	
	BTA2_INPUT_FERM_5_BBLS_ALLOF8	==	TFL025		; PRIM1	BTA BAS INPUT FERM5	;mw049	
	BTA2_INPUT_FERM_6_BBLS_ALLOF8	==	TFL026		; PRIM1	BTA BAS INPUT FERM6	;mw049
        BTA_BATCH_CTR                   ==	ZFL800          ; PRIM1
	PARTIAL_REC_CFT_BBLS		==	ZFL840		;VCM048 for partial recovery
	INPUT_FERM_1_ID			==	ZSG843		; PRIM1	BTA BAS INPUT FERM ID		;acj005
	INPUT_FERM_2_ID			==	ZSG844		; PRIM1	BTA BAS INPUT FERM ID		;acj005
	INPUT_FERM_3_ID			==	ZSG845		; PRIM1	BTA BAS INPUT FERM ID		;acj005
	INPUT_FERM_4_ID			==	ZSG846		; PRIM1	BTA BAS INPUT FERM ID		;acj005
	INPUT_FERM_5_ID			==	ZSG847		; PRIM1	BTA BAS INPUT FERM ID		;acj005
	INPUT_FERM_6_ID			==	ZSG848		; PRIM1	BTA BAS INPUT FERM ID		;acj005
;DVS000													;acj005

	SC_MESSAGE			==	ZSG700		; PRIM1		Sc message
;	BRAND_ID			==	ZSG701		; PRIM1		Brand
	BRAND_ID			==	ZSG002		; PRIM1		Brand
	BRAND_ACTUAL			==	ZSG102		; PRIM1		PRIMARY FILTER BRAND  (2 char)
	SA_STATUS			==	ZSG702		; PRIM1		Sa status
	SEQ_STATUS			==	ZSG703		; PRIM1		Seq status
	FAIL_MSG			==	ZSG704		; PRIM1		Ibad fail message
	SA_MESSAGE			==	ZSG705		; PRIM1		Sa message
	SA_2_MESSAGE			==	ZSG629		; RDK001	Sa message	;acj005
	SA_3_MESSAGE			==	ZSG707		; RDK001	Sa message	;acj005
	OPER_RESPONSE			==	ZSG706		; PRIM1		Operator response
	UNIT_SG				==	ZSG708		; PRIM1		Unit string
	BID_NAME			==	ZSG709		; PRIM1		Batch id name string

	ORIGINAL_FAIL_MSG		==	ZSG621		;rma004 

	PRI_SEQ_STATUS			==	ZSG006		; PRIM1		Primary Filter Seq status
	SA_TMP_SG			==	ZSG805		; PRIM1	VCM048
;ldk050        BTA_SA_STATUS			==	ZSG805		; PRIM1		Sa status
;ldk050	BTA_SEQ_STATUS			==	ZSG806		; PRIM1		Beer to aging Seq status

	DEV_PTR				==	ZPT700		; PRIM1		Device pointer
	SEQ_REQ_PTR			==	ZPT701		; PRIM1		Sequence request pointer
	SEQ_RESP_PTR			==	ZPT702		; PRIM1		Sequence response pointer
	TEMP_PTR			==	ZPT703		; PRIM1		Temporary pointer
	CFG_DISABLE_GLYCOL_PTR		==	ZPT704		; PRIM1		Fass cooler disable glycol pointer
	FIL_FEED_TNK_CO2_OK_PTR		==	ZPT705		; PRIM1		Filter Feed Tank Counterpressure ok pointer
	XFER_TNK_CO2_OK_PTR		==	ZPT706		; PRIM1		Filter xfer Tank Counterpressure ok pointer
	FIL_FEED_TNK_BRAND_PTR		==	ZPT707		; PRIM1		Filter feed tank brand pointer
	XFER_TNK_BRAND_PTR		==	ZPT708		; PRIM1		Filter xfer tank brand pointer
	CENT_FEED_TNK_SEL_PTR		==	ZPT709		; PRIM1		Centrifuge feed tank select pointer
	CENT_FEED_TNK_LVL_PTR		==	ZPT710		; PRIM1		Centrifuge Feed Tank Level pointer
	CENT_FEED_TNK_MODE_PTR		==	ZPT711		; PRIM1		Centrifuge Feed Tank Level Mode pointer
	CFT_IN_VLV_PTR			==	ZPT712		; PRIM1		Centrifuge Feed Tank in vlv pointer
	CFT_VLV_OPEN_PTR		==	ZPT713		; PRIM1		Centrifuge Feed Tank in vlv open pointer	;acj001

	SEQ_STATUS_PTR 			== 	ZPT714		;jac054 TRYING TO USE A STANDARD INCLUDE AND NEEDING SOME STANDARD VARS
;VCM018   FASS_REC_CFT_FILL_1_PTR  == ZPT714   ;VCM014
;RECIPE
		  RECIPE_LOW_DILUENT_ADD_FG	==	RFG001		;VCM047

;COMMON
	CFG1_RUN_REQ_CFGCM		==	CFG031		; CFGCM		Centrifuge 1 run process request
	CFG1_RNP_REQ_CFGCM		==	CFG032		; CFGCM		Centrifuge 1 run not process request
	CFG1_REL_REQ_CFGCM		==	CFG033		; CFGCM		Centrifuge 1 release request
;rma005	CFG2_RUN_REQ_CFGCM		==	CFG034		; CFGCM		Centrifuge 2 run process request
;rma005	CFG2_RNP_REQ_CFGCM		==	CFG035		; CFGCM		Centrifuge 2 run not process request
;rma005	CFG2_REL_REQ_CFGCM		==	CFG036		; CFGCM		Centrifuge 2 release request
;rma005	CFG3_RUN_REQ_CFGCM		==	CFG037		; CFGCM		Centrifuge 3 run process request
;rma005	CFG3_RNP_REQ_CFGCM		==	CFG038		; CFGCM		Centrifuge 3 run not process request
;rma005	CFG3_REL_REQ_CFGCM		==	CFG039		; CFGCM		Centrifuge 3 release request
	CFG4_RUN_REQ_CFGCM		==	CFG040		; CFGCM		Centrifuge 4 run process request
	CFG4_RNP_REQ_CFGCM		==	CFG041		; CFGCM		Centrifuge 4 run not process request
	CFG4_REL_REQ_CFGCM		==	CFG042		; CFGCM		Centrifuge 4 release request
;rma005	CFG5_RUN_REQ_CFGCM		==	CFG043		; CFGCM		Centrifuge 5 run process request
;rma005	CFG5_RNP_REQ_CFGCM		==	CFG044		; CFGCM		Centrifuge 5 run not process request
;rma005	CFG5_REL_REQ_CFGCM		==	CFG045		; CFGCM		Centrifuge 5 release request
;rma005	CFG6_RUN_REQ_CFGCM		==	CFG046		; CFGCM		Centrifuge 6 run process request
;rma005	CFG6_RNP_REQ_CFGCM		==	CFG047		; CFGCM		Centrifuge 6 run not process request
;rma005	CFG6_REL_REQ_CFGCM		==	CFG048		; CFGCM		Centrifuge 6 release request
;rma006	CFG7_RUN_REQ_CFGCM		==	CFG082	;VCM011	; CFGCM		Centrifuge 7 run process request
;rma006	CFG7_RNP_REQ_CFGCM		==	CFG083		; CFGCM		Centrifuge 7 run not process request
;rma006	CFG7_REL_REQ_CFGCM     		==	CFG084		; CFGCM		Centrifuge 7 release request
;rma006	CFG8_RUN_REQ_CFGCM		==	CFG091	;VCM011	; CFGCM		Centrifuge 8 run process request
;rma006	CFG8_RNP_REQ_CFGCM		==	CFG092		; CFGCM		Centrifuge 8 run not process request
;rma006	CFG8_REL_REQ_CFGCM     		==	CFG093		; CFGCM		Centrifuge 8 release request
        CFG1_DRAIN_YST_FG_CFGCM		==	CFG104		; CFGCM	rma005	Centrifuge yeast drain request
        CFG4_DRAIN_YST_FG_CFGCM		==	CFG108		; CFGCM	VCM012	Centrifuge yeast drain request
;rma005        CFG5_DRAIN_YST_FG_CFGCM		==	CFG109		; CFGCM	VCM012	Centrifuge yeast drain request
;rma005        CFG6_DRAIN_YST_FG_CFGCM		==	CFG110		; CFGCM	VCM012	Centrifuge yeast drain request
;rma006        CFG7_DRAIN_YST_FG_CFGCM		==	CFG087		; CFGCM	VCM012	Centrifuge 7 release request
;rma006        CFG8_DRAIN_YST_FG_CFGCM		==	CFG107		; CFGCM	VCM012	Centrifuge yeast drain request

        PRIM2_RECOVERY_FG_CFGCM         ==      CFG088		; CFGCM         Prim2 in recovery

	FC1_DISABLE_GLYCOL_CFGCM	==	CFG049		; CFGCM		Fass cooler 1 disable glycol
	FC2_DISABLE_GLYCOL_CFGCM	==	CFG050		; CFGCM		Fass cooler 2 disable glycol

	CFG10_DRAIN_YST_FG_CFGCM	== 	CFG138		;fly000
	CFG10_RUN_REQ_ALLOF4		==	OFG136		;fly000  
	CFG10_RNP_REQ_ALLOF4     	==	OFG293		;fly000
	CFG10_RELEASE_REQ_ALLOF4     	==	OFG219		;fly000
	CFG10_RESP_ALLOF4		== 	OIN224		;rma000

	CFG9_RUN_REQ_ALLOF4			==	OFG135		;rma006  
	CFG9_RNP_REQ_ALLOF4     	==	OFG292		;rma006
	CFG9_RELEASE_REQ_ALLOF4     	==	OFG218		;rma006
	CFG9_DRAIN_YST_FG_CFGCM		== CFG137		;rma006
	CFG9_RESP_ALLOF4				== OIN223		;rma006

;jaz000	CFG11_RESP_ALLOF4			== OIN939	;rma006
	CFG11_RESP_ALLOF4			== OIN510	;jaz000 ;need to move since OIN939 is an MCMS variable
	CFG11_RELEASE_REQ_ALLOF4		== OFG452	;jaz000 
	CFG11_RECOVER_REQ_ALLOF4		== OFG453	;jaz000 
	CFG11_RUN_REQ_ALLOF4			== OFG454	;jaz000 
	CFG11_HOLD_REQ_FG_ALLOF4		== OFG455	;jaz000 
	CFG11_RNP_REQ_ALLOF4			== OFG456	;jaz000 
	CFG11_DRAIN_YST_FG_ALLOF4		== OFG478	;rma006
	CFG11_RESERVE_SG_ALLOF4			== OSG257	;rma006	


	FASSA_REC_REQ_FASSCM		==	FFG000		; FASSCM	Fass header A recover request
	FASSA_HOLD_REQ_FASSCM		==	FFG001		; FASSCM	Fass header A hold request
	FASSB_REC_REQ_FASSCM		==	FFG002		; FASSCM	Fass header B recover request
	FASSB_HOLD_REQ_FASSCM		==	FFG003		; FASSCM	Fass header B hold request
	FASSC_REC_REQ_FASSCM		==	FFG004		; FASSCM	Fass header C recover request
	FASSC_HOLD_REQ_FASSCM		==	FFG005		; FASSCM	Fass header C hold request
	FASSD_REC_REQ_FASSCM		==	FFG006		; FASSCM	Fass header D recover request
	FASSD_HOLD_REQ_FASSCM		==	FFG007		; FASSCM	Fass header D hold request

	FASSA_HOLD_REQ_FG_ALLOF4 	==  	OFG171     	;fly002
	FASSB_HOLD_REQ_FG_ALLOF4 	==  	OFG172     	;fly002
	FASSC_HOLD_REQ_FG_ALLOF4 	==  	OFG173     	;fly002
	FASSD_HOLD_REQ_FG_ALLOF4 	==  	OFG174     	;fly002
	FASSA_RECOVER_REQ_FG_ALLOF4 	== 	OFG179    	;fly002
	FASSB_RECOVER_REQ_FG_ALLOF4 	== 	OFG180    	;fly002
	FASSC_RECOVER_REQ_FG_ALLOF4 	== 	OFG181    	;fly002
	FASSD_RECOVER_REQ_FG_ALLOF4 	== 	OFG182    	;fly002

	P1_FEED_CO2_OK_FG_PRIMCM	==	HFG000		; PRIMCM	Filter P1 Feed Tank Counterpressure ok flag
	P2_FEED_CO2_OK_FG_PRIMCM	==	HFG001		; PRIMCM	Filter P2 Feed Tank Counterpressure ok flag
	P1_XFER_CO2_OK_FG_PRIMCM	==	HFG006		; PRIMCM	Filter P1 xfer Tank Counterpressure ok flag
	P2_XFER_CO2_OK_FG_PRIMCM	==	HFG007		; PRIMCM	Filter P2 xfer Tank Counterpressure ok flag
   P1_CFT_RINSE_CMD_PRIMCM    == HFG040  ;VCM016/* TELL CFT TO RINSE FOR FULL RECOVERY */
   P2_CFT_RINSE_CMD_PRIMCM    == HFG041  ;VCM016/* TELL CFT TO RINSE FOR FULL RECOVERY */

	LHX_TNK_CO2_OK_FG_LHX		==	LFG020		; LHX		LHX counterpressure ok flag
	LHX_RUN_REQ_LHX			==	LFG021		; LHX		LHX run request
	LHX_HOLD_REQ_LHX		==	LFG022		; LHX		LHX hold request
	LHX_REL_REQ_LHX			==	LFG023		; LHX		LHX release request
	LHX_FEED_TANK_EMPTY_2_FG	==	LFG136		; LHX		PRIMARY RECOVERY IN LHX FEED TANK EMPTY 2 STATE

	LHX_MIN_LVL_TIME		==	LIN121		; LHX		LHX Tank Minimum Level Time	;acj003
	LHX_TNK_DRAIN_LVL		==	LFL102		; LHX		LHX Tank Drain Level Limit	;acj003

	CFG1_RESP_CFGCM			==	CIN040		; CFGCM		Centrifuge 1 sequence response
;rma005	CFG2_RESP_CFGCM			==	CIN041		; CFGCM		Centrifuge 2 sequence response
;rma005	CFG3_RESP_CFGCM			==	CIN042		; CFGCM		Centrifuge 3 sequence response
	CFG4_RESP_CFGCM			==	CIN043		; CFGCM		Centrifuge 4 sequence response
;rma005	CFG5_RESP_CFGCM			==	CIN044		; CFGCM		Centrifuge 5 sequence response
;rma005	CFG6_RESP_CFGCM			==	CIN045		; CFGCM		Centrifuge 6 sequence response
;rma006	CFG7_RESP_CFGCM	  		==	CIN060  ;VCM011	; CFGCM		Centrifuge 7 sequence response
;rma006	CFG8_RESP_CFGCM	  		==	CIN067  ;VCM011	; CFGCM		Centrifuge 8 sequence response
	CFG1_RUN_GROUP_REQ_CFGCM        ==      CIN080          ; CFGCM  rma005  Centrifuge 1 run group select
	CFG1_RUN_GROUP_SEL_CFGCM        ==      CIN081          ; CFGCM  rma005  Centrifuge 1 run group select
	CFG4_RUN_GROUP_REQ_CFGCM        ==      CIN082          ; CFGCM  rma005  Centrifuge 4 run group select
	CFG4_RUN_GROUP_SEL_CFGCM        ==      CIN083          ; CFGCM  rma005  Centrifuge 4 run group select

;rma006   CFG7_RUN_GROUP_SEL_CFGCM	==	CIN064  ;VCM011	; CFGCM	        Centrifuge 7 CFG group sel
;rma006   CFG8_RUN_GROUP_SEL_CFGCM	==	CIN071  ;VCM011	; CFGCM	        Centrifuge 8 CFG group sel

;rma005	CFG123_FEED_TNK_SEL_CFGCM	==	CIN046		; CFGCM		Centrifuge 1,2,3 feed tank select
;rma005	CFG456_FEED_TNK_SEL_CFGCM	==	CIN047		; CFGCM		Centrifuge 4,5,6 feed tank select
;rma006	CFG7_FEED_TNK_SEL_CFGCM		==	CIN061  ;VCM011	; CFGCM		Centrifuge 7 feed tank select
;rma006	CFG8_FEED_TNK_SEL_CFGCM		==	CIN068  ;VCM011	; CFGCM		Centrifuge 8 feed tank select

	DEST_TANK_A_FASSCM		==	FIN002		; FASSCM	Fass header A destination tank
	DEST_TANK_B_FASSCM		==	FIN003		; FASSCM	Fass header B destination tank
	DEST_TANK_C_FASSCM		==	FIN004		; FASSCM	Fass header C destination tank
	DEST_TANK_D_FASSCM		==	FIN005		; FASSCM	Fass header D destination tank
	FASSA_RESP_FASSCM		==	FIN006		; FASSCM	Fass header A sequence response
	FASSB_RESP_FASSCM		==	FIN007		; FASSCM	Fass header B sequence response
	FASSC_RESP_FASSCM		==	FIN008		; FASSCM	Fass header C sequence response
	FASSD_RESP_FASSCM		==	FIN009		; FASSCM	Fass header D sequence response

	PRI2_REC_SA_STATE_ALLOF4	==		OIN065		;MRP001
	FASSA_REQ_RESP_INT_ALLOF4 	== 	OIN089    	;fly002
	FASSB_REQ_RESP_INT_ALLOF4 	== 	OIN090    	;fly002
	FASSC_REQ_RESP_INT_ALLOF4 	== 	OIN091    	;fly002
	FASSD_REQ_RESP_INT_ALLOF4 	== 	OIN092    	;fly002
	DEST_TANK_A_ALLOF4 		== 	OIN093          ;fly002
	DEST_TANK_B_ALLOF4 		== 	OIN094          ;fly002
	DEST_TANK_C_ALLOF4 		== 	OIN095          ;fly002
	DEST_TANK_D_ALLOF4 		== 	OIN096          ;fly002

	SLUICE_INUSE_POLCOM		==	IIN003		; POLCOM	Sluice valves inuse	;acj007
	LHX_RESP_LHX			==	LIN019		; LHX		LHX sequence response

	CFG1_SEQ_STATUS_CFGCM		==	CSG014		; CFGCM		Centrifuge 1 Seq status
;rma005	CFG2_SEQ_STATUS_CFGCM		==	CSG015		; CFGCM		Centrifuge 2 Seq status
;rma005	CFG3_SEQ_STATUS_CFGCM		==	CSG016		; CFGCM		Centrifuge 3 Seq status
;rma005	CFG4_SEQ_STATUS_CFGCM		==	CSG017		; CFGCM		Centrifuge 4 Seq status
	CFG4_SEQ_STATUS_ALLOF8		==	TSG156		; ALLOF8 rma005	Centrifuge 4 Seq status
;rma005	CFG5_SEQ_STATUS_CFGCM		==	CSG018		; CFGCM		Centrifuge 5 Seq status
;rma005	CFG6_SEQ_STATUS_CFGCM		==	CSG019		; CFGCM		Centrifuge 6 Seq status
;rma006	CFG7_SEQ_STATUS_CFGCM		==	CSG020	;VCM011	; CFGCM		Centrifuge 7 Seq status
;rma005	CFG8_SEQ_STATUS_CFGCM		==	CSG021	;VCM011	; CFGCM		Centrifuge 8 Seq status
;rma006	CFG8_SEQ_STATUS_ALLOF8		==	TSG158	;VCM011	; CFGCM		Centrifuge 8 Seq status
	CFG9_SEQ_STATUS_ALLOF4  	== 	OSG106      ;fly000

	FASSA_SEQ_STATUS_FASSCM		==	FSG000		; FASSCM	Fass header A Seq status
	FASSB_SEQ_STATUS_FASSCM		==	FSG001		; FASSCM	Fass header B Seq status
	FASSC_SEQ_STATUS_FASSCM		==	FSG002		; FASSCM	Fass header C Seq status
	FASSD_SEQ_STATUS_FASSCM		==	FSG003		; FASSCM	Fass header D Seq status
	FASSA_SEQ_STATUS_ALLOF4 	== 	OSG070     	;fly002
	FASSB_SEQ_STATUS_ALLOF4 	== 	OSG072     	;fly002
	FASSC_SEQ_STATUS_ALLOF4 	== 	OSG074     	;fly002
	FASSD_SEQ_STATUS_ALLOF4 	== 	OSG076     	;fly002

        BTA2_HEADER_SELECT_PRIMCM	==	HSG019		; VCM001RDK003

	P1_BRAND_PRIMCM			==	HSG020		; PRIMCM	Filter P1 feed tank brand
	P1_XFER_TNK_BRAND_PRIMCM	==	HSG022		; PRIMCM	Filter P1 xfer tank brand

	LHX_SEQ_STATUS_LHX		==	LSG006		; LHX		LHX Seq status

;ALLOF4  VCM014
;Please be sure to check the allof4_upf.h file in the common\includes folder prior to
;equating variables here... also add them to the header file so everyone knows they are
;being used
;VCM018	FASSA_REC_CFT_FILL_1_FG_ALLOF4 == OFG157
;VCM018	FASSB_REC_CFT_FILL_1_FG_ALLOF4 == OFG158
;VCM018	FASSC_REC_CFT_FILL_1_FG_ALLOF4 == OFG159
;VCM018	FASSD_REC_CFT_FILL_1_FG_ALLOF4 == OFG160

	CFGHDR_CONTENTS_MTMR_ALLOF4		==		OMT001					;rma005
	CFGHDR_CONTENT_SG_ALLOF4			==		OSG167					;rma005
	CFGHDR_BRAND_SG_ALLOF4				==		OSG168					;rma005

	BTA2_SA_STATUS_ALLOF8		== TSG165	;ldk050 BTA2 SA status
	BTA2_SEQ_STATUS_ALLOF8	   == TSG166	;ldk050 BTA2 SEQ status
	PRIM2_DIL_VLV_BUSY_ALLOF8	== 	TIN198		; PRIM1 Diluent vlv reservation integer		;rma999
	DIL_RES_NUMBER					==	3	;rma999 EQUATE	Diluent valve reservation number	0=avail 1=filter 2=bta 3=recvr



;*******************************************************************************
;
;	EQUATES
;	-------

	OPENED == 0		; Open indication for digital inputs
	CLOSED == 1		; Closed indication for digital inputs
	T_0 == 1		;TEMP BIT $T0
	T_1 == 2		;TEMP BIT $T1
	T_2 == 4		;TEMP BIT $T2
	T_3 == 8		;TEMP BIT $T3
	T_4 == 16		;TEMP BIT $T4
	T_5 == 32		;TEMP BIT $T5
	T_6 == 64		;TEMP BIT $T6
	T_7 == 128		;TEMP BIT $T7
	T_8 == 256		;TEMP BIT $T8
	T_9 == 512		;TEMP BIT $T9
	T_10 == 1024		;TEMP BIT $T10
	T_11 == 2048		;TEMP BIT $T11
	T_12 == 4096		;TEMP BIT $T12
	T_13 == 8192		;TEMP BIT $T13
	T_14 == 16384		;TEMP BIT $T14
	T_15 == 32768		;TEMP BIT $T15
	T_16 == 1		;TEMP BIT $T16
	T_17 == 2		;TEMP BIT $T17
	T_18 == 4		;TEMP BIT $T18
	T_19 == 8		;TEMP BIT $T19
	T_20 == 16		;TEMP BIT $T20
	T_21 == 32		;TEMP BIT $T21
	T_22 == 64		;TEMP BIT $T22
	T_23 == 128		;TEMP BIT $T23
	T_24 == 256		;TEMP BIT $T24
	T_25 == 512		;TEMP BIT $T25
	T_26 == 1024		;TEMP BIT $T26
	T_27 == 2048		;TEMP BIT $T27
	T_28 == 4096		;TEMP BIT $T28
	T_29 == 8192		;TEMP BIT $T29
	T_30 == 16384		;TEMP BIT $T30
	T_31 == 32768		;TEMP BIT $T31

	C_0 == 1		;COMMAND BIT $C0
	C_1 == 2		;COMMAND BIT $C1
	C_2 == 4		;COMMAND BIT $C2
	C_3 == 8		;COMMAND BIT $C3
	C_4 == 16		;COMMAND BIT $C4
	C_5 == 32		;COMMAND BIT $C5
	C_6 == 64		;COMMAND BIT $C6
	C_7 == 128		;COMMAND BIT $C7

	S_0 == 1		;STATUS BIT $S0
	S_1 == 2		;STATUS BIT $S1
	S_2 == 4		;STATUS BIT $S2
	S_3 == 8		;STATUS BIT $S3
	S_4 == 16		;STATUS BIT $S4
	S_5 == 32		;STATUS BIT $S5
	S_6 == 64		;STATUS BIT $S6
	S_7 == 128		;STATUS BIT $S7

	F_0 == 1		;FAULT BIT $F0
	F_1 == 2		;FAULT BIT $F1

	M_0 == 1		;MODE BIT $M0
	M_1 == 2		;MODE BIT $M1
	M_2 == 4		;MODE BIT $M2


#include <allof4_upf.h>    /* fly002 */

;*******************************************************************************
;
;		SET ERROR SUBROUTINES
;
;*******************************************************************************

	ON ERROR GOSUB ERRSUB		;define error handling routine

	ON HOLD GOSUB HOLDSUB		;define hold routine

;*******************************************************************************
;*******************************************************************************
;		M A I N
;*******************************************************************************
;*******************************************************************************

	ASSIGN SEQ_STATUS_PTR = PRI_SEQ_STATUS

	SA_STATE = 0
MAIN:
	ON SA_STATE GOTO PRI1,PRI2,PRI3,PRI4,PRI5,PRI6,PRI7,PRI8,PRI9,PRI10
	ON (SA_STATE - 10) GOTO PRI11,PRI12,PRI13,PRI14,PRI15,PRI16,PRI17,PRI18
	ON (SA_STATE - 18) GOTO PRI19,PRI20,PRI21,PRI22,PRI23,PRI24,PRI25,PRI26
	ON (SA_STATE - 26) GOTO PRI27,PRI28,PRI29,PRI30,PRI31,PRI32

;===============================================================================
;TB.2.1.5.2		INIT
;===============================================================================

	GOSUB SAINIT			;TB.2.1.5.2.37 SA INITIALIZE

;JACXXX	ASSIGN SEQ_STATUS_PTR = PRI_SEQ_STATUS	;JAC054

;TB.2.1.5.2.T0
	;transition T0
	;Start Primary Recovery command
		GOTO PRI2		;FASS HEADER RECOVERY
;TB.2.1.5.2.T23
	;transition T23
	;Start Primary Recovery command
;acj002	GOTO PRI4			;CENT FEED TANK EMPTY 1

;===============================================================================
;TB.2.1.5.2		SYSTEM OFF
;===============================================================================
PRI1:

	SA_STATUS = "SYSTEM OFF"
	SA_STATE = 1
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	ONSTREAM_FG = 0		;acj005
        PRIM2_RECOVERY_FG_CFGCM = 0  ;VCMXXX
	GOSUB ADSO			;TB.2.1.5.2.1 ALIGN DEVICES SYSTEM OFF

	EXIT

;===============================================================================
;TB.2.1.5.2		FASS HEADER RECOVERY
;===============================================================================
PRI2:

	SA_STATUS = "FASS HEADER RECOVERY"
	SA_STATE = 2
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFHR			;TB.2.1.5.2.2 ALIGN DEVICES FASS HEADER RECOVERY

;rma007	SA_MESSAGE = "MAKE CFG SELECTIONS NOW"			;rma006


PRI2SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T1
	;transition T1
	;Fass header Recovery complete
;fly002	TEMP_FG = ((FASSA_RESP_FASSCM = 3) | (CENT_FEED_TNK_SEL_PTR != DEST_TANK_A_FASSCM))
	TEMP_FG = ((FASSA_REQ_RESP_INT_ALLOF4 = 3) | (DEST_TANK_A_ALLOF4 != 2))           ;fly002
;fly002	TEMP_FG = TEMP_FG & ((FASSB_RESP_FASSCM = 3) | (CENT_FEED_TNK_SEL_PTR != DEST_TANK_B_FASSCM))
	TEMP_FG = TEMP_FG & ((FASSB_REQ_RESP_INT_ALLOF4 = 3) | (DEST_TANK_B_ALLOF4 != 2))           ;fly002
;fly002	TEMP_FG = TEMP_FG & ((FASSC_RESP_FASSCM = 3) | (CENT_FEED_TNK_SEL_PTR != DEST_TANK_C_FASSCM))
	TEMP_FG = TEMP_FG & ((FASSC_REQ_RESP_INT_ALLOF4 = 3) | (DEST_TANK_C_ALLOF4 != 2))           ;fly002
;fly002	IF TEMP_FG & ((FASSD_RESP_FASSCM = 3) | (CENT_FEED_TNK_SEL_PTR != DEST_TANK_D_FASSCM)) THEN
	IF TEMP_FG & ((FASSD_REQ_RESP_INT_ALLOF4 = 3) | (DEST_TANK_D_ALLOF4 != 2)) THEN		;fly002
;VCM014		GOTO PRI3		;RECOVER RECIRC LINE
		GOTO PRI4		;empty 1 ;VCM014

	IF (SKIP_FASSHDR_REC_FG) THEN				;acj000
		BEGIN
		PRINT LOG_ADI, "SKIP FASS HDR REC FLAG SET"
;VCM014           		GOTO PRI3		;RECOVER RECIRC LINE	;acj000
		GOTO PRI4		;empty 1 ;VCM014
		END

	WAIT 1
	GOTO PRI2SS

;===============================================================================
;TB.2.1.5.2		RECOVER RECIRC LINE
;===============================================================================
;NOTE - this is NOT the CFG to CFT recirc line installed as part of the Single Pass
;Filtration project installed in October 2019. That (new) recirc line is recovered by the 
;CFT during CENT FEED TANK EMPTY 1 state
;This state is no longer used.
PRI3:

	SA_STATUS = "RECOVER RECIRC LINE"
	SA_STATE = 3
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADRRL			;TB.2.1.5.2.3 ALIGN DEVICES RECOVER RECIRC LINE

PRI3SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T25
	;transition T25
	;Recover Recirc Line step timer expired
	IF (STEP_TMR >= RECIRC_LINE_TIME) THEN
		GOTO PRI4		;CENT FEED TANK EMPTY 1

	WAIT 1
	GOTO PRI3SS

;===============================================================================
;TB.2.1.5.2		CENT FEED TANK EMPTY 1
;===============================================================================
PRI4:

	SA_STATUS = "CENT FEED TANK EMPTY 1"
	SA_STATE = 4
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADCFTE1			;TB.2.1.5.2.4 ALIGN DEVICES CENT FEED TANK EMPTY 1
	IF (PRIM2_RECOVER_RECIRC_INT_ALLOF4 <= 1)  THEN		;recirc recovery not complete yet - jaz000
		PRIM2_RECOVER_RECIRC_INT_ALLOF4 = 1		;request recirc recovery - jaz000

PRI4SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	IF (CENT_FEED_TNK_LVL_PTR:AI_MEAS <= 5) THEN	;RDK001	;acj005
		CFG_DISABLE_GLYCOL_PTR = 1		;RDK001	;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T2
	;transition T2
	;Centrifuge Feed Tank Level less than Drain level
;(CENT_FEED_TNK_LVL_PTR:AI_INVL < CENT_FEED_TNK_DRAIN_LVL FOR CENT_FEED_MIN_LVL_TIME) & (!PARTIAL_REC_SEL)
	GOSUB CENTTNKMT
;VCM013	IF (TEMP_FG) THEN            ;VCM006
;VCM013       		BEGIN
;VCM013       		OPER_RESPONSE = " "				;VCM004	;DVS000	;acj005
;VCM013       		SA_2_MESSAGE = "REMOVE YEAST TURNBACKS DAN'O?"	;VCM004	;RDK001	;acj005
;VCM013       		SA_3_MESSAGE = "RESPOND Y TO ACKNOWLEDGE"			;acj005
;VCM013       		LAMP LAMP_ADI,LAMP_NUMBER,YELLOW	;SKID = YELLOW	;RDK001	;acj005
;VCM013       		WAITUNTIL (COMPAR(OPER_RESPONSE,"Y",1,EQ))		;DVS000			;acj005
;VCM013       		LAMP LAMP_ADI,LAMP_NUMBER,GREEN		;SKID = GREEN	;RDK001		;acj005
;VCM013       		SA_2_MESSAGE = " "			;RDK001				;acj005
;VCM013       		SA_3_MESSAGE = " "							;acj005
;VCM013       		OPER_RESPONSE = " "			;RDK001				;acj005
;VCM013		GOTO PRI5		;CENT FEED TANK FILL
;VCM013                END
;jaz000	IF (TEMP_FG) THEN            ;VCM013
	IF (TEMP_FG & (PRIM2_RECOVER_RECIRC_INT_ALLOF4 = 3) ) THEN	;Recirc Recovery is complete - jaz000
		GOTO PRI5		;CENT FEED TANK FILL

	WAIT 1
	GOTO PRI4SS

;===============================================================================
;TB.2.1.5.2		CENT FEED TANK FILL
;===============================================================================
PRI5:

	SA_STATUS = "CENT FEED TANK FILL"
	SA_STATE = 5
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADCFTF			;TB.2.1.5.2.5 ALIGN DEVICES CENT FEED TANK FILL
	PRIM2_RECOVER_RECIRC_INT_ALLOF4 = 0	;jaz000	- recirc recovery complete

PRI5SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
	EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
	EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006

	IF PARTIAL_REC_SEL THEN
		SA_TMP_FLT = PARTIAL_REC_CFT_BBLS - CFT2_BBLS_AI:AI_MEAS   ;VCM048
;rma006	ELSE
	ELSE IF (PARTIAL_REC_SEL = 0)&(EXPR1 = 0) THEN		;rma006
		SA_TMP_FLT = 220.0 - CFT2_BBLS_AI:AI_MEAS 		; 220 BBLS VCM048
	ELSE IF (PARTIAL_REC_SEL = 0) & EXPR1 THEN			;rma006
		SA_TMP_FLT = CENT_FULL - CFT2_BBLS_AI:AI_MEAS	;rma006

;rma006	SA_TMP_INT = FLTCNV(SA_TMP_SG,SA_TMP_FLT,4,0)
;rma006	SA_TMP_INT = APPEND(SA_2_MESSAGE,"BBLS LEFT = ",SA_TMP_SG)

	IF (EXPR1=0) THEN
		BEGIN
		SA_TMP_INT = FLTCNV(SA_TMP_SG,SA_TMP_FLT,3,0)						;rma006
		SA_TMP_INT = APPEND(SA_2_MESSAGE,"BBLS LEFT = ",SA_TMP_SG)		;rma006
		END

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T4
	;transition T4
	;Fass Meter volume greater than fass recover volume
;fly000	IF (CENT_FEED_TNK_LVL_PTR:AI_INVL >= CENT_FULL) | (STEP_TMR >= CFT_FILL_TIME) THEN
;	IF (CENT_FEED_TNK_LVL_PTR:AI_MEAS >= CENT_FULL) | (STEP_TMR >= CFT_FILL_TIME) THEN   ;fly000
;	  IF ((CENT_FEED_TNK_LVL_PTR:AI_MEAS >= CENT_FULL) | (STEP_TMR >= CFT_FILL_TIME))&(CENT_FEED_TNK_LVL_PTR:AI_MEAS <= 2) THEN ;fly001;mrp003
	;rmaxxx this is % level
	IF (CENT_FEED_TNK_LVL_PTR:AI_MEAS >= CENT_FULL) | (STEP_TMR >= CFT_FILL_TIME) THEN ;fly001;mrp003
      BEGIN
;VCM018      FASS_REC_CFT_FILL_1_PTR = 0 ;VCM014
		GOTO PRI6		;FASS COOLER RECOVERY
      END

	WAIT 1
	GOTO PRI5SS
                 
;===============================================================================
;TB.2.1.5.2		FASS COOLER RECOVERY
;===============================================================================
PRI6:

	SA_STATUS = "FASS COOLER RECOVERY"
	SA_STATE = 6
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFCR			;TB.2.1.5.2.6 ALIGN DEVICES FASS COOLER RECOVERY


;rma006	IF (CFG1_FG | CFG4_FG | CFG7_FG | CFG8_FG) THEN	  	;rma005
	IF (CFG1_FG | CFG4_FG) THEN	  							;rma006
		BEGIN															;rma005
		TIMERCLR CFGHDR_CONTENTS_MTMR_ALLOF4				;rma005
		TIMERON CFGHDR_CONTENTS_MTMR_ALLOF4					;rma005
		CFGHDR_CONTENT_SG_ALLOF4 = "DILUENT"				;rma005
		CFGHDR_BRAND_SG_ALLOF4 = ""							;rma005
		END															;rma005


PRI6SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T26
	;transition T26
	;Fass Cooler Recovery step timer expired
 
	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
	EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
	EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006
;rma006  IF (STEP_TMR >= FASS_COOL_TIME) THEN
	IF (STEP_TMR >= FASS_COOL_TIME) & (EXPR1 = 0) THEN  			;rma006
		GOTO PRI7		;FILTER FEED TANK EMPTY 1
	ELSE IF (STEP_TMR >= FASS_COOL_TIME) & EXPR1 & EXPR2 THEN	;rma006 bypass to xfer tank
		GOTO	PRI22		;FILTER TRANSFER TANK EMPTY 1					;rma006
	ELSE IF (STEP_TMR >= FASS_COOL_TIME) & EXPR1 & EXPR3 THEN	;rma006 bypass to lhx
		GOTO PRI10 		;LHX TANK EMPTY 1									;rma006
 
	WAIT 1
	GOTO PRI6SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED TANK EMPTY 1
;===============================================================================
PRI7:

	SA_STATUS = "FILTER FEED TANK EMPTY 1"
	SA_STATE = 7
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFTE1			;TB.2.1.5.2.7 ALIGN DEVICES FILTER FEED TANK EMPTY 1

PRI7SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T3
	;transition T3
	;Filter Feed Tank Level less than Drain level
;(FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME) & (!PARTIAL_REC_SEL)
	GOSUB FEEDTNKMT
   	IF (TEMP_FG) THEN
       		BEGIN
;VCM006		OPER_RESPONSE = " "				;VCM004	;DVS000	;acj005
;VCM006		SA_2_MESSAGE = "REMOVE YEAST TURNBACKS DAN'O?"	;VCM004	;RDK001	;acj005
;VCM006		SA_3_MESSAGE = "RESPOND Y TO ACKNOWLEDGE"			;acj005
;VCM006		LAMP LAMP_ADI,LAMP_NUMBER,YELLOW	;SKID = YELLOW	;RDK001	;acj005
;VCM006		WAITUNTIL (COMPAR(OPER_RESPONSE,"Y",1,EQ))		;DVS000			;acj005
;VCM006		LAMP LAMP_ADI,LAMP_NUMBER,GREEN		;SKID = GREEN	;RDK001		;acj005
;VCM006		SA_2_MESSAGE = " "			;RDK001				;acj005
;VCM006		SA_3_MESSAGE = " "							;acj005
;VCM006		OPER_RESPONSE = " "			;RDK001				;acj005
			GOTO PRI8		;CENT FEED TANK EMPTY 2
                END

	WAIT 1
	GOTO PRI7SS

;===============================================================================
;TB.2.1.5.2		CENT FEED TANK EMPTY 2
;===============================================================================
PRI8:

	SA_STATUS = "CENT FEED TANK EMPTY 2"
	SA_STATE = 8
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADCFTE2			;TB.2.1.5.2.8 ALIGN DEVICES CENT FEED TANK EMPTY 2
	ONSTREAM_FG = 0		;acj005

PRI8SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS
	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
;rma006	IF (FIL_FEED_TNK_LVL:AI_INVL >= 30) & (ONSTREAM_FG = 0) THEN	;RDK001 START	;acj005
	IF (FIL_FEED_TNK_LVL:AI_INVL >= 30) & (ONSTREAM_FG = 0) & (EXPR1 = 0) THEN	;rma006
		BEGIN									;acj005
		ASSIGN SEQ_REQ_PTR = PRI_OS_REQ			;RDK001			;acj005
		ASSIGN SEQ_RESP_PTR = PRI_RESP			;RDK001			;acj005
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"	;RDK001			;acj005
		GOSUB SEQUENCEREQ	;RDK001	;TB.2.1.5.2.39 SEQUENCE REQUEST		;acj005
		PUTAUTO FIL_FEED_TNK_LVL_MODE						;acj005
		OPEN FIL_FEED_TNK_LVL_MODE				;Drain		;acj005
		ONSTREAM_FG = 1								;acj005
		END					;RDK001 END			;acj005

	;----------------------------------
	;	transition conditions
	;----------------------------------
;TB.2.1.5.2.T27
	;transition T27
	;Centrifuge Feed Tank Level less than Drain level
;(CENT_FEED_TNK_LVL_PTR:AI_INVL < CENT_FEED_TNK_DRAIN_LVL FOR CENT_FEED_MIN_LVL_TIME)
	GOSUB CENTTNKMT
;rma006	IF (TEMP_FG) THEN
	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
	EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
	EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006
	EXPR4 = INSTR(CFT2_SA_STATUS_ALLOF4,"PROCESS WAIT")|INSTR(CFT2_SA_STATUS_ALLOF4,"SYSTEM OFF")
	IF (TEMP_FG)&(EXPR1 = 0)&(EXPR4) THEN	 ;rma006 not bypassed
		GOTO PRI9		;SHELL RECOVER
	ELSE IF (TEMP_FG & EXPR1 & EXPR3 & EXPR4) THEN	;rma006
		GOTO PRI21	;LHX EMPTY 2	;rma006
	ELSE IF (TEMP_FG & EXPR1 & EXPR2 & EXPR4) THEN	;rma006
		GOTO PRI23	;TRANSFER TANK FILL 1	;rma006
	WAIT 1
	GOTO PRI8SS

;===============================================================================
;TB.2.1.5.2		SHELL RECOVER
;===============================================================================
PRI9:

	SA_STATUS = "SHELL RECOVER"
	SA_STATE = 9
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADSR			;TB.2.1.5.2.9 ALIGN DEVICES SHELL RECOVER

PRI9SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T5
	;transition T5
	;Metered volume of diluent is greater than Shell Recover volume
	;OR Shell Recover step timer expired
	;Filter Feed Tank Level less than Drain level					;acj005
;(FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME)		;acj005
	GOSUB FEEDTNKMT		;RDK001							;acj005
	IF (TEMP_FG) THEN	;RDK001 BELOW						;acj005
		BEGIN
		IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
			GOTO PRI10		;LHX TANK EMPTY 1
;TB.2.1.5.2.T32
	;transition T32
	;Metered volume of diluent is greater than Shell Recover volume
	;OR Shell Recover step timer expired
		GOTO PRI11		;FILTER FEED TANK EMPTY 2
		END

	WAIT 1
	GOTO PRI9SS

;===============================================================================
;TB.2.1.5.2		LHX TANK EMPTY 1
;===============================================================================
PRI10:

	SA_STATUS = "LHX TANK EMPTY 1"
	SA_STATE = 10
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADLTE1			;TB.2.1.5.2.10 ALIGN DEVICES LHX TANK EMPTY 1

PRI10SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------
;TB.2.1.5.2.T33
	;transition T33
	;LHX Tank Level less than Drain level
;(LHX_TNK_LVL:AI_INVL < LHX_TNK_DRAIN_LVL FOR LHX_MIN_LVL_TIME)
	GOSUB LHXTNKMT
;rma006	IF (TEMP_FG) THEN
	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
	IF (TEMP_FG & (EXPR1 = 0)) THEN		;rma006 not bypassed
		GOTO PRI11		;FILTER FEED TANK EMPTY 2
	ELSE IF (TEMP_FG & EXPR1) THEN	;rma006
		GOTO PRI8	;CFT EMPTY 2		;rma006

	WAIT 1
	GOTO PRI10SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED TANK EMPTY 2
;===============================================================================
PRI11:

	SA_STATUS = "FILTER FEED TANK EMPTY 2"
	SA_STATE = 11
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFTE2			;TB.2.1.5.2.4 ALIGN DEVICES FILTER FEED TANK EMPTY 2

PRI11SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T34
	;transition T34
	;Filter Feed Tank Level less than Drain level
;(FIL_FEED_TNK_LVL:AI_INVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME)
	GOSUB FEEDTNKMT
	IF (TEMP_FG) THEN
		BEGIN					;acj002
		IF (!PARTIAL_REC_SEL) THEN		;acj002
			GOTO PRI12		;SHELL BLOWBACK TO SEWER
		GOTO PRI22		;FILTER TRANSFR TANK EMPTY 1	;acj002
		END					;acj002

	WAIT 1
	GOTO PRI11SS

;===============================================================================
;TB.2.1.5.2		SHELL BLOWBACK TO SEWER
;===============================================================================
PRI12:

	SA_STATUS = "SHELL BLOWBACK TO SEWER"
	SA_STATE = 12
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADSBTS			;TB.2.1.5.2.12 ALIGN DEVICES SHELL BLOWBACK TO SEWER

PRI12SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T6
	;transition T6
	;Shell Blowback step timer expired
	IF (PRI_RESP >= 4) THEN
		GOTO PRI13		;VENT

	WAIT 1
	GOTO PRI12SS

;===============================================================================
;TB.2.1.5.2		VENT
;===============================================================================
PRI13:

	SA_STATUS = "VENT"
	SA_STATE = 13
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADV			;TB.2.1.5.2.13 ALIGN DEVICES VENT

PRI13SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T7
	;transition T7
	;Vent step timer expired
	IF (PRI_RESP >= 5) THEN
		GOTO PRI14		;SLUICE

	WAIT 1
	GOTO PRI13SS

;===============================================================================
;TB.2.1.5.2		SLUICE
;===============================================================================
PRI14:

	SA_STATUS = "SLUICE"
	SA_STATE = 14
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADS			;TB.2.1.5.2.14 ALIGN DEVICES SLUICE

PRI14SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T8
	;transition T8
	;Sluice step timer expired
	IF (PRI_RESP >= 6) THEN
		GOTO PRI15		;RINSE 1

	WAIT 1
	GOTO PRI14SS

;===============================================================================
;TB.2.1.5.2		RINSE 1
;===============================================================================
PRI15:

	SA_STATUS = "RINSE 1"
	SA_STATE = 15
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADR1			;TB.2.1.5.2.15 ALIGN DEVICES RINSE 1

PRI15SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T9
	;transition T9
	;Rinse 1 step timer expired
	IF (STEP_TMR >= RINSE_1_TIME) THEN
		GOTO PRI16		;PRECOAT LINE RECLAIM

	WAIT 1
	GOTO PRI15SS

;===============================================================================
;TB.2.1.5.2		PRECOAT LINE RECLAIM
;===============================================================================
PRI16:

	SA_STATUS = "PRECOAT LINE RECLAIM"
	SA_STATE = 16
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADPLR			;TB.2.1.5.2.16 ALIGN DEVICES PRECOAT LINE RECLAIM

PRI16SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T10
	;transition T10
	;Precoat Line Reclaim step timer expired
	IF (STEP_TMR >= PCT_RINSE_TIME) THEN
		GOTO PRI17		;FILTER FEED LINE RINSE

	WAIT 1
	GOTO PRI16SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED LINE RINSE
;===============================================================================
PRI17:

	SA_STATUS = "FILTER FEED LINE RINSE"
	SA_STATE = 17
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFLR			;TB.2.1.5.2.17 ALIGN DEVICES FILTER FEED LINE RINSE

PRI17SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T12
	;transition T12
	;Filter Feed Line Rinse step timer expired
	IF (STEP_TMR >= RINS_FILL_TIME) THEN
		GOTO PRI18		;CIRC TO FEED RINSE

	WAIT 1
	GOTO PRI17SS

;===============================================================================
;TB.2.1.5.2		CIRC TO FEED RINSE
;===============================================================================
PRI18:

	SA_STATUS = "CIRC TO FEED RINSE"
	SA_STATE = 18
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADCTFR			;TB.2.1.5.2.18 ALIGN DEVICES CIRC TO FEED RINSE

PRI18SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS


;JMS004	IF (FIL_FEED_TNK_LVL:AI_INVL >= 50) & (AND('8606XV21':DEV_STAT,S_1)) THEN
;JMS004           GOSUB C06XV31   ;Close Diluent XV
   IF (FIL_FEED_TNK_LVL:AI_INVL >= 50) THEN                                      ;JMS004
      IF (AND('8606XV21':DEV_STAT,S_1)) | (AND('8606XV362':DEV_STAT,S_1)) THEN    ;JMS004
			BEGIN                                                                   ;JMS004
         GOSUB C06XV31    ;'8606XV21'Close Diluent XV                            ;JMS004
         GOSUB C06XV362   ;'8606XV362'Close Diluent XV                           ;JMS004
			END                                                                     ;JMS004

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T13
	;transition T13
	;Circ to Feed Rinse step timer expired
	IF (STEP_TMR >= RINS_CIRC_TIME) THEN
		GOTO PRI19		;BLOWBACK RINSE

	WAIT 1
	GOTO PRI18SS

;===============================================================================
;TB.2.1.5.2		BLOWBACK RINSE
;===============================================================================
PRI19:

	SA_STATUS = "BLOWBACK RINSE"
	SA_STATE = 19
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADBR			;TB.2.1.5.2.19 ALIGN DEVICES BLOWBACK RINSE

PRI19SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T14
	;transition T14
	;Blowback Rinse step timer expired
	IF (STEP_TMR >= BB_RINSE_TIME) THEN
		GOTO PRI20		;ON STREAM LINE RINSE

	WAIT 1
	GOTO PRI19SS

;===============================================================================
;TB.2.1.5.2		ON STREAM LINE RINSE
;===============================================================================
PRI20:

	SA_STATUS = "ON STREAM LINE RINSE"
	SA_STATE = 20
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADOSLR			;TB.2.1.5.2.20 ALIGN DEVICES ON STREAM LINE RINSE

PRI20SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T15
	;transition T15
	;On Stream Rinse step timer expired
	IF (STEP_TMR >= RINS_ONL_TIME) THEN
		BEGIN
		IF (LHX_SEL:DEV_STAT != PRIM_LHX) THEN
			GOTO PRI22		;FILTER TRANSFER TANK EMPTY 1
;TB.2.1.5.2.T35
	;transition T35
	;On Stream Rinse step timer expired
		GOTO PRI21		;LHX TANK EMPTY 2
		END

	WAIT 1
	GOTO PRI20SS

;===============================================================================
;TB.2.1.5.2		LHX TANK EMPTY 2
;===============================================================================
PRI21:

	SA_STATUS = "LHX TANK EMPTY 2"
	SA_STATE = 21
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADLTE2			;TB.2.1.5.2.21 ALIGN DEVICES LHX TANK EMPTY 2

PRI21SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS
	GOSUB LHXDILCNTL		;LHX diluent rinse control	;acj006

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T36
	;transition T36
	;LHX Tank Level less than Drain level
;(LHX_TNK_LVL:AI_INVL < LHX_TNK_DRAIN_LVL FOR LHX_MIN_LVL_TIME)
	IF (TD_INTO1_FG) THEN	;LHX diluent rinse done			;acj006
		BEGIN							;acj006
		GOSUB LHXTNKMT
		IF (TEMP_FG) THEN
			GOTO PRI22		;FILTER TRANSFER TANK EMPTY 1
		END							;acj006

	WAIT 1
	GOTO PRI21SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER TANK EMPTY 1
;===============================================================================
PRI22:

	SA_STATUS = "FILTER TRANSFER TANK EMPTY 1"
	SA_STATE = 22
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFTTE1			;TB.2.1.5.2.22 ALIGN DEVICES FILTER TRANSFER TANK EMPTY 1

PRI22SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------
;TB.2.1.5.2.T28
	;transition T28
	;Filter Transfer Tank Level less than Drain level
;(XFER_TNK_LVL:AI_INVL < XFER_TNK_DRAIN_LVL FOR XFER_TNK_MIN_TIME)
	GOSUB XFERTNKMT
	IF (TEMP_FG) THEN
		BEGIN
	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
	EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
	EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006
	EXPR4 = INSTR(CFT2_SA_STATUS_ALLOF4,"PROCESS WAIT")|INSTR(CFT2_SA_STATUS_ALLOF4,"SYSTEM OFF")
;rma006		IF (!PARTIAL_REC_SEL) THEN		;VCM021
		;rma006 full recovery and not bypassed, or full recovery and bypassed to lhx tank
		IF ((!PARTIAL_REC_SEL)&(!EXPR1))|((!PARTIAL_REC_SEL)& EXPR1 & EXPR3) THEN	;rma006
			GOTO PRI23		;FILTER TRANSFER TANK FILL 1
		;rma006 full recovery and bypassed to xfer tank
		ELSE IF (!PARTIAL_REC_SEL)& EXPR1 & EXPR2 THEN		;rma006
			GOTO PRI8		;CENT FEED TANK EMPTY 2 ;rma006
		ELSE
         GOTO PRI1                 ;SYSTEM OFF	   
		END

	WAIT 1
	GOTO PRI22SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER TANK FILL 1
;===============================================================================
PRI23:

	SA_STATUS = "FILTER TRANSFER TANK FILL 1"
	SA_STATE = 23
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFTTF1			;TB.2.1.5.2.23 ALIGN DEVICES FILTER TRANSFER TANK FILL 1

PRI23SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T29
	;transition T29
	;Filter Transfer Tank Level greater than Transfer Tank Fill value
	;OR Transfer Tank Fill Final step timer expired
	IF (XFER_TNK_LVL:AI_INVL >= XFER_FULL) | (STEP_TMR >= XFER_FILL_1_TIME) THEN
		GOTO PRI24		;FILTER TRANSFER TANK EMPTY 2

	WAIT 1
	GOTO PRI23SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER TANK EMPTY 2
;===============================================================================
PRI24:

	SA_STATUS = "FILTER TRANSFER TANK EMPTY 2"
	SA_STATE = 24
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
   GOSUB C06XV31                   ;RDK003
	GOSUB C06XV362        ;JMS004
	GOSUB ADFTTE2			;TB.2.1.5.2.24 ALIGN DEVICES FILTER TRANSFER TANK EMPTY 2

PRI24SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T11
	;transition T11
	;BTA metered volume greater than Filter Transfer Tank Empty2
	;total flow value
;jaz048	IF (BTA_RESP = 3) THEN
	IF (BTA2_PRIM2_RESP_ALLOF8 = 3) THEN		;jaz048
		BEGIN					;acj002
		GOTO PRI25		;FILTER TRANSFER EMPTY 2 WAIT
		END					;acj002

	WAIT 1
	GOTO PRI24SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER EMPTY 2 WAIT
;===============================================================================
PRI25:

	SA_STATUS = "FILTER TRANSFER EMPTY 2 WAIT"
	SA_STATE = 25
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFTE2W			;TB.2.1.5.2.25 ALIGN DEVICES FILTER TRANSFER EMPTY 2 WAIT

PRI25SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T30
	;transition T30
	;Operator responds with "C" to question "Acknowledge aging tank
	;inlet and outlet valves closed and inlet header drain hooked up?"
	;Added operator response for Ferm ID and BBls input for BAS ;dvs000	;acj005
	GOTO PRI26		;FILTER TRANSFER TANK EMPTY 3

	WAIT 1
	GOTO PRI25SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER TANK EMPTY 3
;===============================================================================
PRI26:
;pcm8
	SA_STATUS = "FILTER TRANSFER TANK EMPTY 3"
	SA_STATE = 26
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE


	IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   	;;POLBMXPROD;jac053
		BEGIN                                                ;;POLBMXPROD;jac053
		IF (BMXD3_BTAF_HDR_DIL_BUSY_DIN:DIN_VAL = 1) THEN	;POLBMXPROD;jac053
			BEGIN						;POLBMXPROD;jac053
			FAIL_MSG = "AGE HDR DIL RESERVED BY BMX"	;POLBMXPROD;jac053
			GOTO FAIL					;POLBMXPROD;jac053
			END							;POLBMXPROD;jac053

		TURNON D3BMX_BTAF_HDR_DIL_BUSY_DOT			;POLBMXPROD
		END							;POLBMXPROD;jac053

	IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN 	;POLBMXPROD;jac053
		BEGIN                                                ;;POLBMXPROD;jac053
		IF (BMXD3_BTAE_HDR_DIL_BUSY_DIN:DIN_VAL = 1) THEN	;POLBMXPROD;jac053
			BEGIN						;POLBMXPROD;jac053
			FAIL_MSG = "AGE HDR DIL RESERVED BY BMX"	;POLBMXPROD;jac053
			GOTO FAIL					;POLBMXPROD;jac053
			END							;POLBMXPROD;jac053

		TURNON D3BMX_BTAE_HDR_DIL_BUSY_DOT			;POLBMXPROD
		END						;POLBMXPROD;jac053


	GOSUB ADFTTE3			;TB.2.1.5.2.26 ALIGN DEVICES FILTER TRANSFER TANK EMPTY 3



PRI26SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T16
	;transition T16
	;Filter Transfer Tank Level less than Drain level
;(XFER_TNK_LVL < XFER_TNK_DRAIN_LVL FOR XFER_TNK_MIN_TIME)
	GOSUB XFERTNKMT
	IF (TEMP_FG) THEN
		BEGIN
;rma006	IF (PARTIAL_REC_SEL =0) THEN ;RDK003	   
		EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")					;rma006
		IF (PARTIAL_REC_SEL =0)&(EXPR1 = 0) THEN ;rma006 not bypassed	   
			BEGIN                    ;RDK003

			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   	;;POLBMXPROD;jac053
				BEGIN                                         	;POLBMXPROD;jac053
				TURNOFF D3BMX_BTAF_HDR_DIL_BUSY_DOT		;POLBMXPROD
				END						;POLBMXPROD;jac053
			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN 	;POLBMXPROD;jac053
				BEGIN                                           ;;POLBMXPROD;jac053
				TURNOFF D3BMX_BTAE_HDR_DIL_BUSY_DOT		;POLBMXPROD
				END						;POLBMXPROD;jac053

			GOTO PRI27		;FILTER FEED TANK EMPTY 3 ;RDK003	   
			END 							;RDK003 
		ELSE IF (PARTIAL_REC_SEL = 0) & EXPR1 THEN	;rma006
			BEGIN

			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   	;;POLBMXPROD;jac053
				BEGIN                                                ;;POLBMXPROD;jac053
				TURNOFF D3BMX_BTAF_HDR_DIL_BUSY_DOT			;POLBMXPROD
				END							;POLBMXPROD;jac053
			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN 	;POLBMXPROD;jac053
				BEGIN                                                ;;POLBMXPROD;jac053
				TURNOFF D3BMX_BTAE_HDR_DIL_BUSY_DOT			;POLBMXPROD
				END						;POLBMXPROD;jac053


			GOTO PRI29		;TRANSFER TANK FINAL FILL	;rma006	 
			END
		IF (PARTIAL_REC_SEL =1) THEN;RDK003	   	
			BEGIN                      ;RDK003	   
			GOSUB C8608P1		      ;RDK003
			GOSUB C08XV11		      ;RDK003			
			PUTMANL '8608FC2'	      ;RDK003 
			PUTOUT '8608FC2',0	      ;RDK003
			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   ;VCM001RDK003	
				BEGIN                                        ;VCM001RDK003	
;				GOSUB C0XV204                                ;RDK003
				GOSUB C0XV913											;MRP002	
				END                                          ;RDK003	
			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN  ;RDK003	
           	BEGIN                                       ;VCM001RDK003	
;				GOSUB C0XV205                               ;RDK003
				GOSUB C0XV903											;MRP002	
				END                                         ;RDK003	
;ldk050        IF (COMPAR(BTA_SA_STATUS,"SYSTEM OFF",10,NE))THEN ;VCM008
			IF (COMPAR(BTA2_SA_STATUS_ALLOF8,"SYSTEM OFF",10,NE))THEN ;ldk050
				BEGIN
;mw049		ASSIGN SEQ_REQ_PTR = BTA_CONT_REQ	;RDK003	
				ASSIGN SEQ_REQ_PTR = BTA2_CONT_REQ_FG_ALLOF8	;mw049		
;jaz048		ASSIGN SEQ_RESP_PTR = BTA_RESP		;RDK003
				ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8	;jaz048
				FAIL_MSG = "BEER TO AGING REQUEST FAILURE"	;RDK003	
				GOSUB SEQUENCEREQ	;RDK003	
				 END
			WAIT 2      ;RDK003              

			IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN	;rma006 not bypassed
				BEGIN														;rma006
				ASSIGN SEQ_REQ_PTR = PRI_CONT_REQ ;RDK003              
				ASSIGN SEQ_RESP_PTR = PRI_RESP    ;RDK003              
				FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE";RDK003              
				GOSUB SEQUENCEREQ	      ;RDK003     
				IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   	;;POLBMXPROD;jac053
					BEGIN                                                ;;POLBMXPROD;jac053
					TURNOFF D3BMX_BTAF_HDR_DIL_BUSY_DOT			;POLBMXPROD
					END							;POLBMXPROD;jac053
				IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN 	;POLBMXPROD;jac053
					BEGIN                                                ;;POLBMXPROD;jac053
					TURNOFF D3BMX_BTAE_HDR_DIL_BUSY_DOT			;POLBMXPROD
					END						;POLBMXPROD;jac053

				;         
				GOTO PRI1                 ;RDK003  SYSTEM OFF	   
				END														;rma006
			END                        ;RDK003	   
		END                ;RDK003
              
	WAIT 1                        	   
	GOTO PRI26SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED TANK EMPTY 3
;===============================================================================
PRI27:

	SA_STATUS = "FILTER FEED TANK EMPTY 3"
	SA_STATE = 27
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFTE3			;TB.2.1.5.2.27 ALIGN DEVICES FILTER FEED TANK EMPTY 3

PRI27SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T17
	;transition T17
	;Filter Feed Tank Level less than Drain level
;(FIL_FEED_TNK_LVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME)
	GOSUB FEEDTNKMT
	IF (TEMP_FG) THEN
		GOTO PRI28		;FILTER FEED TANK FILL FINAL

	WAIT 1
	GOTO PRI27SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED TANK FILL FINAL
;===============================================================================
PRI28:

	SA_STATUS = "FILTER FEED TANK FILL FINAL"
	SA_STATE = 28
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFTFF			;TB.2.1.5.2.28 ALIGN DEVICES FILTER FEED TANK FILL FINAL

PRI28SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS
	GOSUB CYCLEBLOWBACKVLV		;TB.2.1.5.2.40 CYCLE BLOWBACK VALVE

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T18
	;transition T18
	;Filter Feed Tank Level greater than Feed Tank Fill value OR
	;Feed Tank Fill Final step timer expired
	IF (FIL_FEED_TNK_LVL:AI_INVL >= FEED_FULL) | (STEP_TMR >= FEED_FILL_FINAL_TIME) THEN
		GOTO PRI29		;FILTER TRANSFER FILL FINAL

	WAIT 1
	GOTO PRI28SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER FILL FINAL
;===============================================================================
PRI29:

	SA_STATUS = "FILTER TRANSFER FILL FINAL"
	SA_STATE = 29
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFTFF			;TB.2.1.5.2.29 ALIGN DEVICES FILTER TRANSFER FILL FINAL

PRI29SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T19
	;transition T19
	;Filter Transfer Tank Level greater than Transfer Tank Fill value
	;OR Transfer Tank Fill Final step timer expired
	IF (XFER_TNK_LVL:AI_INVL >= XFER_FULL) | (STEP_TMR >= XFER_FILL_FINAL_TIME) THEN
		GOTO PRI30		;FILTER TRANSFER EMPTY FINAL

	WAIT 1
	GOTO PRI29SS

;===============================================================================
;TB.2.1.5.2		FILTER TRANSFER EMPTY FINAL
;===============================================================================
PRI30:

	SA_STATUS = "FILTER TRANSFER EMPTY FINAL"
	SA_STATE = 30
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFTEF			;TB.2.1.5.2.47 ALIGN DEVICES FILTER TRANSFER EMPTY FINAL

PRI30SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T20
	;transition T20
	;Filter Transfer Tank Level less than Drain level
;(XFER_TNK_LVL < XFER_TNK_DRAIN_LVL FOR XFER_TNK_MIN_TIME)
	GOSUB XFERTNKMT
	IF (TEMP_FG) THEN
		BEGIN				;rma006
		IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN			;rma006 not bypassed
			BEGIN																		;rma006
			IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN			;rma006
				GOSUB C0XV913														;rma006 close drain vlv
			ELSE IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ)THEN	;rma006 
				GOSUB C0XV903														;rma006 close drain vlv
			WAIT 3																	;rma006
			GOSUB C8608P1															;rma006 stop pump 
			GOTO PRI31		;FILTER FEED EMPTY FINAL
			END																		;rma006
		ELSE																			;rma006
			GOTO PRI1		;SYSTEM OFF											;rma006
		END																			;rma006
	WAIT 1
	GOTO PRI30SS

;===============================================================================
;TB.2.1.5.2		FILTER FEED EMPTY FINAL
;===============================================================================
PRI31:

	SA_STATUS = "FILTER FEED EMPTY FINAL"
	SA_STATE = 31
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADFFEF			;TB.2.1.5.2.48 ALIGN DEVICES FILTER FEED EMPTY FINAL

PRI31SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T21
	;transition T21
	;Filter Feed Tank Level less than Drain level
;(FIL_FEED_TNK_LVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME)
	GOSUB FEEDTNKMT
	IF (TEMP_FG) THEN
		GOTO PRI32		;RINSE 2

	WAIT 1
	GOTO PRI31SS

;===============================================================================
;TB.2.1.5.2		RINSE 2
;===============================================================================
PRI32:

	SA_STATUS = "RINSE 2"
	SA_STATE = 32
	GOSUB STATEINIT			;TB.2.1.5.2.32 INIT STATE
	GOSUB ADR2			;TB.2.1.5.2.49 ALIGN DEVICES RINSE 2

PRI32SS:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------
	GOSUB CONTCHK			;TB.2.1.5.2.34 CONTINUOUS CHECKS

	;----------------------------------
	;	transition conditions
	;----------------------------------

;TB.2.1.5.2.T22
	;transition T22
	;Rinse 2 step timer expired
	GOTO PRI1			;SYSTEM OFF

;===============================================================================
;TB.2.1.5.2		HOLD
;===============================================================================
HOLDSUB:

	SEQ_STATUS = "HOLD"
	STACKCLR	;rma003
;rma003	HRSCLR

;TB.2.1.5.2.35 CLEAR STACK
;rma003	ON ERROR GOSUB ERRSTK

;rma003	FOR STK_CNT = 1 TO 10 STEP 1
;rma003		RETCLR
;rma003	NEXT STK_CNT
;rma003	GOTO ENDSTK
ERRSTK:
;rma003	ERSCLR

ENDSTK:
	ON ERROR GOSUB ERRSUB

	SA_MESSAGE = " "

	IF (SC_SA_STOP_CMD) THEN
               BEGIN
	        GOSUB CFGRELREQ		;RDK003 CENTRIFUGE RELEASE REQUEST
		GOTO PRI1		;SYSTEM OFF
               END

	TIMEROFF IBAD_TMR
	TIMERCLR IBAD_TMR
	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
	PRINT LOG_ADI, "IN HOLD STATE"

	GOSUB ADH			;TB.2.1.5.2.30 ALIGN DEVICES HOLD

HLOOP:
	;-------------------------------------
	;	steady state conditions
	;-------------------------------------

	;----------------------------------
	;	transition conditions
	;----------------------------------

	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		BEGIN
		DEV_FAILED_FG = 0
		GOTO MAIN
		END

	WAIT 1
	GOTO HLOOP

;===============================================================================
;TB.2.1.5.2		FAIL
;===============================================================================
FAIL:


	IF COMPAR(SEQ_STATUS,"FAIL",4,NE) THEN	;rma004
		BEGIN											;rma004
		ORIGINAL_FAIL_MSG = FAIL_MSG	;rma004
		SA_MESSAGE = FAIL_MSG			;rma004
		END									;rma04

	SEQ_STATUS = "FAIL"

	ORIGINAL_FAIL_MSG = FAIL_MSG	;rma004

	STACKCLR	;rma003
;TB.2.1.5.2.35 CLEAR STACK
;rma003	ON ERROR GOSUB ERRSTK2

;rma003	FOR STK_CNT = 1 TO 10 STEP 1
;rma003		RETCLR
;rma003	NEXT STK_CNT
;rma003	GOTO ENDSTK2
ERRSTK2:
;rma003	ERSCLR

ENDSTK2:
	ON ERROR GOSUB ERRSUB

	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red
	PRINT LOG_ADI, "IN FAIL STATE"
;rma004	SA_MESSAGE = FAIL_MSG
	PRINT LOG_ADI, "%p",FAIL_MSG

	IF (DEV_IN_MANUAL_FG) THEN
		DEV_IN_MANUAL_FG = 0
	ELSE
		GOSUB ADF		;TB.2.1.5.2.31 ALIGN DEVICES FAIL

FLOOP:
	;----------------------------------
	;	transition conditions
	;----------------------------------

	;Continue command
	IF (SC_SA_CONT_CMD) THEN
		BEGIN
		ORIGINAL_FAIL_MSG = ""		;rma004
		DEV_FAILED_FG = 0
		GOTO MAIN
		END

	WAIT 1
	GOTO FLOOP

;*******************************************************************************
;*******************************************************************************
;		S U B R O U T I N E S
;*******************************************************************************
;*******************************************************************************
;==============================================================================
;TB.2.1.5.2.1		ALIGN DEVICES SYSTEM OFF
;==============================================================================

ADSO:

	;rma006 do not leave bta in hold
	IF (COMPAR(BTA2_SEQ_STATUS_ALLOF8,"FAIL",4,EQ)) | (COMPAR(BTA2_SEQ_STATUS_ALLOF8,"HOLD",4,EQ)) THEN	;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = BTA2_CONT_REQ_FG_ALLOF8		;rma006
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;rma006
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"		;rma006
		GOSUB SEQUENCEREQ											;rma006
		END

	LHX_FEED_TANK_EMPTY_2_FG = 0		;dmw007

	PUTMANL XFER_TNK_LVL_MODE
	MID XFER_TNK_LVL_MODE				;Auto

	PUTMANL FIL_FEED_TNK_LVL_MODE
	MID FIL_FEED_TNK_LVL_MODE				;Auto

	IF (REC_DEV_CNTL) THEN
		BEGIN						;acj007
		GOSUB RUNCMDDEV		;TB.2.1.5.2.36 RUN COMMAND DEVICES
		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007
		END						;acj007

		FIL_FEED_TNK_BRAND_PTR = " "
		XFER_TNK_BRAND_PTR = " "

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_A_FASSCM) THEN
	IF (DEST_TANK_A_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002      FASSA_REC_REQ_FASSCM = 0
;fly002      FASSA_HOLD_REQ_FASSCM = 0
;fly002		FASSA_RESP_FASSCM = 0
		FASSA_RECOVER_REQ_FG_ALLOF4 = 0    ;fly002
		FASSA_HOLD_REQ_FG_ALLOF4 = 0       ;fly002
      FASSA_REQ_RESP_INT_ALLOF4 = 0      ;fly002
		END
;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_B_FASSCM) THEN
	IF (DEST_TANK_B_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		FASSB_REC_REQ_FASSCM = 0
;fly002		FASSB_HOLD_REQ_FASSCM = 0
;fly002		FASSB_RESP_FASSCM = 0
		FASSB_RECOVER_REQ_FG_ALLOF4 = 0    ;fly002
		FASSB_HOLD_REQ_FG_ALLOF4 = 0       ;fly002
      FASSB_REQ_RESP_INT_ALLOF4 = 0      ;fly002
		END
;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_C_FASSCM) THEN
	IF (DEST_TANK_C_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		FASSC_REC_REQ_FASSCM = 0
;fly002		FASSC_HOLD_REQ_FASSCM = 0
;fly002		FASSC_RESP_FASSCM = 0
		FASSC_RECOVER_REQ_FG_ALLOF4 = 0    ;fly002
		FASSC_HOLD_REQ_FG_ALLOF4 = 0       ;fly002
      FASSC_REQ_RESP_INT_ALLOF4 = 0      ;fly002
		END
;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_D_FASSCM) THEN
	IF (DEST_TANK_D_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		FASSD_REC_REQ_FASSCM = 0
;fly002		FASSD_HOLD_REQ_FASSCM = 0
;fly002		FASSD_RESP_FASSCM = 0
		FASSD_RECOVER_REQ_FG_ALLOF4 = 0    ;fly002
		FASSD_HOLD_REQ_FG_ALLOF4 = 0       ;fly002
      FASSD_REQ_RESP_INT_ALLOF4 = 0      ;fly002
		END



	IF (CFG1_RUN_GROUP_SEL_CFGCM =2) THEN  ;rma005
		BEGIN											;rma005
		CFG1_RUN_REQ_CFGCM = 0					;rma005
		CFG1_RNP_REQ_CFGCM = 0					;rma005
		CFG1_REL_REQ_CFGCM = 0					;rma005
		CFG1_RESP_CFGCM = 0						;rma005
		END											;rma005

	IF (CFG4_RUN_GROUP_SEL_CFGCM =2) THEN  ;rma005
		BEGIN											;rma005
		CFG4_RUN_REQ_CFGCM = 0
		CFG4_RNP_REQ_CFGCM = 0
		CFG4_REL_REQ_CFGCM = 0
		CFG4_RESP_CFGCM = 0
		END 											;rma005
;rma005		CFG5_RUN_REQ_CFGCM = 0
;rma005		CFG5_RNP_REQ_CFGCM = 0
;rma005		CFG5_REL_REQ_CFGCM = 0
;rma005		CFG5_RESP_CFGCM = 0
;rma005		CFG6_RUN_REQ_CFGCM = 0
;rma005		CFG6_RNP_REQ_CFGCM = 0
;rma005		CFG6_REL_REQ_CFGCM = 0
;rma005		CFG6_RESP_CFGCM = 0
;rma006	IF (CFG7_RUN_GROUP_SEL_CFGCM =2) THEN  ;VCM011
;rma006		BEGIN
;rma006		CFG7_RUN_REQ_CFGCM = 0
;rma006		CFG7_RNP_REQ_CFGCM = 0
;rma006		CFG7_REL_REQ_CFGCM = 0
;rma006		CFG7_RESP_CFGCM = 0
;rma006		END
;rma006	IF (CFG8_RUN_GROUP_SEL_CFGCM =2) THEN  ;VCM011
;rma006		BEGIN
;rma006		CFG8_RUN_REQ_CFGCM = 0
;rma006		CFG8_RNP_REQ_CFGCM = 0
;rma006		CFG8_REL_REQ_CFGCM = 0
;rma006		CFG8_RESP_CFGCM = 0
;rma006		END

	IF (CFG9_FG) THEN								;rma006
		BEGIN											;rma006
		CFG9_RUN_REQ_ALLOF4 = 0             ;rma006
		CFG9_RNP_REQ_ALLOF4 = 0             ;rma006
		CFG9_RELEASE_REQ_ALLOF4 = 0             ;rma006
		CFG9_RESP_ALLOF4 = 0                ;rma006
		END											;rma006

	IF (CFG10_FG) THEN							;rma006
		BEGIN											;rma006
		CFG10_RUN_REQ_ALLOF4 = 0            ;fly000
		CFG10_RNP_REQ_ALLOF4 = 0            ;fly000
		CFG10_RELEASE_REQ_ALLOF4 = 0            ;fly000
		CFG10_RESP_ALLOF4 = 0               ;fly000
		END											;rma006

	IF (CFG11_FG) THEN							;rma006
		BEGIN											;rma006
		CFG11_RUN_REQ_ALLOF4 = 0            ;rma006
		CFG11_RNP_REQ_ALLOF4 = 0            ;rma006
		CFG11_RELEASE_REQ_ALLOF4 = 0            ;rma006
		CFG11_RESP_ALLOF4 = 0               ;rma006
		END											;rma006

	CFG_DISABLE_GLYCOL_PTR = 0

	PRI_CHK_REQ = 0
	PRI_OS_REQ = 0
	PRI_RECIRC_REQ = 0
	PRI_BLOWBACK_REQ = 0
	PRI_HOLD_REQ = 0
	PRI_CONT_REQ = 0
	PRI_RESP = 0
	REC_DEV_CNTL = 0

;mw049	BTA_RUN_REQ = 0
;mw049	BTA_HOLD_REQ = 0
;mw049	BTA_REC_REQ = 0
	PRIM2_BTA2_RUN_REQ_FG_ALLOF8 = 0	;mw049
	PRIM2_BTA2_HOLD_REQ_FG_ALLOF8 = 0	;mw049
	PRIM2_BTA2_REC_REQ_FG_ALLOF8 = 0	;mw049
;jaz048	BTA_RESP = 0
	BTA2_PRIM2_RESP_ALLOF8 = 0		;jaz048
;mw049	BTA_DISABLE_GLYCOL = 0
;mw049	BTA_CONT_REQ = 0	;RDK001	;acj005
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 0	;mw049
	BTA2_CONT_REQ_FG_ALLOF8 = 0		;mw049

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		LHX_RUN_REQ_LHX = 0
		LHX_HOLD_REQ_LHX = 0
		LHX_REL_REQ_LHX = 0
		LHX_RESP_LHX = 0
		END

	;Allow lhx selection if partial recovery and lhx available
	TEMP_FG = (LHX_SEL:DEV_STAT = LHX_AVAIL)
	TEMP_FG = (TEMP_FG | (LHX_SEL:DEV_STAT = PRIM_LHX))
	IF (PARTIAL_REC_SEL) & (TEMP_FG) THEN ;VCM009
	'PRIM2SEL':DEV_TMP0 = AND('PRIM2SEL':DEV_TMP0, NOT(T_10))	;acjxxx

	IF (PRIM2_DIL_VLV_BUSY_ALLOF8 = DIL_RES_NUMBER) THEN	;rma999
		PRIM2_DIL_VLV_BUSY_ALLOF8 = 0								;rma999

   FIL_FEED_PMP_ENABLE_FG = 0
	LAMP LAMP_ADI,LAMP_NUMBER,BLACK		;SKID = BLACK
	PARTIAL_REC_SEL = 0                 ;JMS005 FULL RECOVERY DEFAULT
	EXIT

;==============================================================================
;TB.2.1.5.2.2		ALIGN DEVICES FASS HEADER RECOVRY
;==============================================================================

ADFHR:
	REC_DEV_CNTL = 0
	BTA_BATCH_CTR  = 0
	LHX_FEED_TANK_EMPTY_2_FG = 0		;dmw007


	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		PARTIAL_REC_SEL = 0												;rma006

	GOSUB CHKMAN		;TB.2.1.5.2.33 CHECK IF DEVS IN AUTO

;rma005	IF (CENT_FEED_TNK_SEL_PTR = 1) THEN			;acj000
;rma005		BEGIN						;acj000
;rma005		ASSIGN CENT_FEED_TNK_LVL_PTR = CFT1_LVL		;acj000
;rma005		ASSIGN CENT_FEED_TNK_MODE_PTR = CFT1_MODE	;acj000
;VCM015		ASSIGN CFT_IN_VLV_PTR = CFT1_IN_VLV		;acj000
;rma005		END						;acj000
;rma005	ELSE IF (CENT_FEED_TNK_SEL_PTR = 2) THEN		;acj000
;rma005		BEGIN						;acj000
		ASSIGN CENT_FEED_TNK_LVL_PTR = CFT2_LVL		;acj000
		ASSIGN CENT_FEED_TNK_MODE_PTR = CFT2_MODE	;acj000
;VCM015		ASSIGN CFT_IN_VLV_PTR = CFT2_IN_VLV		;acj000
;rma005		END						;acj000
;rma005	ELSE							;acj000
;rma005		BEGIN						;acj000
;rma005		ASSIGN CENT_FEED_TNK_LVL_PTR = CFT3_LVL		;acj000
;rma005		ASSIGN CENT_FEED_TNK_MODE_PTR = CFT3_MODE	;acj000
;VCM015		ASSIGN CFT_IN_VLV_PTR = CFT3_IN_VLV		;acj000
;rma005		END						;acj000

	PUTAUTO CENT_FEED_TNK_MODE_PTR					;acj000
	OPEN CENT_FEED_TNK_MODE_PTR				;Drain	;acj000

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_CHK_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	GOSUB CFGRUNREQ		;TB.2.1.5.2.42 CENTRIFUGE RUN PROCESS REQUEST

	GOSUB FASSRECREQ	;TB.2.1.5.2.45 FASSING RECOVER SEQUENCE REQUEST

	RETURN

;==============================================================================
;TB.2.1.5.2.3		ALIGN DEVICES RECOVER RECIRC LINE
;==============================================================================

ADRRL:

	GOSUB CFGRUNREQ		;TB.2.1.5.2.43 CENTRIFUGE RUN PROCESS REQUEST	;acj000

;VCM014	CFT_VLV_OPEN_PTR = 1				;acj001
;VCM014	GOSUB O2XV103		;OPEN CFT_IN_VLV_PTR
;VCM014	GOSUB O32XV13		;OPEN DIL_IN_VLV

	RETURN

;==============================================================================
;TB.2.1.5.2.4		ALIGN DEVICES CENT FEED TANK EMPTY 1
;==============================================================================

ADCFTE1:

;	GOSUB C32XV13		;CLOSE DIL_IN_VLV
;VCM014	GOSUB C2XV103		;CLOSE CFT_IN_VLV_PTR
;VCM014	CFT_VLV_OPEN_PTR = 0				;acj001

	;rma006 - clear partial recovery selection if filter is bypassed
	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		PARTIAL_REC_SEL = 0												;rma006

	PUTAUTO CENT_FEED_TNK_MODE_PTR
	OPEN CENT_FEED_TNK_MODE_PTR				;Drain

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		ASSIGN SEQ_REQ_PTR = LHX_RUN_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN	;rma006 NOT bypassed
		BEGIN																;rma006
		ASSIGN SEQ_REQ_PTR = PRI_OS_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP	
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	GOSUB CFGRUNREQ		;TB.2.1.5.2.42 CENTRIFUGE RUN PROCESS REQUEST

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		LHX_COOLER_TEMP:PID_SPVL:1 = LHX_COOLER_TEMP_H2O	;acj006
;RDK003		BTA_DISABLE_GLYCOL = 1		;VCM001
		END						;VCM001
;mw049	BTA_DISABLE_GLYCOL = 1	    ;RDK003	
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049


	RETURN

;==============================================================================
;TB.2.1.5.2.5		ALIGN DEVICES CENT FEED TANK FILL
;==============================================================================
ADCFTF:
	PUTAUTO CENT_FEED_TNK_MODE_PTR
	MID CENT_FEED_TNK_MODE_PTR				;Auto

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
	EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
	EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006
	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		IF PARTIAL_REC_SEL THEN
			BEGIN
			CENT_FULL = (((PARTIAL_REC_CFT_BBLS - 69) / 7.5) + 10) ;18% = 125 BBLS VCM048
			IF (CENT_FULL < 10) THEN
				CENT_FULL = 10
			SA_MESSAGE = "FILLING CFT2 TO 125 BBLS"
			END
		ELSE
			IF (!PARTIAL_REC_SEL) & (!EXPR1) THEN	;rma006 full recovery, not bypassed, keep existing logic
				BEGIN
				CENT_FULL = CENT_FULL_LHX				 	
				SA_MESSAGE = "FOR LHX FILL CFT2 TO 220 BBLS"
				END
		ELSE
			IF (!PARTIAL_REC_SEL) & (EXPR1) THEN					;rma006 full recovery, filt bypassed
				BEGIN															;rma006
				CENT_FULL = BYPASSED_CENT_FULL_LHX					;rma006
				SA_TMP_INT = FLTCNV(SA_TMP_SG,BYPASSED_CENT_FULL_LHX,3,0)				 	
;rma008				SA_TMP_INT = APPEND(SA_MESSAGE,"FILL CFT2 TO ",SA_TMP_SG," BBLS")		;rma006
				SA_TMP_INT = APPEND(SA_MESSAGE,"FILL CFT2 TO ",SA_TMP_SG," PCT")		;rma008
				END															;rma006
		END
	ELSE			;else NOT using lhx
		BEGIN  ;VCM019
;VCM047		IF COMPAR(BRAND_ACTUAL,"S7",2,EQ) THEN    ;VCM048
		EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
		EXPR2 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"XFER")			;rma006
		EXPR3 = INSTR(CFT2_BYPASS_DEST_TANK_SG_ALLOF4,"LHX")			;rma006
;rma006		IF (RECIPE_LOW_DILUENT_ADD_FG = 1) | PARTIAL_REC_SEL THEN
		IF (RECIPE_LOW_DILUENT_ADD_FG & (!EXPR1)) | PARTIAL_REC_SEL THEN	;rma006 no lhx, not bypassed
			BEGIN
			CENT_FULL = (((PARTIAL_REC_CFT_BBLS - 69) / 7.5) + 10) ;18% = 125 BBLS VCM048
			IF (CENT_FULL < 10) THEN
				CENT_FULL = 10
			SA_MESSAGE = "FILLING CFT2 TO 125 BBLS"
			END
;rma006		ELSE
		ELSE IF (!PARTIAL_REC_SEL) & (!EXPR1) THEN			;rma006 full recovery not bypassed
			BEGIN
			CENT_FULL = CENT_FULL_NOLHX
			SA_MESSAGE = "FILLING CFT2 TO 220 BBLS"
			END
		ELSE IF (!PARTIAL_REC_SEL) & (EXPR1) THEN				;rma006 full recovery not bypassed
			BEGIN															;rma006
			CENT_FULL = BYPASSED_CENT_FULL_XFR					;rma006 bypassed to xfer tank fritz
			SA_TMP_INT = FLTCNV(SA_TMP_SG,BYPASSED_CENT_FULL_XFR,3,0)				 	
;rma008			SA_TMP_INT = APPEND(SA_MESSAGE,"FILL CFT2 TO ",SA_TMP_SG," BBLS")		;rma006
			SA_TMP_INT = APPEND(SA_MESSAGE,"FILL CFT2 TO ",SA_TMP_SG," PCT")		;rma008
			END															;rma006

		END

	IF (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM	=2)) THEN	;rma005
		CFG1_DRAIN_YST_FG_CFGCM = 1          					;rma005 SEND YST TO DRAIN VCM013

;rma006	IF (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2)) THEN
;rma006		CFG7_DRAIN_YST_FG_CFGCM = 1          ;SEND YST TO DRAIN VCM012
;rma006
;rma006	IF (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM	=2)) THEN
;rma006		CFG8_DRAIN_YST_FG_CFGCM = 1          ;SEND YST TO DRAIN VCM012

;rma005	IF (CFG4_FG) THEN
	IF (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM	=2)) THEN ;rma005
		CFG4_DRAIN_YST_FG_CFGCM = 1          ;SEND YST TO DRAIN VCM012

;rma005	IF (CFG5_FG) THEN
;rma005		CFG5_DRAIN_YST_FG_CFGCM = 1          ;SEND YST TO DRAIN VCM012

;rma005	IF (CFG6_FG) THEN
;rma005		CFG6_DRAIN_YST_FG_CFGCM = 1          ;SEND YST TO DRAIN VCM012

	IF (CFG9_FG) THEN			              ;JMS001
		CFG9_DRAIN_YST_FG_CFGCM = 1	     ;JMS001

 	IF (CFG10_FG) THEN			     ;fly000
		CFG10_DRAIN_YST_FG_CFGCM = 1	     ;fly000

	IF (CFG11_FG) THEN			     			;rma006
		CFG11_DRAIN_YST_FG_ALLOF4 = 1			;rma006

	GOSUB CFGRNPREQ		;TB.2.1.5.2.43 CENTRIFUGE RUN NOT PROCESS REQUEST

;fly002 not needed when all fass headers cut over to vg1 matrix skid
;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_A_FASSCM) THEN  ;VCM014
;fly002	IF (DEST_TANK_A_ALLOF4 = 2) THEN	;fly002
;fly002		ASSIGN FASS_REC_CFT_FILL_1_PTR = FASSA_REC_CFT_FILL_1_FG_ALLOF4
;fly002	ELSE IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_B_FASSCM) THEN  ;VCM014
;fly002	ELSE IF (DEST_TANK_B_ALLOF4 = 2) THEN	;fly002
;fly002		ASSIGN FASS_REC_CFT_FILL_1_PTR = FASSB_REC_CFT_FILL_1_FG_ALLOF4
;fly002	ELSE IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_C_FASSCM) THEN  ;VCM014
;fly002	ELSE IF (DEST_TANK_C_ALLOF4 = 2) THEN	;fly002
;fly002		ASSIGN FASS_REC_CFT_FILL_1_PTR = FASSC_REC_CFT_FILL_1_FG_ALLOF4
;fly002	ELSE IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_D_FASSCM) THEN  ;VCM014
;fly002		ASSIGN FASS_REC_CFT_FILL_1_PTR = FASSD_REC_CFT_FILL_1_FG_ALLOF4
;fly002	ELSE
;fly002		BEGIN
;fly002		FAIL_MSG = "NO FASS HEADER SUPPLYING CFT"
;fly002		GOTO FAIL
;fly002		END
;fly002 not needed when all fass headers cut over to vg1 matrix skid

;fly002   FASS_REC_CFT_FILL_1_PTR = 1 ;VCM014  
;fly002	IF (DEST_TANK_A_ALLOF4 != 2)&(DEST_TANK_B_ALLOF4 !=2) &(DEST_TANK_C_ALLOF4 !=2)THEN      ;fly002 remove when all headers cutover
;fly002		GOSUB FASSRECREQ	;TB.2.1.5.2.45 FASSING RECOVER SEQUENCE REQUEST VCM014 ;fly002 remove when all headers cutover
;fly002	ELSE                       				;fly002 ;fly002 remove when all headers cutover
	;request fass hdr fill cent feed tank with diluent
		GOSUB FASSFILLREQ						;fly002 

;VCM014	CFT_VLV_OPEN_PTR = 1				;acj001
;VCM014	GOSUB O2XV103		;OPEN CFT_IN_VLV_PTR
;VCM014	GOSUB O32XV13		;OPEN DIL_IN_VLV

	RETURN

;==============================================================================
;TB.2.1.5.2.6		ALIGN DEVICES FASS COOLER RECOVRY
;==============================================================================

ADFCR:
;	GOSUB C32XV13		;CLOSE DIL_IN_VLV
;VCM014	GOSUB C2XV103		;CLOSE CFT_IN_VLV_PTR
;VCM014	CFT_VLV_OPEN_PTR = 0				;acj001

	CFG_DISABLE_GLYCOL_PTR = 1

	GOSUB CFGRUNREQ		;TB.2.1.5.2.42 CENTRIFUGE RUN PROCESS REQUEST

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_OS_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	PUTAUTO CENT_FEED_TNK_MODE_PTR
	OPEN CENT_FEED_TNK_MODE_PTR				;Drain

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		ASSIGN SEQ_REQ_PTR = LHX_RUN_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

   GOSUB FASSFILLREL ;fly002 - release fass hdr fill cent feed tank with diluent

	RETURN

;==============================================================================
;TB.2.1.5.2.7		ALIGN DEVICES FILTER FEED TANK EMPTY 1
;==============================================================================

ADFFTE1:
	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		ASSIGN SEQ_REQ_PTR = LHX_RUN_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	GOSUB CFGRNPREQ		;TB.2.1.5.2.43 CENTRIFUGE RUN NOT PROCESS REQUEST

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_OS_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		LHX_COOLER_TEMP:PID_SPVL:1 = LHX_COOLER_TEMP_H2O	;acj006
;RDK003		BTA_DISABLE_GLYCOL = 1		;VCM001
		END						;VCM001
;mw049	BTA_DISABLE_GLYCOL = 1	    ;RDK003  
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049   

	RETURN

;==============================================================================
;TB.2.1.5.2.8		ALIGN DEVICES CENT FEED TANK EMPTY 2
;==============================================================================

ADCFTE2:

	GOSUB CFGRUNREQ		;TB.2.1.5.2.42 CENTRIFUGE RUN PROCESS REQUEST

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_RECIRC_REQ	;acj004
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	PUTAUTO CENT_FEED_TNK_MODE_PTR
	OPEN CENT_FEED_TNK_MODE_PTR				;Drain

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	MID FIL_FEED_TNK_LVL_MODE				;Auto

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		ASSIGN SEQ_REQ_PTR = LHX_RUN_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.9		ALIGN DEVICES SHELL RECOVER
;==============================================================================

ADSR:
;	IF (!PARTIAL_REC_SEL) THEN		;VCM021
	P2_CFT_RINSE_CMD_PRIMCM = 1  ;VCM016   if partial CFT will skip rinse
	GOSUB CFGRELREQ		;TB.2.1.5.2.44 CENTRIFUGE RELEASE REQUEST

	PUTAUTO CENT_FEED_TNK_MODE_PTR					;acj000
	MID CENT_FEED_TNK_MODE_PTR				;Auto	;acj000

	CFG_DISABLE_GLYCOL_PTR = 0

	FIL_FLOW_TOTD:CAL_VCVL:1 = FIL_FLOW_TOTD:CB_OTVL:1
	PUTMANL FIL_FLOW_TOT
	PUTAUTO FIL_FLOW_TOT

	ASSIGN SEQ_REQ_PTR = PRI_OS_REQ
	ASSIGN SEQ_RESP_PTR = PRI_RESP
	FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ	;acj000
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ 		;TB.2.1.5.2.39 SEQUENCE REQUEST

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE		;Drain

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain	;acj000

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		LHX_COOLER_TEMP:PID_SPVL:1 = LHX_COOLER_TEMP_H2O	;acj006
		END						;VCM001
;mw049	BTA_DISABLE_GLYCOL = 1	    ;RDK003	
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049

	RETURN

;==============================================================================
;TB.2.1.5.2.10		ALIGN DEVICES LHX TANK EMPTY 1
;==============================================================================

ADLTE1:

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN			;rma006 not bypassed
		BEGIN	 																	;rma006
		ASSIGN SEQ_REQ_PTR = PRI_RECIRC_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END																		;rma006
	ELSE							;rma006 if bypass must rnp cfgs
		GOSUB CFGRNPREQ		;rma006 CENTRIFUGE RUN NOT PROCESS REQUEST


	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		LHX_FEED_TANK_EMPTY_2_FG = 1			;acj006
		WAIT 1						;acj006
		LHX_COOLER_TEMP:PID_SPVL:1 = LHX_COOLER_TEMP_H2O	;acj006

		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		ASSIGN SEQ_REQ_PTR = LHX_RUN_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;mw049	BTA_DISABLE_GLYCOL = 1		;acj008
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	RETURN

;==============================================================================
;TB.2.1.5.2.11		ALIGN DEVICES FILTER FEED TANK EMPTY 2
;==============================================================================

ADFFTE2:
	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

	ASSIGN SEQ_REQ_PTR = PRI_OS_REQ
	ASSIGN SEQ_RESP_PTR = PRI_RESP
	FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		ASSIGN SEQ_REQ_PTR = LHX_HOLD_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;mw049	ASSIGN SEQ_REQ_PTR = BTA_HOLD_REQ				;acj000
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_HOLD_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP					;acj000
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"			;acj000
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST	;acj000

	RETURN

;==============================================================================
;TB.2.1.5.2.12		ALIGN DEVICES SHELL BLOWBCK TO SEWER
;==============================================================================

ADSBTS:
;mw049	BTA_DISABLE_GLYCOL = 1
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ				;acj000
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	ASSIGN SEQ_REQ_PTR = PRI_BLOWBACK_REQ
	ASSIGN SEQ_RESP_PTR = PRI_RESP
	FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	SA_2_MESSAGE = "OKAY TO FASS NEXT BRAND"	;RDK001	;acj005
	SA_3_MESSAGE = "CENTRIFUGES OK FOR CIP"		;RDK001	;acj005

	RETURN

;==============================================================================
;TB.2.1.5.2.13		ALIGN DEVICES VENT
;==============================================================================

ADV:
	BRAND_ID = " "
	RETURN

;==============================================================================
;TB.2.1.5.2.14		ALIGN DEVICES SLUICE
;==============================================================================

ADS:
	SA_2_MESSAGE = "OKAY TO FASS NEXT BRAND"	;RDK001	;acj005
	SA_3_MESSAGE = "CENTRIFUGES OK FOR CIP"		;RDK001	;acj005

	RETURN

;==============================================================================
;TB.2.1.5.2.15		ALIGN DEVICES RINSE 1
;==============================================================================

ADR1:
	RETURN

;==============================================================================
;TB.2.1.5.2.16		ALIGN DEVICES PRECOAT LINE RECLAIM
;==============================================================================

ADPLR:
	REC_DEV_CNTL = 1

	ASSIGN SEQ_REQ_PTR = PRI_HOLD_REQ
	ASSIGN SEQ_RESP_PTR = PRI_RESP
	FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	WAIT 5
	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.17		ALIGN DEVICES FILTER FEED LINE RINSE
;==============================================================================

ADFFLR:
	PUTAUTO XFER_TNK_LVL_MODE
	MID XFER_TNK_LVL_MODE				;Auto

;VCM010 only concerned about primary 1
SIUFFR:								;MGG000
	IF (SLUICE_INUSE_POLCOM != 0) THEN			;acj007
;VCM010		IF (SLUICE_INUSE_POLCOM != SLUICE_BIT) THEN	;acj007
		IF (SLUICE_INUSE_POLCOM = 1) THEN	;VCM010
			BEGIN					;acj007
			GOSUB C06XV31				;acj007
         GOSUB C06XV362          ;JMS004
			GOSUB O6XV318				;acj007
;pbh001 GOSUB C6XV319				;acj007
;pbh001			GOSUB C6XV320				;acj007
			GOSUB C6XV324				;acj007
			GOSUB C6XV201                           ;VCM005
			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW	;acj007
			SA_MESSAGE = "SLUICE VALVE INUSE"			;acj007
;MGG000			WAITUNTIL (SLUICE_INUSE_POLCOM != 1)	;VCM010
			GOTO SIUFFR
			END
	IF (SLUICE_INUSE_POLCOM != 1) THEN			;MGG000
			BEGIN					;acj007
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN	;acj007
			END					;acj007
	SLUICE_INUSE_POLCOM = SLUICE_BIT			;acj007
	SA_MESSAGE = " "					;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.18		ALIGN DEVICES CIRC TO FEED RINSE
;==============================================================================

ADCTFR:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.19		ALIGN DEVICES BLOWBCK RINSE
;==============================================================================

ADBR:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.20		ALIGN DEVICES ON STREAM LINE RINSE
;==============================================================================

ADOSLR:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.21		ALIGN DEVICES LHX TANK EMPTY 2
;==============================================================================

ADLTE2:

	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN
		GOSUB CFGRELREQ	 ;rma006 if bypassed must release cfgs
		P2_CFT_RINSE_CMD_PRIMCM = 1
		END

	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		OPEN LHX_TNK_LVL_MODE				;Drain

		LHX_FEED_TANK_EMPTY_2_FG = 1	;tell LHX recovery is here   dmw007

		ASSIGN SEQ_REQ_PTR = LHX_HOLD_REQ_LHX	;acj006
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
		SLUICE_INUSE_POLCOM = 0			;acj007

	RETURN

;==============================================================================
;TB.2.1.5.2.22		ALIGN DEVICES FILTER TRANSFR TANK EMPTY 1
;==============================================================================

ADFTTE1:
	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN
		REC_DEV_CNTL = 1				;VCM055 SIMILAR TO PARTIAL RECOVERY
		GOSUB CFGRNPREQ		;rma006 rnp cfgs
		END

	IF (PARTIAL_REC_SEL) THEN				;acj002
		BEGIN						;acj002
;mw049		BTA_DISABLE_GLYCOL = 1				;acj002
		BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1	;mw049

		REC_DEV_CNTL = 1				;acj002

		IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
			BEGIN															;rma006
			ASSIGN SEQ_REQ_PTR = PRI_HOLD_REQ		;acj002
			ASSIGN SEQ_RESP_PTR = PRI_RESP			;acj002
			FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"	;acj002
			GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST	;acj002
			END															;rma006

		WAIT 5						;acj002

		PUTAUTO XFER_TNK_LVL_MODE            ;RDK003
		OPEN XFER_TNK_LVL_MODE		     ;RDK003	Drain

;mw049	ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ         ;RDK003
		ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP           ;RDK003
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"    ;RDK003
		GOSUB SEQUENCEREQ	;RDK003	;TB.2.1.5.2.39 SEQUENCE REQUEST
		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007
      WAIT 3
      END

	IF (PARTIAL_REC_SEL = 0) THEN				;acj002
		BEGIN						;acj002
		PUTAUTO XFER_TNK_LVL_MODE
		OPEN XFER_TNK_LVL_MODE				;Drain
;mw049		BTA_DISABLE_GLYCOL = 1				;acj002
		BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 1			;mw049

;mw049		ASSIGN SEQ_REQ_PTR = BTA_RUN_REQ
		ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_RUN_REQ_FG_ALLOF8	;mw049
;jaz048		ASSIGN SEQ_RESP_PTR = BTA_RESP
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

		GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.23		ALIGN DEVICES FILTER TRANSFR TANK FILL 1
;==============================================================================

ADFTTF1:
	PUTAUTO XFER_TNK_LVL_MODE
	MID XFER_TNK_LVL_MODE				;Auto

	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN										;rma006
		GOSUB CFGRELREQ	 					;rma006 if bypassed must release cfgs
		P2_CFT_RINSE_CMD_PRIMCM = 1		;rma006
		END										;rma006


	IF (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		PUTAUTO LHX_TNK_LVL_MODE
		MID LHX_TNK_LVL_MODE				;Auto

		ASSIGN SEQ_REQ_PTR = LHX_REL_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;RDK003	GOSUB SLUICERES			;Reserve sluice		;acj007

	IF (PARTIAL_REC_SEL = 0) THEN				;RDK003acj002
		BEGIN						;RDK003acj002
		GOSUB SLUICERES			;Reserve sluice		;acj007
		GOSUB RUNCMDDEV	  ;TB.2.1.5.2.36 RUN COMMAND DEVICES
		END                                  ;RDK003

	IF (PARTIAL_REC_SEL = 1)&(XFER_TNK_LVL:AI_MEAS<XFER_FULL)THEN;VCM007 
		BEGIN					     ;RDK003acj002
		GOSUB O06XV32                                ;RDK003
		GOSUB O06XV31                                ;RDK003
      GOSUB O06XV362        ;JMS004
		END                                          ;RDK003
	RETURN

;==============================================================================
;TB.2.1.5.2.24		ALIGN DEVICES FILTER TRANSFR TANK EMPTY 2
;==============================================================================

ADFTTE2:
	IF (PARTIAL_REC_SEL = 0) THEN				;RDK003acj002
		BEGIN						;RDK003acj002
		GOSUB RUNCMDDEV	  ;TB.2.1.5.2.36 RUN COMMAND DEVICES
		END                                  ;RDK003

	IF (PARTIAL_REC_SEL = 1) THEN			     ;RDK003acj002
		BEGIN					     ;RDK003acj002
		GOSUB C06XV31                                ;RDK003
		GOSUB C06XV32                                ;RDK003
      GOSUB C06XV362        ;JMS004
		END                                          ;RDK003

	IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
		SLUICE_INUSE_POLCOM = 0			;acj007

;	OPER_RESPONSE = " "					;DVS000	;acj005
;	SA_MESSAGE = "DON'T CLOSE AGE TNK VLV YET!"		;RDK001	;acj005
;	SA_2_MESSAGE = "BTA BATCH CTR ENTRD?:C TO CONT"		;RDK001	;acj005
;	LAMP LAMP_ADI,LAMP_NUMBER,YELLOW	;SKID = YELLOW	;RDK001	;acj005
;	WAITUNTIL (COMPAR(OPER_RESPONSE,"C",1,EQ))		;DVS000	;acj005
;	LAMP LAMP_ADI,LAMP_NUMBER,GREEN		;SKID = GREEN	;RDK001	;acj005
;	SA_MESSAGE = " "					;RDK001	;acj005
;	SA_2_MESSAGE = " "					;RDK001	;acj005
;	OPER_RESPONSE = " "					;RDK001	;acj005

        BTA_BATCH_CTR  = '8608FQ2B':AI_MEAS

;mw049	ASSIGN SEQ_REQ_PTR = BTA_REC_REQ
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_REC_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	WAIT 3
	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	RETURN

;==============================================================================
;TB.2.1.5.2.25		ALIGN DEVICES FILTER TRANSFR EMPTY 2 WAIT
;==============================================================================

ADFTE2W:
;mw049	BTA_DISABLE_GLYCOL = 0
	BTA2_DISABLE_GLYCOL_FG_ALLOF8 = 0	;mw049

	IF (PARTIAL_REC_SEL = 0) THEN				;RDK003acj002
		BEGIN						;RDK003acj002
		GOSUB RUNCMDDEV	  ;TB.2.1.5.2.36 RUN COMMAND DEVICES
		END                                  ;RDK003

;mw049	ASSIGN SEQ_REQ_PTR = BTA_HOLD_REQ	;RDK001			;acj005
	ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_HOLD_REQ_FG_ALLOF8	;mw049
;jaz048	ASSIGN SEQ_RESP_PTR = BTA_RESP		;RDK001			;acj005
	ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
	FAIL_MSG = "BEER TO AGING REQUEST FAILURE"	;RDK001		;acj005
	GOSUB SEQUENCEREQ		;RDK001	;SEQUENCE REQUEST	;acj005

	OPER_RESPONSE = " "
	SA_MESSAGE = "AGING TNK CLSD ? : C TO CONT"
	LAMP LAMP_ADI,LAMP_NUMBER,YELLOW	;SKID = YELLOW
	WAITUNTIL (COMPAR(OPER_RESPONSE,"C",1,EQ))


	RETURN

;==============================================================================
;TB.2.1.5.2.26		ALIGN DEVICES FILTER TRANSFR TANK EMPTY 3
;==============================================================================

ADFTTE3:
        ;RDK003 START
	IF (PARTIAL_REC_SEL = 1) THEN			     ;RDK003acj002
		BEGIN					     ;RDK003acj002
		PUTMANL '8608FC2'		;RDK001 START				;acj003
;rma006		PUTOUT '8608FC2',50							;acj003
		PUTOUT '8608FC2',100						;rma006
		GOSUB O08XV11								;acj003
		GOSUB O8XV253								;rma009

		IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"F",1,EQ) THEN   ;VCM001
			BEGIN                                                ;VCM001
;			GOSUB O0XV204
			GOSUB O0XV913															;MRP002
			END

		IF COMPAR(BTA2_HEADER_SELECT_PRIMCM,"E",1,EQ) THEN 
			BEGIN                                                ;VCM001
;			GOSUB O0XV205
			GOSUB O0XV903																;MRP002
			END

		WAIT 3				;wait for interlock to clear  dmw042094	;acj003
		GOSUB O8608P1			;RDK001 END				;acj003
		END

	IF (PARTIAL_REC_SEL = 0) THEN			     ;RDK003acj002
		BEGIN					     ;RDK003acj002
		GOSUB SLUICERES			;Reserve sluice RDK003

;		IF (FIL_FEED_TNK_LVL:AI_MEAS < 20) THEN		      ;JMS003
;			FAIL_MSG = "FEED TNK TO LOW TO START PMP"       ;JMS003
;			GOTO FAIL                                       ;JMS003
;			END                                             ;JMS003

		GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES
		END

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	RETURN

;==============================================================================
;TB.2.1.5.2.27		ALIGN DEVICES FILTER FEED TANK EMPTY 3
;==============================================================================

ADFFTE3:
	GOSUB SLUICERES			;Reserve sluice		;acj007

;		IF (FIL_FEED_TNK_LVL:AI_MEAS < 20) THEN		      ;JMS003
;			BEGIN                                           ;JMS003
;			FAIL_MSG = "FEED TNK TO LOW TO START PMP"       ;JMS003
;			GOTO FAIL                                       ;JMS003
;			END                                             ;JMS003

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

	RETURN

;==============================================================================
;TB.2.1.5.2.28		ALIGN DEVICES FILTER FEED TK FILL FINAL
;==============================================================================

ADFFTFF:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	TIMERON TIMER1_TMR

	RETURN

;==============================================================================
;TB.2.1.5.2.29		ALIGN DEVICES FILTER TRANSFR FILL FINAL
;==============================================================================

ADFTFF:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	RETURN

;==============================================================================
;TB.2.1.5.2.30		ALIGN DEVICES HOLD
;==============================================================================

ADH:
	;fass header recovery		;VCM020 added (SA_STATE = 5) cft fill
	IF (SA_STATE = 2)|(SA_STATE = 5) THEN
		GOSUB FASSHLDREQ	;TB.2.1.5.2.46 FASSING HOLD REQUEST

	;cent feed tank empty 2
	IF (SA_STATE <= 8) THEN
		GOSUB CFGRNPREQ		;TB.2.1.5.2.43 CENTRIFUGE RUN NOT PROCESS REQUEST

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_HOLD_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END															;rma006

	;filter transfer tank empty 3
	IF (SA_STATE <= 24) THEN
		BEGIN
;mw049		ASSIGN SEQ_REQ_PTR = BTA_HOLD_REQ	
		ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_HOLD_REQ_FG_ALLOF8	;mw049
;jaz048		ASSIGN SEQ_RESP_PTR = BTA_RESP
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	;filter transfer tank empty 1
	IF (SA_STATE <= 22) & (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		ASSIGN SEQ_REQ_PTR = LHX_HOLD_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (REC_DEV_CNTL) THEN
		BEGIN						;acj007
		GOSUB RUNCMDDEV		;TB.2.1.5.2.36 RUN COMMAND DEVICES
		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007
		END						;acj007

;	IF (CFT_VLV_OPEN_PTR) THEN				;acj001
;		BEGIN						;acj001
;		GOSUB C32XV13		;CLOSE DIL_IN_VLV	;acj001
;VCM014		GOSUB C2XV103		;CLOSE CFT_IN_VLV_PTR	;acj001
;VCM014		CFT_VLV_OPEN_PTR = 0				;acj001
;		END						;acj001

	RETURN

;==============================================================================
;TB.2.1.5.2.31		ALIGN DEVICES FAIL
;==============================================================================

ADF:
	;fass header recovery		;VCM020 added (SA_STATE = 5) cft fill
	IF (SA_STATE = 2)|(SA_STATE = 5) THEN
		GOSUB FASSHLDREQ	;TB.2.1.5.2.46 FASSING HOLD REQUEST

	;cent feed tank empty 2
	IF (SA_STATE <= 8) THEN
		GOSUB CFGRNPREQ		;TB.2.1.5.2.43 CENTRIFUGE RUN NOT PROCESS REQUEST

	IF !INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN		;rma006
		BEGIN															;rma006
		ASSIGN SEQ_REQ_PTR = PRI_HOLD_REQ
		ASSIGN SEQ_RESP_PTR = PRI_RESP
		FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END																;rma006

	;filter transfer tank empty 3
	IF (SA_STATE <= 24) THEN
		BEGIN
;mw049		ASSIGN SEQ_REQ_PTR = BTA_HOLD_REQ
		ASSIGN SEQ_REQ_PTR = PRIM2_BTA2_HOLD_REQ_FG_ALLOF8	;mw049
;jaz048		ASSIGN SEQ_RESP_PTR = BTA_RESP
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	;filter transfer tank empty 1
	IF (SA_STATE <= 22) & (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		ASSIGN SEQ_REQ_PTR = LHX_HOLD_REQ_LHX
		ASSIGN SEQ_RESP_PTR = LHX_RESP_LHX
		FAIL_MSG = "LHX REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (REC_DEV_CNTL) THEN
		BEGIN						;acj007
		GOSUB RUNCMDDEV		;TB.2.1.5.2.36 RUN COMMAND DEVICES
		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007
		END						;acj007

;	IF (CFT_VLV_OPEN_PTR) THEN				;acj001
;		BEGIN						;acj001
;		GOSUB C32XV13		;CLOSE DIL_IN_VLV	;acj001
;VCM014		GOSUB C2XV103		;CLOSE CFT_IN_VLV_PTR	;acj001
;VCM014		CFT_VLV_OPEN_PTR = 0				;acj001
;		END						;acj001
	RETURN

;==============================================================================
;TB.2.1.5.2.32		STATE INITIALIZATION
;==============================================================================

STATEINIT:
	PRI2_REC_SA_STATE_ALLOF4 = SA_STATE	;MRP001
	SEQ_STATUS = ""
	SA_MESSAGE = ""
	SA_2_MESSAGE = " "	;RDK001	;acj005
	SA_3_MESSAGE = " "	;RDK001	;acj005
	FAIL_MSG = ""
	PRINT LOG_ADI,"%p",SA_STATUS
	TIMERCLR STEP_TMR
	TIMEROFF IBAD_TMR
	TIMERCLR IBAD_TMR
	LAMP LAMP_ADI,LAMP_NUMBER,GREEN
	LAST_LAMP_STATE = GREEN
	PRIM2_RECOVERY_FG_CFGCM = 1 ;VCMXXX
	PRIM2_PARTIAL_REC_ALLOF4 = PARTIAL_REC_SEL  ;VCM048

	GOSUB CLRCMD		;TB.2.1.5.2.38 CLEAR COMMANDS

	TD_INTO1_FG = 0							;acj006

	TIMEROFF TIMER1_TMR
	TIMERCLR TIMER1_TMR

	TIMEROFF SUS_1_TMR
	TIMERCLR SUS_1_TMR
	RETURN

;==============================================================================
;TB.2.1.5.2.33		CHECK IF DEVS IN AUTO
;==============================================================================

;===============================================================================
;	D E V I C E	M A N U A L	C H E C K	S U B R O U T I N E
;===============================================================================

	;This subroutine will check to see if any devices are in
	;manual.  If so the program will transition to failure mode
	;and exit.  The sequence administrator program will go into
	;failure hold state.

MANLCHK:
	DEV_IN_MANUAL_FG = 0				;Clear the failure flag first.

	IF !AND(DEV_PTR:DEV_MODE,M_0) THEN
		BEGIN
		DEV_IN_MANUAL_FG = 1				; Set fail flag
		GOTO FAIL				; exit
		END
	RETURN					; Check next device

;===============================================================================
;	CHECKMANUAL
;
;	This routine checks for manual devices in the list of devices
;	and returns an error if one is in manual.
;
;=======================================================================
CHKMAN:

	IF INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS") THEN	;rma006
		RETURN	;rma006

	ASSIGN DEV_PTR = '8606BB202'	;acjxxx
	FAIL_MSG = "SLUICE INLET BLKBDVLV MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8605XV631'	;acjxxx
	FAIL_MSG = "DILUENT FLUSH VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV207'	;acjxxx
	FAIL_MSG = "LEAF DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV211'	;acjxxx
	FAIL_MSG = "BACK PRESS VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV210'	;acjxxx
	FAIL_MSG = "BEER FILL VALVE MANL"
	GOSUB MANLCHK


	ASSIGN DEV_PTR = '8606XV204'	;acjxxx
	FAIL_MSG = "AIR VENT VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV201'	;acjxxx
	FAIL_MSG = "SLUICE OUTLET VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV205'	;acjxxx
	FAIL_MSG = "CO2 VENT VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV113'
	FAIL_MSG = "RINSE DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV227'	;acjxxx
	FAIL_MSG = "VENT DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV212'	;acjxxx
	FAIL_MSG = "CO2 PURGE VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV209'	;acjxxx
	FAIL_MSG = "BEER INLET VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV223'	;acjxxx
	FAIL_MSG = "PRECOAT SUPPLY VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV21'	;acjxxx
	FAIL_MSG = "DILUENT WATER VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV362'	             ;JMS004
	FAIL_MSG = "DILUENT WATER VLV3 MANL"		 ;JMS004
	GOSUB MANLCHK										 ;JMS004

	ASSIGN DEV_PTR = '8606XV22'	;acjxxx
	FAIL_MSG = "DILUENT RINSE VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV203'	;acjxxx
	FAIL_MSG = "CO2 BLOWDOWN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV206'	;acjxxx
	FAIL_MSG = "BLOWBACK VALVE  MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV217'	;acjxxx
	FAIL_MSG = "BEER FEED VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV218'	;acjxxx
	FAIL_MSG = "BEER OUTLET VALVE MANL"
	GOSUB MANLCHK

;VCM049	ASSIGN DEV_PTR = '8606XV219'	;acjxxx
;VCM049	FAIL_MSG = "PRECOAT CIRC VALVE MANL"
;VCM049	GOSUB MANLCHK

;VCM049	ASSIGN DEV_PTR = '8606XV220'	;acjxxx
;VCM049	FAIL_MSG = "PRECOAT CIRC VALVE MANL"
;VCM049	GOSUB MANLCHK

;VCM049	ASSIGN DEV_PTR = '8606XV221'	;acjxxx
;VCM049	FAIL_MSG = "DILUENT PUMP PAK MANL"
;VCM049	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV224'	;acjxxx
	FAIL_MSG = "FILL SUPPLY VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV225'	;acjxxx
	FAIL_MSG = "CIRC TO PUMP MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV226'	;acjxxx
	FAIL_MSG = "CIRC TO TANK MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606P21'	;acjxxx
	FAIL_MSG = "FILTER FEED PUMP MANL"
	GOSUB MANLCHK

;VCM049	ASSIGN DEV_PTR = '8606P23'	;acjxxx
;VCM049	FAIL_MSG = "PRECOAT CIRC PUMP MANL"
;VCM049	GOSUB MANLCHK

;JMS002	ASSIGN DEV_PTR = '8606P15'
;JMS002	FAIL_MSG = "SPENT DE PUMP MANL"
;JMS002	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8606XV230'	;acjxxx
	FAIL_MSG = "PURGE DRAIN VALVE MANL"
	GOSUB MANLCHK

	ASSIGN DEV_PTR = '8619XV21'	;acjxxx
	FAIL_MSG = "TETHOPS STOP VALVE   MANL"
	GOSUB MANLCHK

	RETURN

;==============================================================================
;TB.2.1.5.2.34		CONTINUOUS CHECKS (CONTCHK)
;==============================================================================

CONTCHK:

	;Check any pumps or agitators that should be running for proper run
	;status. They should not be in Fault or Not Running.

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006	IF (FIL_FEED_PMP_ENABLE_FG) THEN
	IF (FIL_FEED_PMP_ENABLE_FG)&(!EXPR1) THEN		;rmasfp
		IF (FIL_FEED_PMP:DEV_STAT != S_1) THEN		;RUNNING
			BEGIN
			FAIL_MSG = "FIL FEED PUMP NOT RUNNING"
			GOTO FAIL
			END

	IF (XFER_TNK_HI_LVL:DEV_STAT = S_1) THEN
		BEGIN
		FAIL_MSG = "XFER TANK HI LEVEL"
		GOTO FAIL
		END

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006	IF (FIL_FEED_TNK_HI_LVL:DEV_STAT = S_1) THEN
	IF (FIL_FEED_TNK_HI_LVL:DEV_STAT = S_1) & (!EXPR1) THEN	;rma006
		BEGIN
		FAIL_MSG = "FILTER FEED TANK HI LEVEL"
		GOTO FAIL
		END

	IF !(XFER_TNK_CO2_OK_PTR) THEN
		BEGIN
		FAIL_MSG = "XFER TANK COUNTERPRESSURE FAIL"
		GOTO FAIL
		END

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006	IF !(FIL_FEED_TNK_CO2_OK_PTR) THEN
	IF !(FIL_FEED_TNK_CO2_OK_PTR) & (!EXPR1) THEN			;rma006
		BEGIN
		FAIL_MSG = "FEED TANK COUNTERPRESSURE FAIL"
		GOTO FAIL
		END

	;fass header recovery
	IF (SA_STATE = 2) THEN
		BEGIN
;fly002		IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_A_FASSCM) THEN
		IF (DEST_TANK_A_ALLOF4 = 2) THEN 									;fly002
;fly002			IF (COMPAR(FASSA_SEQ_STATUS_FASSCM,"FAIL",4,EQ)) THEN
			IF (COMPAR(FASSA_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN    ;fly002
				BEGIN
				FAIL_MSG = "FASS HEADER A IN FAIL"
				GOTO FAIL
				END
;fly002		IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_B_FASSCM) THEN        
		IF (DEST_TANK_B_ALLOF4 = 2) THEN	 ;fly002
;fly002			IF (COMPAR(FASSB_SEQ_STATUS_FASSCM,"FAIL",4,EQ)) THEN
			IF (COMPAR(FASSB_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN		;fly002
				BEGIN
				FAIL_MSG = "FASS HEADER B IN FAIL"
				GOTO FAIL
				END
;fly002		IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_C_FASSCM) THEN        
		IF (DEST_TANK_C_ALLOF4 = 2) THEN	 ;fly002
;fly002			IF (COMPAR(FASSC_SEQ_STATUS_FASSCM,"FAIL",4,EQ)) THEN
			IF (COMPAR(FASSC_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN		;fly002
				BEGIN
				FAIL_MSG = "FASS HEADER C IN FAIL"
				GOTO FAIL
				END
;fly002		IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_D_FASSCM) THEN        
		IF (DEST_TANK_D_ALLOF4 = 2) THEN	 ;fly002
;fly002			IF (COMPAR(FASSD_SEQ_STATUS_FASSCM,"FAIL",4,EQ)) THEN
			IF (COMPAR(FASSD_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN		;fly002
				BEGIN
				FAIL_MSG = "FASS HEADER D IN FAIL"
				GOTO FAIL
				END
		END

	;cent feed tank empty 2
	IF (SA_STATE <= 8) THEN
		BEGIN
;rma005		IF (CFG4_FG) THEN
		IF (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM	=2)) THEN  ;rma005
			IF (COMPAR(CFG1_SEQ_STATUS_CFGCM,"FAIL",4,EQ)) THEN
				BEGIN
				FAIL_MSG = "CENTRIFUGE 1 IN FAIL"
				GOTO FAIL
				END
;rma005  		IF (CFG4_FG) THEN
		IF (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM	=2)) THEN  ;rma005
			IF (COMPAR(CFG4_SEQ_STATUS_ALLOF8,"FAIL",4,EQ)) THEN
				BEGIN
				FAIL_MSG = "CENTRIFUGE 4 IN FAIL"
				GOTO FAIL
				END
;rma005			IF (CFG5_FG) THEN
;rma005				IF (COMPAR(CFG5_SEQ_STATUS_CFGCM,"FAIL",4,EQ)) THEN
;rma005					BEGIN
;rma005					FAIL_MSG = "CENTRIFUGE 5 IN FAIL"
;rma005					GOTO FAIL
;rma005					END
;rma005			IF (CFG6_FG) THEN
;rma005				IF (COMPAR(CFG6_SEQ_STATUS_CFGCM,"FAIL",4,EQ)) THEN
;rma005					BEGIN
;rma005					FAIL_MSG = "CENTRIFUGE 6 IN FAIL"
;rma005					GOTO FAIL
;rma005					END
;rma006		IF (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2)) THEN  ;VCM011
;rma006			IF (COMPAR(CFG7_SEQ_STATUS_CFGCM,"FAIL",4,EQ)) THEN
;rma006				BEGIN
;rma006				FAIL_MSG = "CENTRIFUGE 7 IN FAIL"
;rma006				GOTO FAIL
;rma006				END
;rma006		IF (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM	=2)) THEN  ;VCM011
;rma006			IF (COMPAR(CFG8_SEQ_STATUS_ALLOF8,"FAIL",4,EQ)) THEN
;rma006				BEGIN
;rma006				FAIL_MSG = "CENTRIFUGE 8 IN FAIL"
;rma006				GOTO FAIL
;rma006				END

		IF (CFG9_FG) THEN														;rma006
			IF (COMPAR(CFG9_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN ;rma006
				BEGIN                                           	;rma006
				FAIL_MSG = "CENTRIFUGE 9 IN FAIL"              		;rma006
				GOTO FAIL                                       	;rma006
				END                                             	;rma006
		IF (CFG10_FG) THEN						;fly000
			IF (COMPAR(CFG10_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN   ;fly000
				BEGIN                                           ;fly000
				FAIL_MSG = "CENTRIFUGE 10 IN FAIL"              ;fly000
				GOTO FAIL                                       ;fly000
				END                                             ;fly000
		IF (CFG11_FG) THEN						;fly000
			IF (COMPAR(CFG11_SEQ_STATUS_ALLOF4,"FAIL",4,EQ)) THEN ;rma006
				BEGIN                                           	;rma006
				FAIL_MSG = "CENTRIFUGE 11 IN FAIL"              	;rma006
				GOTO FAIL                                       	;rma006
				END                                             	;rma006

		END


;rma006	IF (COMPAR(PRI_SEQ_STATUS,"FAIL",4,EQ)) THEN

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
	IF (COMPAR(PRI_SEQ_STATUS,"FAIL",4,EQ))&(!EXPR1) THEN	;rma006 not bypassed
		BEGIN
		FAIL_MSG = "PRIMARY FILTER IN FAIL"      ;VCM007
		SA_2_MESSAGE = "CONTINUE FILTER"
		SA_3_MESSAGE = "TO CONTINUE RECOVERY"
		GOTO FAIL
		END

	;filter transfer tank empty 3
	IF (SA_STATE <= 24) THEN
;ldk050		IF (COMPAR(BTA_SEQ_STATUS,"FAIL",4,EQ)) THEN
		IF (COMPAR(BTA2_SEQ_STATUS_ALLOF8,"FAIL",4,EQ)) THEN	;ldk050
			BEGIN
			FAIL_MSG = "BEER TO AGING IN FAIL"
			GOTO FAIL
			END

	;filter transfer tank empty 1
	IF (SA_STATE <= 22) & (LHX_SEL:DEV_STAT = PRIM_LHX) THEN
		BEGIN
		IF !(LHX_TNK_CO2_OK_FG_LHX) THEN
			BEGIN
			FAIL_MSG = "LHX TANK COUNTERPRESSURE FAIL"
			GOTO FAIL
			END
		IF (COMPAR(LHX_SEQ_STATUS_LHX,"FAIL",4,EQ)) THEN
			BEGIN
			FAIL_MSG = "LHX IN FAIL"
			GOTO FAIL
			END
		END

	IF (SA_STATE = 16) | (SA_STATE = 21) | (SA_STATE = 22) | (SA_STATE = 24) | (SA_STATE = 25) THEN	;acj007
		IF (SLUICE_OUT_VLV:DEV_STAT != S_0) THEN	;CLOSED	;acj007
			BEGIN						;acj007
			FAIL_MSG = "SLUICE OUTLET VALVE NOT CLOSED"	;acj007
			GOTO FAIL					;acj007
			END						;acj007

;VCM050 BEGIN

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006   IF !AND(FIL_FEED_TNK_LVL:AI_FLG:0,(BIT_SCAN)) THEN		
   IF !AND(FIL_FEED_TNK_LVL:AI_FLG:0,(BIT_SCAN)) & (!EXPR1) THEN	;rma006		
		BEGIN
		FAIL_MSG = "FEED TANK LEVEL OFF SCAN"
		GOTO FAIL 
		END

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006   IF !AND(FIL_FEED_TNK_LVL:AI_INVS:0,BIT_RL) THEN		
   IF !AND(FIL_FEED_TNK_LVL:AI_INVS:0,BIT_RL) & (!EXPR1) THEN			;rma006		
		BEGIN
		FAIL_MSG = "FEED TANK LEVEL IN LOCAL"
		GOTO FAIL 
		END

   IF !AND(XFER_TNK_LVL:AI_FLG:0,(BIT_SCAN)) THEN		
		BEGIN
		FAIL_MSG = "XFER TANK LEVEL OFF SCAN"
		GOTO FAIL 
		END

   IF !AND(XFER_TNK_LVL:AI_INVS:0,BIT_RL) THEN		
		BEGIN
		FAIL_MSG = "XFER TANK LEVEL IN LOCAL"
		GOTO FAIL 
		END
;VCM050 END
	;Check for IBAD status on all analog values.
	IBAD_FG = 0

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006	IF AND(FIL_FEED_TNK_LVL:AI_CURAL, SB_IBAD) THEN
	IF AND(FIL_FEED_TNK_LVL:AI_CURAL, SB_IBAD) & (!EXPR1) THEN			;rma006
		BEGIN
		FAIL_MSG = "FIL FEED TANK LEVEL IBAD"
		IBAD_FG = 1
		END

	EXPR1 = INSTR(PRIM2_BYPASS_MODE_SG_ALLOF4,"BYPASS")			;rma006
;rma006	IF AND(FIL_FEED_FLOW:AI_CURAL, SB_IBAD) THEN
	IF AND(FIL_FEED_FLOW:AI_CURAL, SB_IBAD) & (!EXPR1) THEN			;rma006
		BEGIN
		FAIL_MSG = "FILTER FEED FLOW IBAD"
		IBAD_FG = 1
		END

	IF AND(XFER_TNK_LVL:AI_CURAL, SB_IBAD) THEN
		BEGIN
		FAIL_MSG = "XFER TANK LEVEL IBAD"
		IBAD_FG = 1
		END


	IF (IBAD_FG = 1) THEN
		TIMERON IBAD_TMR
	ELSE
		BEGIN
		TIMEROFF IBAD_TMR
		TIMERCLR IBAD_TMR
		END

	IF (IBAD_TMR > IBAD_SECONDS) THEN
		GOTO FAIL

	IF (XFER_TNK_LVL:AI_MEAS > 70)&('8606XV21':DEV_STAT = S_1) THEN
;JMS004            IF ('8606XV22':DEV_STAT = S_1)|('8606XV362':DEV_STAT = S_1) THEN
            IF ('8606XV22':DEV_STAT = S_1)|('8606XV362':DEV_STAT = S_1) THEN    ;JMS004
		BEGIN
		GOSUB C06XV31          ;VCM007
		GOSUB C06XV32          ;VCM007
      GOSUB C06XV362         ;JMS004
		PRINT LOG_ADI,"CLOSING DILUENT XFER HI LVL"
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.36		RUN COMMAND DEVICES (RUNCMDDEV)
;==============================================================================

RUNCMDDEV:
	;start the command device program and wait until it signals that it
	;has completed and has stopped running

	;if all devices commanded properly cmd_sa_status = 1
	;if a device failed cmd_sa_status is 2
	;if we exceed the timeout for completion (150) then goto fail

	;make sure the program isn't already running
	WAITUNTIL (PGMSTAT("PRIRECDEV") = NOT_RUNNING) COUNT 150, M1FAIL

	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
		SA_MESSAGE = "ALIGNING DEVICES"
	CMD_SA_STATUS_INT = 0
	RUN "PRIRECDEV"

	;make sure the program starts
	WAITUNTIL (PGMSTAT("PRIRECDEV") != NOT_RUNNING) COUNT 150, M2FAIL

	WAITUNTIL ((CMD_SA_STATUS_INT > 0) & PGMSTAT("PRIRECDEV") = NOT_RUNNING) COUNT 150, M3FAIL

	IF (CMD_SA_STATUS_INT = 2) THEN
		GOTO FAIL
	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
		SA_MESSAGE = ""
	RETURN

M1FAIL:
	FAIL_MSG = "PRIRECDEV ALREADY RUNNING"
	GOTO FAIL
M2FAIL:
	FAIL_MSG = "PRIRECDEV NOT FOUND!"
	GOTO FAIL
M3FAIL:
	FAIL_MSG = "PRIRECDEV PROGRAM TIMEOUT"
	GOTO FAIL

;==============================================================================
;TB.2.1.5.2.37		SA INITIALIZE
;==============================================================================

SAINIT:
	GOSUB CLRCMD		;TB.2.1.5.2.38 CLEAR COMMANDS
	ASSIGN SEQ_STATUS_PTR = PRI_SEQ_STATUS	;JAC054

	SA_MESSAGE = ""
	TIMERON STEP_TMR
	TIMERCLR STEP_TMR
	DEV_FAILED_FG = 0

	RETURN

;==============================================================================
;TB.2.1.5.2.38		CLEAR COMMANDS
;==============================================================================

CLRCMD:
	SC_SA_STOP_CMD = 0
	SC_SA_CONT_CMD = 0

	RETURN

;==============================================================================
;TB.2.1.5.2.39		SEQUENCE REQUEST
;==============================================================================

SEQUENCEREQ:
	SEQ_RESP_PTR = 0

	SEQ_REQ_PTR = 1
	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
		BEGIN
		WAITUNTIL (SEQ_RESP_PTR != 0) COUNT 40,SEQFAIL
		IF (SEQ_RESP_PTR =2) THEN
			BEGIN
SEQFAIL:
			SEQ_RESP_PTR = 0
			GOTO FAIL
			END
		SEQ_RESP_PTR = 0
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.40		CYCLE BLOWBACK VALVE
;==============================================================================

CYCLEBLOWBACKVLV:
	IF (TIMER1_TMR > 60) THEN
		BEGIN
		FAIL_MSG = "BLOWBACK VALVE FAIL OPN"
		ASSIGN DEV_PTR = BLOWBACK_VLV		;OPEN BLOWBACK_VLV
		GOSUB OPENDEV
		WAIT 15
		FAIL_MSG = "BLOWBACK VALVE FAIL CLS"
		ASSIGN DEV_PTR = BLOWBACK_VLV		;CLOSE BLOWBACK_VLV
		GOSUB CLOSDEV
		TIMERCLR TIMER1_TMR
		END
	RETURN

;==============================================================================
;TB.2.1.5.2.41		CLOSE BATCH
;==============================================================================

CLOSEBATCH:
	SA_MESSAGE = "CLOSING BATCH"

;Get batch id (if batch id from blending is blank)
		BAT_ERR = -9999
		GETBATINFO "BID","UNIT",UNIT_SG,BAT_ERR,BID_NAME,""
		WAITUNTIL (BAT_ERR != -9999) COUNT 60, BATINFOERR
		IF (BAT_ERR != 0) THEN
			BEGIN
BATINFOERR:
			FAIL_MSG = "GET BATCH INFO FAILURE"
			GOTO FAIL
			END

;Close batch id
	BAT_ERR = -9999
	CLOSEBAT BID_NAME,BAT_ERR
	WAITUNTIL (BAT_ERR != -9999) COUNT 60, CLSBATERR
	IF (BAT_ERR != 0) & (BAT_ERR != -612) THEN
		BEGIN
CLSBATERR:
		FAIL_MSG = "CLOSE BATCH FAILURE"
		GOTO FAIL
		END

	IF (BAT_ERR = 0) THEN
		PRINT LOG_ADI, "BATCH ID # %p CLOSED",BID_NAME
	ELSE
		PRINT LOG_ADI, "NO BATCH ACTIVE TO CLOSE - CONTINUING"

	BID_NAME = " "
	SA_MESSAGE = " "
	RETURN

;==============================================================================
;TB.2.1.5.2.42		CENTRIFUGE RUN PROCESS SEQUENCE REQUEST
;==============================================================================

CFGRUNREQ:
;fly000	IF !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2))) THEN  ;VCM011
;rma005	TEMP_FG =  !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2))) ;fly000
	TEMP_FG = (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2))					;rma005
	TEMP_FG = TEMP_FG | (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM = 2))	;rma005
	TEMP_FG = TEMP_FG | CFG10_FG			;fly000
	TEMP_FG = TEMP_FG | CFG9_FG         ;rma006
	TEMP_FG = TEMP_FG | CFG11_FG			;rma006
	IF (TEMP_FG = 0) THEN			;fly000
		BEGIN
		FAIL_MSG = "NO CENTRIFUGE SELECTED"
		GOTO FAIL
		END

	IF (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2)) THEN				;rma005
		BEGIN																		;rma005
		ASSIGN SEQ_REQ_PTR = CFG1_RUN_REQ_CFGCM						;rma005
		ASSIGN SEQ_RESP_PTR = CFG1_RESP_CFGCM 							;rma005
		FAIL_MSG = "CENTRIFUGE 1 REQUEST FAILURE"						;rma005
		GOSUB SEQUENCEREQ														;rma005
		END

;rma005	IF (CFG4_FG) THEN
	IF (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2)) THEN				;rma005
		BEGIN
		ASSIGN SEQ_REQ_PTR = CFG4_RUN_REQ_CFGCM
		ASSIGN SEQ_RESP_PTR = CFG4_RESP_CFGCM
		FAIL_MSG = "CENTRIFUGE 4 REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;rma005  IF (CFG5_FG) THEN
;rma005		BEGIN
;rma005			ASSIGN SEQ_REQ_PTR = CFG5_RUN_REQ_CFGCM
;rma005			ASSIGN SEQ_RESP_PTR = CFG5_RESP_CFGCM
;rma005			FAIL_MSG = "CENTRIFUGE 5 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma005	IF (CFG6_FG) THEN
;rma005		BEGIN
;rma005		ASSIGN SEQ_REQ_PTR = CFG6_RUN_REQ_CFGCM
;rma005		ASSIGN SEQ_RESP_PTR = CFG6_RESP_CFGCM
;rma005		FAIL_MSG = "CENTRIFUGE 6 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma006	IF (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2)) THEN     ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG7_RUN_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG7_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 7 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END
;rma006
;rma006	IF (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM	=2)) THEN     ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG8_RUN_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG8_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 8 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END

	IF (CFG10_FG) THEN							    				;fly000    	
		BEGIN								    							;fly000
		ASSIGN SEQ_REQ_PTR = CFG10_RUN_REQ_ALLOF4		    	;fly000
		ASSIGN SEQ_RESP_PTR = CFG10_RESP_ALLOF4			   ;fly000
		FAIL_MSG = "CENTRIFUGE 10 REQUEST FAILURE"		   ;fly000
		GOSUB SEQUENCEREQ			    								;fly000
		END								    							;fly000

	IF (CFG9_FG) THEN							    					;rma006    	
		BEGIN								    							;rma006
		ASSIGN SEQ_REQ_PTR = CFG9_RUN_REQ_ALLOF4		    	;rma006
		ASSIGN SEQ_RESP_PTR = CFG9_RESP_ALLOF4			   	;rma006
		FAIL_MSG = "CENTRIFUGE 9 REQUEST FAILURE"		   	;rma006
		GOSUB SEQUENCEREQ			    								;rma006
		END								    							;rma006

	IF (CFG11_FG) THEN							    				;rma006    	
		BEGIN								    							;rma006
		ASSIGN SEQ_REQ_PTR = CFG11_RUN_REQ_ALLOF4		    	;rma006
		ASSIGN SEQ_RESP_PTR = CFG11_RESP_ALLOF4			   ;rma006
		FAIL_MSG = "CENTRIFUGE 11 REQUEST FAILURE"		   ;rma006
		GOSUB SEQUENCEREQ			    								;rma006
		END								    							;rma006

	RETURN

;==============================================================================
;TB.2.1.5.2.43		CENTRIFUGE RUN NOT PROCESS SEQUENCE REQUEST
;==============================================================================

CFGRNPREQ:
;	IF !(CFG4_FG | CFG5_FQ | CFG6_FG | (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2))) THEN   ;VCM011
;fly000	IF !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2))) THEN   ;VCM011
;rma005	TEMP_FG = !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2))) ;fly000
	TEMP_FG = (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2))					;rma005
	TEMP_FG = TEMP_FG | (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM = 2))	;rma005
	TEMP_FG = TEMP_FG | CFG9_FG  								   ;JMS001                                                 
	TEMP_FG = TEMP_FG | CFG10_FG  								;fly000                                                 ;LDKPHASEIV
	TEMP_FG = TEMP_FG | CFG11_FG  								;rma006                                                 ;LDKPHASEIV
;VCM017	IF (TEMP_FG = 0) THEN	       										;fly000
	IF (TEMP_FG = 0) & (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN			;fly000
		BEGIN            ;VCM017
		FAIL_MSG = "NO CENTRIFUGE SELECTED"
		GOTO FAIL
		END

	IF (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2)) THEN						;rma005
		BEGIN																				;rma005
		ASSIGN SEQ_REQ_PTR = CFG1_RNP_REQ_CFGCM								;rma005
		ASSIGN SEQ_RESP_PTR = CFG1_RESP_CFGCM									;rma005
		FAIL_MSG = "CENTRIFUGE 1 REQUEST FAILURE"								;rma005
		GOSUB SEQUENCEREQ																;rma005
		END

;rma005	IF (CFG4_FG) THEN
	IF (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2)) THEN						;rma005
		BEGIN
		ASSIGN SEQ_REQ_PTR = CFG4_RNP_REQ_CFGCM
		ASSIGN SEQ_RESP_PTR = CFG4_RESP_CFGCM
		FAIL_MSG = "CENTRIFUGE 4 REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;rma005	IF (CFG5_FG) THEN
;rma005		BEGIN
;rma005		ASSIGN SEQ_REQ_PTR = CFG5_RNP_REQ_CFGCM
;rma005		ASSIGN SEQ_RESP_PTR = CFG5_RESP_CFGCM
;rma005		FAIL_MSG = "CENTRIFUGE 5 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma005	IF (CFG6_FG) THEN
;rma005		BEGIN
;rma005		ASSIGN SEQ_REQ_PTR = CFG6_RNP_REQ_CFGCM
;rma005		ASSIGN SEQ_RESP_PTR = CFG6_RESP_CFGCM
;rma005		FAIL_MSG = "CENTRIFUGE 6 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma006	IF (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2)) THEN   ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG7_RNP_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG7_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 7 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END
;rma006
;rma006	IF (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM	=2)) THEN   ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG8_RNP_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG8_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 8 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END

	IF (CFG10_FG) THEN							  							;fly000
		BEGIN                                                    ;fly000
		ASSIGN SEQ_REQ_PTR = CFG10_RNP_REQ_ALLOF4                ;fly000
		ASSIGN SEQ_RESP_PTR = CFG10_RESP_ALLOF4                  ;fly000
		FAIL_MSG = "CENTRIFUGE 10 REQUEST FAILURE"               ;fly000
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST   	;fly000
		END                                                      ;fly000

	IF (CFG9_FG) THEN							  								;rma006
		BEGIN                                                    ;rma006
		ASSIGN SEQ_REQ_PTR = CFG9_RNP_REQ_ALLOF4                	;rma006
		ASSIGN SEQ_RESP_PTR = CFG9_RESP_ALLOF4                  	;rma006
		FAIL_MSG = "CENTRIFUGE 9 REQUEST FAILURE"						;rma006
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST   	;rma006
		END                                                      ;rma006

	IF (CFG11_FG) THEN							  							;rma006
		BEGIN                                                    ;rma006
		ASSIGN SEQ_REQ_PTR = CFG11_RNP_REQ_ALLOF4                ;rma006
		ASSIGN SEQ_RESP_PTR = CFG11_RESP_ALLOF4                  ;rma006
		FAIL_MSG = "CENTRIFUGE 11 REQUEST FAILURE"               ;rma006
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST   	;rma006
		END                                                      ;rma006

	RETURN

;==============================================================================
;TB.2.1.5.2.44		CENTRIFUGE RELEASE SEQUENCE REQUEST
;==============================================================================
CFGRELREQ:
;fly000	IF !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2))) THEN ;VCM011
;rma005	TEMP_FG = !(CFG4_FG|CFG5_FG|CFG6_FG|(CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM=2))|(CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM=2)));fly000
	TEMP_FG = (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2))					;rma005
	TEMP_FG = TEMP_FG | (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM = 2))	;rma005
;rma006	TEMP_FG = TEMP_FG | (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM = 2))	;rma005
	TEMP_FG = TEMP_FG | CFG9_FG                   ;JMS001
	TEMP_FG = TEMP_FG | CFG10_FG                  ;fly000
	TEMP_FG = TEMP_FG | CFG11_FG                  ;rma006
	IF (TEMP_FG =0) THEN				;fly000
		BEGIN
		FAIL_MSG = "NO CENTRIFUGE SELECTED"
		GOTO FAIL
		END

	IF (CFG1_FG & (CFG1_RUN_GROUP_SEL_CFGCM = 2)) THEN						;rma005
		BEGIN																				;rma005
		ASSIGN SEQ_REQ_PTR = CFG1_REL_REQ_CFGCM								;rma005
		ASSIGN SEQ_RESP_PTR = CFG1_RESP_CFGCM 									;rma005
		FAIL_MSG = "CENTRIFUGE 1 REQUEST FAILURE"								;rma005
		GOSUB SEQUENCEREQ																;rma005
		END

;rma005	IF (CFG4_FG) THEN
	IF (CFG4_FG & (CFG4_RUN_GROUP_SEL_CFGCM = 2)) THEN						;rma005
		BEGIN
		ASSIGN SEQ_REQ_PTR = CFG4_REL_REQ_CFGCM
		ASSIGN SEQ_RESP_PTR = CFG4_RESP_CFGCM
		FAIL_MSG = "CENTRIFUGE 4 REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;rma005	IF (CFG5_FG) THEN
;rma005		BEGIN
;rma005		ASSIGN SEQ_REQ_PTR = CFG5_REL_REQ_CFGCM
;rma005		ASSIGN SEQ_RESP_PTR = CFG5_RESP_CFGCM
;rma005		FAIL_MSG = "CENTRIFUGE 5 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma005	IF (CFG6_FG) THEN
;rma005		BEGIN
;rma005		ASSIGN SEQ_REQ_PTR = CFG6_REL_REQ_CFGCM
;rma005		ASSIGN SEQ_RESP_PTR = CFG6_RESP_CFGCM
;rma005		FAIL_MSG = "CENTRIFUGE 6 REQUEST FAILURE"
;rma005		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma005		END

;rma006	IF (CFG7_FG & (CFG7_RUN_GROUP_SEL_CFGCM	=2)) THEN      ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG7_REL_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG7_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 7 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END
;rma006
;rma006	IF (CFG8_FG & (CFG8_RUN_GROUP_SEL_CFGCM	=2)) THEN      ;VCM011
;rma006		BEGIN
;rma006		ASSIGN SEQ_REQ_PTR = CFG8_REL_REQ_CFGCM
;rma006		ASSIGN SEQ_RESP_PTR = CFG8_RESP_CFGCM
;rma006		FAIL_MSG = "CENTRIFUGE 8 REQUEST FAILURE"
;rma006		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
;rma006		END

	IF (CFG10_FG) THEN							  										;fly000
		BEGIN                                                             ;fly000
		ASSIGN SEQ_REQ_PTR = CFG10_RELEASE_REQ_ALLOF4                         ;fly000
		ASSIGN SEQ_RESP_PTR = CFG10_RESP_ALLOF4                           ;fly000
		FAIL_MSG = "CENTRIFUGE 10 REQUEST FAILURE"                        ;fly000
		GOSUB SEQUENCEREQ		   														;fly000
		END                                                               ;fly000

	IF (CFG9_FG) THEN							  											;rma006
		BEGIN                                                             ;rma006
		ASSIGN SEQ_REQ_PTR = CFG9_RELEASE_REQ_ALLOF4                         	;rma006
		ASSIGN SEQ_RESP_PTR = CFG9_RESP_ALLOF4                           	;rma006
		FAIL_MSG = "CENTRIFUGE 9 REQUEST FAILURE"                        	;rma006
		GOSUB SEQUENCEREQ		   														;rma006
		END                                                               ;rma006

	IF (CFG11_FG) THEN							  										;rma006
		BEGIN                                                             ;rma006
		ASSIGN SEQ_REQ_PTR = CFG11_RELEASE_REQ_ALLOF4                         ;rma006
		ASSIGN SEQ_RESP_PTR = CFG11_RESP_ALLOF4                           ;rma006
		FAIL_MSG = "CENTRIFUGE 11 REQUEST FAILURE"                        ;rma006
		GOSUB SEQUENCEREQ		   														;rma006
		END                                                               ;rma006

	RETURN

;==============================================================================
;TB.2.1.5.2.45		FASSING RECOVER SEQUENCE REQUEST
;==============================================================================

FASSRECREQ:
	SKIP_FASSHDR_REC_FG = 0	;acj000			 

;fly002	IF (CENT_FEED_TNK_SEL_PTR != DEST_TANK_A_FASSCM) THEN
	IF (DEST_TANK_A_ALLOF4 != 2) THEN      ;fly002
;fly002	IF (CENT_FEED_TNK_SEL_PTR != DEST_TANK_B_FASSCM) THEN
		IF (DEST_TANK_B_ALLOF4 != 2) THEN	;fly002
;fly002			IF (CENT_FEED_TNK_SEL_PTR != DEST_TANK_C_FASSCM) THEN
			IF (DEST_TANK_C_ALLOF4 != 2) THEN	;fly002
;fly002				IF (CENT_FEED_TNK_SEL_PTR != DEST_TANK_D_FASSCM) THEN
				IF (DEST_TANK_D_ALLOF4 != 2) THEN	;fly002
					BEGIN
					SKIP_FASSHDR_REC_FG = 1	;acj000
					RETURN			;acj000
					END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_A_FASSCM) THEN
	IF (DEST_TANK_A_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSA_REC_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSA_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSA_RECOVER_REQ_FG_ALLOF4   ;fly002
		ASSIGN SEQ_RESP_PTR = FASSA_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER A REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_B_FASSCM) THEN
	IF (DEST_TANK_B_ALLOF4 = 2) THEN			;fly002
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSB_REC_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSB_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSB_RECOVER_REQ_FG_ALLOF4   ;fly002
		ASSIGN SEQ_RESP_PTR = FASSB_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER B REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_C_FASSCM) THEN
	IF (DEST_TANK_C_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSC_REC_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSC_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSC_RECOVER_REQ_FG_ALLOF4   ;fly002
		ASSIGN SEQ_RESP_PTR = FASSC_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER C REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_D_FASSCM) THEN
	IF (DEST_TANK_D_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSD_REC_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSD_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSD_RECOVER_REQ_FG_ALLOF4   ;fly002
		ASSIGN SEQ_RESP_PTR = FASSD_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER D REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.46		FASSING HOLD SEQUENCE REQUEST
;==============================================================================
FASSHLDREQ:

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_A_FASSCM) THEN
	IF (DEST_TANK_A_ALLOF4 = 2) THEN 		;fly002
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSA_HOLD_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSA_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSA_HOLD_REQ_FG_ALLOF4  ;fly002
		ASSIGN SEQ_RESP_PTR = FASSA_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER A REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_B_FASSCM) THEN
	IF (DEST_TANK_B_ALLOF4 = 2) THEN		;fly001
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSB_HOLD_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSB_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSB_HOLD_REQ_FG_ALLOF4  ;fly002
		ASSIGN SEQ_RESP_PTR = FASSB_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER B REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_C_FASSCM) THEN
	IF (DEST_TANK_C_ALLOF4 = 2) THEN		;fly001
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSC_HOLD_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSC_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSC_HOLD_REQ_FG_ALLOF4  ;fly002
		ASSIGN SEQ_RESP_PTR = FASSC_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER C REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

;fly002	IF (CENT_FEED_TNK_SEL_PTR = DEST_TANK_D_FASSCM) THEN
	IF (DEST_TANK_D_ALLOF4 = 2) THEN		;fly001
		BEGIN
;fly002		ASSIGN SEQ_REQ_PTR = FASSD_HOLD_REQ_FASSCM
;fly002		ASSIGN SEQ_RESP_PTR = FASSD_RESP_FASSCM
		ASSIGN SEQ_REQ_PTR = FASSD_HOLD_REQ_FG_ALLOF4  ;fly002
		ASSIGN SEQ_RESP_PTR = FASSD_REQ_RESP_INT_ALLOF4     ;fly002
		FAIL_MSG = "FASS HEADER D REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.47		ALIGN DEVICES FILTER TRANSFR EMPTY FINAL
;==============================================================================

ADFTEF:
	GOSUB SLUICERES			;Reserve sluice		;acj007

;		IF (FIL_FEED_TNK_LVL:AI_MEAS < 20) THEN		      ;JMS003
;			BEGIN                                           ;JMS003
;			FAIL_MSG = "FEED TNK TO LOW TO START PMP"       ;JMS003
;			GOTO FAIL                                       ;JMS003
;			END                                             ;JMS003

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

	PUTAUTO XFER_TNK_LVL_MODE
	OPEN XFER_TNK_LVL_MODE				;Drain

	RETURN

;==============================================================================
;TB.2.1.5.2.48		ALIGN DEVICES FILTER FEED EMPTY FINAL
;==============================================================================

ADFFEF:
	GOSUB SLUICERES			;Reserve sluice		;acj007

	PUTAUTO FIL_FEED_TNK_LVL_MODE
	OPEN FIL_FEED_TNK_LVL_MODE				;Drain

;		IF (FIL_FEED_TNK_LVL:AI_MEAS < 20) THEN		      ;JMS003
;			BEGIN                                           ;JMS003
;			FAIL_MSG = "FEED TNK TO LOW TO START PMP"       ;JMS003
;			GOTO FAIL                                       ;JMS003
;			END                                             ;JMS003

	GOSUB RUNCMDDEV			;TB.2.1.5.2.36 RUN COMMAND DEVICES

;ldk050	IF (COMPAR(BTA_SEQ_STATUS,"FAIL",4,EQ)) | (COMPAR(BTA_SEQ_STATUS,"HOLD",4,EQ)) THEN
	IF (COMPAR(BTA2_SEQ_STATUS_ALLOF8,"FAIL",4,EQ)) | (COMPAR(BTA2_SEQ_STATUS_ALLOF8,"HOLD",4,EQ)) THEN	;ldk050
		BEGIN
;mw049		ASSIGN SEQ_REQ_PTR = BTA_CONT_REQ	;RDK001		;acj005
		ASSIGN SEQ_REQ_PTR = BTA2_CONT_REQ_FG_ALLOF8	;mw049
;jaz048		ASSIGN SEQ_RESP_PTR = BTA_RESP		;RDK001		;acj005
		ASSIGN SEQ_RESP_PTR = BTA2_PRIM2_RESP_ALLOF8		;jaz048
		FAIL_MSG = "BEER TO AGING REQUEST FAILURE"	;RDK001	;acj005
		GOSUB SEQUENCEREQ	;RDK001	;SEQUENCE REQUEST	;acj005
		END

	RETURN

;==============================================================================
;TB.2.1.5.2.49		ALIGN DEVICES RINSE 2
;==============================================================================

ADR2:
	FIL_FEED_PMP_ENABLE_FG = 0

	IF (REC_DEV_CNTL) THEN					;acj007
		IF (SLUICE_INUSE_POLCOM = SLUICE_BIT) THEN	;acj007
			SLUICE_INUSE_POLCOM = 0			;acj007

	ASSIGN SEQ_REQ_PTR = PRI_CONT_REQ
	ASSIGN SEQ_RESP_PTR = PRI_RESP
	FAIL_MSG = "PRIMARY FILTER REQUEST FAILURE"
	GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST

	REC_DEV_CNTL = 0

	RETURN

;==============================================================================
;		FASSING FILL SEQUENCE REQUEST	  	;fly002
;==============================================================================
FASSFILLREQ:

	IF (DEST_TANK_A_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSA_FILL_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSA_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER A REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_B_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSB_FILL_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSB_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER B REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_C_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSC_FILL_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSC_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER C REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_D_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSD_FILL_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSD_REQ_RESP_INT_ALLOF4 
		FAIL_MSG = "FASS HEADER D REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

   IF (DEST_TANK_A_ALLOF4 != 2) & (DEST_TANK_B_ALLOF4 != 2) & (DEST_TANK_C_ALLOF4 != 2) & (DEST_TANK_D_ALLOF4 != 2) THEN
		BEGIN
		FAIL_MSG = "NO FASS HDR SELECTED TO CFT2"
		GOTO FAIL
		END

	RETURN

;==============================================================================
;		FASSING FILL SEQUENCE RELEASE				 ;fly002
;==============================================================================
FASSFILLREL:

	IF (DEST_TANK_A_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSA_RELEASE_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSA_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER A REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_B_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSB_RELEASE_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSB_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER B REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_C_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSC_RELEASE_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSC_REQ_RESP_INT_ALLOF4     
		FAIL_MSG = "FASS HEADER C REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	IF (DEST_TANK_D_ALLOF4 = 2) THEN 
		BEGIN
		ASSIGN SEQ_REQ_PTR = FASSD_RELEASE_REQ_FG_ALLOF4  
		ASSIGN SEQ_RESP_PTR = FASSD_REQ_RESP_INT_ALLOF4 
		FAIL_MSG = "FASS HEADER D REQUEST FAILURE"
		GOSUB SEQUENCEREQ		;TB.2.1.5.2.39 SEQUENCE REQUEST
		END

	RETURN

;==============================================================================
;			SUSTAINED CONDITION CHECK
;==============================================================================

SUSCOND:
	IF (SUS_COND) THEN
		TIMERON TEMP_PTR
	ELSE
		BEGIN
		TIMEROFF TEMP_PTR
		TIMERCLR TEMP_PTR
		END
	IF (TEMP_PTR > SUS_TIME) THEN
		TEMP_FG = 1
	ELSE
		TEMP_FG = 0

	RETURN

;==============================================================================
;		FILTER FEED TANK LEVEL EMPTY SUSTAINED CONDITION CHECK
;==============================================================================

FEEDTNKMT:

;((FIL_FEED_TNK_LVL < FIL_FEED_TNK_DRAIN_LVL FOR FIL_FEED_MIN_LVL_TIME)
	SUS_COND = (FIL_FEED_TNK_LVL:AI_INVL <= FIL_FEED_TNK_DRAIN_LVL)
	SUS_TIME = FIL_FEED_MIN_LVL_TIME
	ASSIGN TEMP_PTR = SUS_1_TMR
	GOSUB SUSCOND

	RETURN

;==============================================================================
;		FILTER XFER TANK LEVEL EMPTY SUSTAINED CONDITION CHECK
;==============================================================================

XFERTNKMT:

;((XFER_TNK_LVL < XFER_TNK_DRAIN_LVL FOR XFER_TNK_MIN_TIME)
;mw049	SUS_COND = (XFER_TNK_LVL:AI_INVL <= XFER_TNK_DRAIN_LVL)
;mw049	SUS_TIME = XFER_TNK_MIN_TIME
	SUS_COND = (XFER_TNK_LVL:AI_INVL <= PRIM2_XFER_TNK_DRAIN_LVL_ALLOF8)	;mw049
	SUS_TIME = PRIM2_XFER_TNK_MIN_TIME_ALLOF8	;mw049
	ASSIGN TEMP_PTR = SUS_1_TMR
	GOSUB SUSCOND

	RETURN

;==============================================================================
;		CENTRIFUGE FEED TANK LEVEL EMPTY SUSTAINED CONDITION CHECK
;==============================================================================

CENTTNKMT:

;(CENT_FEED_TNK_LVL_PTR:AI_INVL < CENT_FEED_TNK_DRAIN_LVL FOR CENT_FEED_MIN_LVL_TIME)
;fly001	SUS_COND = (CENT_FEED_TNK_LVL_PTR:AI_INVL <= CENT_FEED_TNK_DRAIN_LVL)
	SUS_COND = (CENT_FEED_TNK_LVL_PTR:AI_MEAS <= CENT_FEED_TNK_DRAIN_LVL)	;fly001
	SUS_TIME = CENT_FEED_MIN_LVL_TIME
	ASSIGN TEMP_PTR = SUS_1_TMR
	GOSUB SUSCOND

	RETURN

;==============================================================================
;		LHX TANK LEVEL EMPTY SUSTAINED CONDITION CHECK
;==============================================================================

LHXTNKMT:

;(LHX_TNK_LVL:AI_INVL < LHX_TNK_DRAIN_LVL FOR LHX_MIN_LVL_TIME)
	SUS_COND = (LHX_TNK_LVL:AI_INVL <= LHX_TNK_DRAIN_LVL)
	SUS_TIME = LHX_MIN_LVL_TIME
	ASSIGN TEMP_PTR = SUS_1_TMR
	GOSUB SUSCOND

	RETURN

;==============================================================================	;acj006
;		LHX DILUENT RINSE CONTROL				;acj006
;==============================================================================	;acj006

LHXDILCNTL:								;acj006

	IF ((!TD_INTO1_FG) & (LHX_TNK_LVL:AI_INVL <= 10.0)) THEN	;acj006
		BEGIN							;acj006
;VCM049		GOSUB O6XV319						;acj006
;VCM049		GOSUB O6XV320						;acj006
		GOSUB O6XV318						;acj006
		GOSUB O6XV324						;acj006
		GOSUB O06XV31						;acj006
      GOSUB O06XV362        ;JMS004
		TIMERON TIMER1_TMR					;acj006
		END							;acj006

	IF (TIMER1_TMR > 120) THEN					;acj006
		BEGIN							;acj006
		GOSUB C06XV31						;acj006
      GOSUB C06XV362        ;JMS004
;pbh003		GOSUB C6XV319						;acj006
;pbh001		GOSUB C6XV320						;acj006
		GOSUB C6XV318						;acj006
		GOSUB C6XV324						;acj006
		TIMEROFF TIMER1_TMR					;acj006
		TD_INTO1_FG = 1						;acj006
		END							;acj006

	RETURN								;acj006

;==============================================================================	;acj007
;		SLUICE RESERVATION						;acj007
;==============================================================================	;acj007
;VCM010 only concerned about primary 1
SLUICERES:							;acj007
	IF (SLUICE_INUSE_POLCOM != 0) THEN			;acj007
;VCM010		IF (SLUICE_INUSE_POLCOM != SLUICE_BIT) THEN	;acj007
		IF (SLUICE_INUSE_POLCOM = 1) THEN	;acj007
			BEGIN					;acj007
			LAMP LAMP_ADI, LAMP_NUMBER, YELLOW	;SKID = YELLOW	;acj007
			SA_MESSAGE = "SLUICE VALVE INUSE PRIM1"			;acj007
                        GOSUB C6XV201                           ;VCM005
;VCM010			WAITUNTIL (SLUICE_INUSE_POLCOM = 0)			;acj007
;MGG000			WAITUNTIL (SLUICE_INUSE_POLCOM != 1)			;acj007
			GOTO SLUICERES
			END
	IF (SLUICE_INUSE_POLCOM != 1) THEN			;MGG000
			BEGIN
			LAMP LAMP_ADI, LAMP_NUMBER, GREEN	;SKID = GREEN	;acj007
			END							;acj007
	SLUICE_INUSE_POLCOM = SLUICE_BIT	;acj007
	SA_MESSAGE = " "					;acj007
	RETURN							;acj007

;===============================================================================
;
; SPECIFIC DEVICE CLOSE AND OPEN SUBROUTINES
;
;===============================================================================
;START RDK003
C8608P1:    ;RDK003	; STOP XFER FEED PUMP		
	ASSIGN DEV_PTR = '8608P2'	;RDK003		
	FAIL_MSG = "BTA PUMP FAIL STOP"	    			;RDK003
	GOSUB CLOSDEV						;RDK003
;	P8608P2 = 0		; Clear cont. check flag	;RDK003
	RETURN							;RDK003

O8608P1:					; START XFER FEED PUM	RDK003
	ASSIGN DEV_PTR = '8608P2'				;RDK003
	FAIL_MSG = "BTA PUMP FAIL START"			;RDK003
	GOSUB OPENDEV						;RDK003
;	P8608P2 = 1		; Set cont. check flag		;RDK003
	RETURN							;RDK003
;JMS10/16/20C0XV204:				;CLOSE HDR DRAIN VALVE	;VCM001RDK003
;JMS10/16/20        ASSIGN DEV_PTR = '8500XV204'				;VCM001RDK003
;JMS10/16/20        FAIL_MSG = "BTA F HDR DRAIN VLV FAIL CLS"			;VCM001RDK003
;JMS10/16/20        GOSUB CLOSDEV						;VCM001RDK003
;JMS10/16/20        RETURN							;VCM001RDK003
;JMS10/16/20O0XV204:				;OPEN HDR DRAIN VALVE	;VCM001RDK003
;JMS10/16/20        ASSIGN DEV_PTR = '8500XV204'				;VCM001RDK003
;JMS10/16/20        FAIL_MSG = "BTA F HDR DRAIN VLV FAIL OPN"		;VCM001RDK003
;JMS10/16/20        GOSUB OPENDEV						;VCM001RDK003
;JMS10/16/20        RETURN							;VCM001RDK003
;JMS10/16/20C0XV205:				;CLOSE HDR DRAIN VALVE	;VCM001RDK003
;JMS10/16/20        ASSIGN DEV_PTR = '8500XV205'				;VCM001RDK003
;JMS10/16/20        FAIL_MSG = "BTA E HDR DRAIN VLV FAIL CLS"		;VCM001RDK003
;JMS10/16/20        GOSUB CLOSDEV						;VCM001RDK003
;JMS10/16/20        RETURN							;VCM001RDK003
;JMS10/16/20O0XV205:				;OPEN HDR DRAIN VALVE	;VCM001RDK003
;JMS10/16/20        ASSIGN DEV_PTR = '8500XV205'				;VCM001RDK003
;JMS10/16/20        FAIL_MSG = "BTA E HDR DRAIN VLV FAIL OPN"		;VCM001RDK003
;JMS10/16/20        GOSUB OPENDEV						;VCM001RDK003
;JMS10/16/20        RETURN							;VCM001RDK003

;MRP002 START
C0XV913:				;CLOSE HDR DRAIN VALVE	;VCM001RDK003
        ASSIGN DEV_PTR = '8500XV913'				;VCM001RDK003
        FAIL_MSG = "BTA F HDR DRAIN VLV FAIL CLS"		;VCM001RDK003
;jac054        GOSUB CLOSDEV						;VCM001RDK003
	GOSUB CLOSREMDEV					;jac054
        RETURN							;VCM001RDK003
O0XV913:				;OPEN HDR DRAIN VALVE	;VCM001RDK003
        ASSIGN DEV_PTR = '8500XV913'				;VCM001RDK003
        FAIL_MSG = "BTA F HDR DRAIN VLV FAIL OPN"		;VCM001RDK003
	GOSUB OPENREMDEV					;jac054
;jac054        GOSUB OPENDEV						;VCM001RDK003
        RETURN							;VCM001RDK003
C0XV903:				;CLOSE HDR DRAIN VALVE	;VCM001RDK003
        ASSIGN DEV_PTR = '8500XV903'				;VCM001RDK003
        FAIL_MSG = "BTA E HDR DRAIN VLV FAIL CLS"		;VCM001RDK003
;jac054        GOSUB CLOSDEV						;VCM001RDK003
	GOSUB CLOSREMDEV					;jac054
        RETURN							;VCM001RDK003
O0XV903:				;OPEN HDR DRAIN VALVE	;VCM001RDK003
        ASSIGN DEV_PTR = '8500XV903'				;VCM001RDK003
        FAIL_MSG = "BTA E HDR DRAIN VLV FAIL OPN"		;VCM001RDK003
;jac054        GOSUB OPENDEV						;VCM001RDK003
	GOSUB OPENREMDEV					;jac054
        RETURN							;VCM001RDK003;jac054
;MRP002 END
C08XV11:					; CLOSE TRIMCOOL IN VALVE	;acj003
	ASSIGN DEV_PTR = '8608XV21'		;RDK001 START ADD BTA PUMP,VLV	;acj003
	FAIL_MSG = "TRIMCOOL INLET VLV FAIL CLS"				;acj003
	GOSUB CLOSDEV								;acj003
;	P8608XV21 = 0		; Clear cont. check flag			;acj003
	RETURN									;acj003

O08XV11:					; OPEN TRIMCOOL IN VALVE	;acj003
	ASSIGN DEV_PTR = '8608XV21'						;acj003
	FAIL_MSG = "TRIMCOOL INLET VLV FAIL OPN"				;acj003
	GOSUB OPENDEV								;acj003
;	P8608XV21 = 1		; Set cont. check flag				;acj003
	RETURN									;acj003

C2XV103:
	ASSIGN DEV_PTR = CFT_IN_VLV_PTR
	FAIL_MSG = "CFT INLET VLV FAIL CLS"
	GOSUB CLOSDEV
;aj	P8412XV103 = 0		; Clear cont. check flag
	RETURN


O2XV103:
	ASSIGN DEV_PTR = CFT_IN_VLV_PTR
	FAIL_MSG = "CFT INLET VLV FAIL OPN"
	GOSUB OPENDEV
;aj	P8412XV103 = 1		; Set cont. check flag
	RETURN


C06XV31:							;acj006
	ASSIGN DEV_PTR = '8606XV21'				;acj006
	FAIL_MSG = "DILUENT WATER VALVE FAIL CLS"		;acj006
	GOSUB CLOSDEV						;acj006
;aj	P8606XV31 = 0		; Clear cont. check flag	;acj006
	RETURN							;acj006
O06XV31:							;acj006
	ASSIGN DEV_PTR = '8606XV21'				;acj006
	FAIL_MSG = "DILUENT WATER VALVE FAIL OPN"		;acj006
	GOSUB OPENDEV						;acj006
;aj	P8606XV31 = 1		; Set cont. check flag		;acj006
	RETURN							;acj006

C06XV362:							                 ;JMS004
	ASSIGN DEV_PTR = '8606XV362'				     ;JMS004
	FAIL_MSG = "DILUENT WATER VLV3 FAIL CLS"	  ;JMS004
	GOSUB CLOSDEV						              ;JMS004
	RETURN							                 ;JMS004

O06XV362:							
	ASSIGN DEV_PTR = '8606XV362'				     ;JMS004
	FAIL_MSG = "DILUENT WATER VLV3 FAIL OPN"	  ;JMS004 
	GOSUB OPENDEV						              ;JMS004
	RETURN							                 ;JMS004

;RDK003 START
C06XV32:							;acj006
	ASSIGN DEV_PTR = '8606XV22'				;acj006
	FAIL_MSG = "FILT FILL2 VALVE FAIL CLS"		;acj006
	GOSUB CLOSDEV						;acj006
;aj	P8606XV32 = 0		; Clear cont. check flag	;acj006
	RETURN							;acj006
O06XV32:							;acj006
	ASSIGN DEV_PTR = '8606XV22'				;acj006
	FAIL_MSG = "FILT FILL2 VALVE FAIL OPN"		;acj006
	GOSUB OPENDEV						;acj006
;aj	P8606XV32 = 1		; Set cont. check flag		;acj006
	RETURN							;acj006
;RDK003 END

;C32XV13:
;	ASSIGN DEV_PTR = DIL_IN_VLV
;	FAIL_MSG = "FASSCOOL DILUENT VLV FAIL CLS"
;	GOSUB CLOSDEV
;aj	P8632XV13 = 0		; Clear cont. check flag
;	RETURN


;O32XV13:
;	ASSIGN DEV_PTR = DIL_IN_VLV
;	FAIL_MSG = "FASSCOOL DILUENT VLV FAIL OPN"
;	GOSUB OPENDEV
;aj	P8632XV13 = 1		; Set cont. check flag
;	RETURN

C6XV318:							;acj006
	ASSIGN DEV_PTR = '8606XV218'				;acj006
	FAIL_MSG = "BEER OUTLET VALVE FAIL CLS"			;acj006
	GOSUB CLOSDEV						;acj006
;aj	P8606XV318 = 0		; Clear cont. check flag	;acj006
	RETURN							;acj006
O6XV318:							;acj006
	ASSIGN DEV_PTR = '8606XV218'				;acj006
	FAIL_MSG = "BEER OUTLET VALVE FAIL OPN"			;acj006
	GOSUB OPENDEV						;acj006
;aj	P8606XV318 = 1		; Set cont. check flag		;acj006
	RETURN							;acj006

;pbh003 C6XV319:							;acj006
;pbh003 	ASSIGN DEV_PTR = '8606XV219'				;acj006
;pbh003 	FAIL_MSG = "PRECOAT CIRC VALVE FAIL CLS"		;acj006
;pbh003 	GOSUB CLOSDEV						;acj006
;pbh003 ;aj	P8606XV319 = 0		; Clear cont. check flag	;acj006
;pbh003 	RETURN							;acj006
;pbh003 O6XV319:							;acj006
;pbh003 	ASSIGN DEV_PTR = '8606XV219'				;acj006
;pbh003 	FAIL_MSG = "PRECOAT CIRC VALVE FAIL OPN"		;acj006
;pbh003 	GOSUB OPENDEV						;acj006
;pbh003 ;aj	P8606XV319 = 1		; Set cont. check flag		;acj006
;pbh003 	RETURN							;acj006

;pbh003 C6XV320:							;acj006
;pbh003 	ASSIGN DEV_PTR = '8606XV220'				;acj006
;pbh003 	FAIL_MSG = "PRECOAT CIRC VALVE FAIL CLS"		;acj006
;pbh003 	GOSUB CLOSDEV						;acj006
;pbh003 ;aj	P8606XV320 = 0		; Clear cont. check flag	;acj006
;pbh003 	RETURN							;acj006
;pbh003 O6XV320:							;acj006
;pbh003 	ASSIGN DEV_PTR = '8606XV220'				;acj006
;pbh003 	FAIL_MSG = "PRECOAT CIRC VALVE FAIL OPN"		;acj006
;pbh003 	GOSUB OPENDEV						;acj006
;pbh003 ;aj	P8606XV320 = 1		; Set cont. check flag		;acj006
;pbh003 	RETURN							;acj006

C6XV324:							;acj006
	ASSIGN DEV_PTR = '8606XV224'				;acj006
	FAIL_MSG = "FILL SUPPLY VALVE FAIL CLS"			;acj006
	GOSUB CLOSDEV						;acj006
;aj	P8606XV324 = 0		; Clear cont. check flag	;acj006
	RETURN							;acj006
O6XV324:							;acj006
	ASSIGN DEV_PTR = '8606XV224'				;acj006
	FAIL_MSG = "FILL SUPPLY VALVE FAIL OPN"			;acj006
	GOSUB OPENDEV						;acj006
;aj	P8606XV324 = 1		; Set cont. check flag		;acj006
	RETURN							;acj006
C6XV201:				  
	ASSIGN DEV_PTR = '8606XV201'				;VCM005        
	FAIL_MSG = "SLUICE OUTLET VALVE FAIL CLS"		               
	GOSUB CLOSDEV						               
	RETURN  

;rma009 start
C8XV253:
	ASSIGN DEV_PTR = BTA2_ANODE_BYPASS_VLV
	FAIL_MSG = "BTA2 BYPASS VLV FAIL CLS"
	GOSUB CLOSDEV
	RETURN

O8XV253:
	ASSIGN DEV_PTR = BTA2_ANODE_BYPASS_VLV
	FAIL_MSG = "BTA2 BYPASS VLV FAIL OPN"
	GOSUB OPENDEV
	RETURN
;rma009 done

 						               
                                                               
;===============================================================================
;		O P E N		D E V I C E	S U B R O U T I N E
;===============================================================================

	;This subroutine will attempt to open any device that it is
	;commanded to. The subroutine will check for five things:
	;	if the program is already in failure hold (DEV_FAILED)
	;	if the device has been faulted ($f0)
	;	if the device has been interlocked ($s4)
	;	if the device is already open ($s1)
	;	if the device is in manual ($m0) it will be put to auto

OPENDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

	IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTOPN

; if the fault bit is set or the interlock bit is set
; then send the program to fail

	IF (AND(DEV_PTR:DEV_DFLG,F_0) | AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO FLTOPN

; if device is already opened
; then return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_1)) THEN
		GOTO OUTOPN

	DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)	;put device into auto

; open device and waituntil either device opens or faults
	OPEN DEV_PTR
	WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_1) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTOPN

; if device is faulted
	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		BEGIN
FLTOPN:		DEV_FAILED_FG=1		; set failure hold flag
		GOTO FAIL
		END
OUTOPN:
	RETURN

;===============================================================================
;		C L O S E	D E V I C E	S U B R O U T I N E
;===============================================================================

	;This subroutine will attempt to open any device that it is
	;commanded to. The subroutine will check for five things:
	;	if the program is already in failure hold (DEV_FAILED)
	;	if the device has been faulted ($f0)
	;	if the device has been interlocked ($s4)
	;	if the device is already closed ($s0)
	;	if the device is in manual ($m0)

CLOSDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

	IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTCLS

; if the fault bit is set, send the program to hold

	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		GOTO FLTCLS

; if the interlock bit is set, return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_4)) THEN
		GOTO OUTCLS

; if device is already closed
; then return to the program

	IF (AND(DEV_PTR:DEV_STAT,S_0)) THEN
		GOTO OUTCLS

	DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)	;put device into auto

; close device and waituntil either device closes or faults
	CLOSE DEV_PTR
	WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_0) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTCLS

; if device is faulted
	IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
		BEGIN
FLTCLS:		DEV_FAILED_FG=1			; set failure hold flag
		GOTO FAIL
		END
OUTCLS:
	RETURN

;*******************************************************************************
;
;	ERROR HANDLING SUBROUTINE
;
;*******************************************************************************
;
;	ERROR_NUM:	Error number storage
;	ERROR_LIN:	Error line storage
;
;	This subroutine handles any error problems resulting from the
;	execution of this program. Each error is handled in 3 different
;	ways. If the error is insignificant, it is ignored and the program
;	returns to resume execution. If the error is significant but not
;	critical (valid), it is reported to printer and program continues
;	normal execution. If it is critical the program suspends execution
;	a message is printed to the printer, and SKD light is blinked.
;
;	List of specifically handled errors:
;
;	Error	Description				Type
;	-----	-----------				----
;	19	program already in kick subroutine	valid
;	32	undefined communications packet type	insignificant
;	41	pcm db header not loaded		insignificant
;	69	ipn not defined				insignificant
;	87	Holding program that is not running	critical
;	162	no such program this pcm		insignificant
;	165	sequence program already running	critical
;	170	serial number mismatch			critical
;	179	illegal subroutine			insignificant
;	187	could not be remote access		insignificant
;	193	no such program this pcm		valid
;	198	illegal subroutine stack nesting	insignificant
;	199	illegal recipe data file		critical
;	200	recipe file not loaded inot memory	critical
;	201	recipe load not enabled			critical
;	222	boards dead				insignificant
;	226	board error				insignificant
;	245	both pcms down				insignificant

ERRSUB:
	ERROR_NUM = ABS(ERRNUM())
	ERROR_LIN = ERRLIN()

;	if error is valid, print message, clear error, and return to program

	PRINT LOG_ADI, "*** ERROR %i AT LINE %i ***",ERROR_NUM,ERROR_LIN


	LAMP LAMP_ADI,LAMP_NUMBER,RED	; skd flash red

;aj begin
	IF (ERROR_NUM = 187) THEN				;aj
		FAIL_MSG = "CROSS PCM COMMUNICATION ERROR"	;aj
	ELSE							;aj
		FAIL_MSG = "PROGRAM ERROR"			;aj
	IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN	;aj
		BEGIN					;aj
		ERSCLR					;aj
		GOTO FAIL				;aj
		END					;aj
	SA_MESSAGE = FAIL_MSG				;aj
	ERSRET

	NOP


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#include <openremdev.inc>					/* jac054 */
#include <closremdev.inc>					/* jac054 */


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	END
