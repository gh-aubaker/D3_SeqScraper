;******************************************************************************
;*                                                                            *
;*                                                                            *
;*      PROGRAM NAME:   DUA0:[D3DATA.PCM6.SABL]DYNRELSA.SEQ                   *
;*                                                                            *
;*                                                                            *
;*                                                                            *
;*      PROJECT NAME:   MILLER BREWING, TRENTON, OHIO                         *
;*      PROJECT NUM :   SvF 21924                                             *
;*      PCM NUMBER  :   PCM6                                                  *
;*      WRITTEN BY  :   Darin J. Acup (Sverdrup Facilities - St. Louis)       *
;*                                                                            *
;*      DATE        :   JULY 1, 1997                                          *
;*                                                                            *
;*                                                                            *
;*                                                                            *
;*      MODIFICATION LOG                                                      *
;*                                                                            *
;*      DATE            PATCH ID        DESCRIPTION                           *
;*      ----            --------        -----------                           *
;*      17-NOV-97       JT000           STARTUP CHANGES                       *
;*      20-NOV-97	VCM001		DEV LINEUP CHANGES                    *
;*      26-NOV-97	VCM000		DO, CO2 AND ALCOHOL CHECKS            *
;*      13-NOV-98       VCM002          ADDED LAMP AND AUDIBLE ALARM          * 
;*                                      OUTPUT TO "L" PLC                     *
;*      22-FEB-2002     VCM003          ADDED STACKCLR STATEMENT              *
;*      13-JUN-2002     VCM004          ADDED RELEASE CONTHCK ERROR STRINGS   *
;*                                      FOR DEVICES ON RELEASE HEADER AND     *
;*                                      EPN NAMES TO FAIL_MSG                 *
;       05-aug-02	VCM005		Added fail alarms for rel header
;      	10/29/02  	VCM006		Added DYNRELSA_CONNECTION_FG_ALLOF6
;      	10/29/02  	VCM007		REMOVED 8690XV38
;      	11/12/02  	VCM008		Added DYN_5F3_BRAND_ID_ALLOF6
;	07-FEB-03	VCM009		Added turbidity fail condition
;	21-APR-03	VCM010		Added PAAR comm message
;	08-AUG-03	VCM011		Added RE fail condition
;	19-NOV-03	VCM012		Added retrys for 187 error if releasing beer
;	28-mar-2004	acj013		Paar/cm42 upgrade.
;	05-MAY-04	VCM013		Added paar sonic velocity alarm and fail  
;	22-jul-2004	acj014		D.O. monitoring.
;	25-AUG-04	TGD001		CHANGE FBPUSH STEP TO GO TO DRAIN
;	02-SEP-04	TGD002		UPDATE MESSAGES
;  19-SEP-04   VCM014      Delay 10 minutes check of DO and co2
;  29-SEP-04   VCM015      Delay 5 minutes check of alcohol if temp resets on header
;	27-feb-2006	acj016		Paarcalc upgrade.
;  10-MAR-2006 VCM016      Don't fail outlet for inlet valve fail
;  06-jul-2006 mrp706      new flow meter code
;  25-sep-2006 mrp001      delete brand change from tank ready; after dil. pack goto park tank
;                          add brand match before beer pack from park tank                       
;  01-DEC-2006 VCM017      Seperate fail message for release failures - FIX PUMP
;                          NOT ON ERROR STRING
;  19-MAR-2007 VCM018      PURGE_VENT_TMR changes to keep purge times correct
;  25-APR-2008 VCM019      Added stackclr to 187 error in errsub- getting 179 errors
;	28-aug-2010 mrp002		fix beer pack inlit from dil pack inlet
;  14-MAY-13 VCM020      Sample loop pump removed
;	22-JUL-2013	VCM021		Use alcohol for Paar test instead of sonic velocity
;  29-SEP-2014 JMS001		Turn off PAAR unit in park tank
;	23-FEB-2015	joh022	Remove 8690XV12,13,19,20,21,22
;				Per FAT, do not validate ProLeit requests.  Set
;				brand, set the available signal and manage the
;				pump.  Set hold request in hold/fail.
;	13-MAR-2016	rma023	added equate for SECOND_PASS_FG
;	20-APr-2016	joh024	Remove 8690XV12,13,19,20,21,22
;				Remove logic for starting/stopping pump based on flow
;  22-sep-2016 JMS002   Changed when alarm flag is enabled and disabled
;	27-mar-2018	mw000  MCMS unit procedure, step and status numbers update;Update stump recovery active linking variable
;	27-mar-2018	ldk000	Clear dynamic averages when tank is empty
;	20-apr-2018	mw025	Changes for the Draft matrix project
;	20-apr-2018	egs025	Changes for the Draft matrix project
;	21-apr-2018	mw026	Leave diluent pack fb finished message posted
;	30-apr-2018	egs026	Don't close the trap fill matrix if the goverment cip is on, when proleit cycle the seats the close feedback is lost closing the program to fail
;	01-may-2018	mw027	MCMS unit procedure, step and status numbers update
;	25-jun-2018	mw028	Send a different unit procedure number to ProLei when in CIP
;  04-SEP-2018 JMS003 Changed diluent push to time or conductivity and barrels
;	10-sep-2019	ldk029	Removed D/3-Proleit mapping from this logic.  Now in DYNRELMON.seq
;				Added EQUATES to this program, but DYNRELMON uses dynrel_upf.h!!!
;				SO MOVING FORWARD, I GUESS CUT THESE PROGRAMS OVER OR ADD TO BOTH THE PROGRAMS AND UPF.H
;				-----------------------------------------------------------------------------------------
;  01-MAY-2020 JMS004 Concverted from 10lb CO2 to 12lb CO2  AND REMOVED 8502HV35
;	11-mar-2022	ldk030	New Anton PAAR mPDS5
;	22-sep-2022	polbmxprod comms to new bmx trap
;	26-SEP-2022	jac031	add RE pointer 
;	29-sep02022 VCM022	Added "FILL WAITING FOR BMX TRAP" error string
;	08-dec-2022	jac032	add CHTRAPCHK to state 8, FILL/RELEASE. to allow switching which trap will fill f3 
;				automatically.   Will auto switch trap, based on sig from bmx.
;	08-dec-2022	jac033	add new bmx sequence start bit.
;				when tank goes to purge and diluent pack, will turn on to start bmx seq
;				so that brewmaxx f3 tank can be selected by trap
;******************************************************************************
;*
;       PROGRAM FUNCTION:       This program performs the sequence administration
;       ----------------        for the Dynamic Release beer system
;
;       SUBROUTINES REFERENCED:
;       ----------------------
;
;               SUBROUTINE      DESCRIPTION
;               ~~~~~~~~~~      ~~~~~~~~~~~
;               1.  ERRSUB      PROGRAM RUN-TIME ERRORS
;       
;===============================================================================
;                                                                       
;       REFERENCE DOCUMENTS:                                            
;       -------------------                                             
;                                                                       
;               DOCUMENT                        ORIGIN                  
;               ~~~~~~~~                        ~~~~~~                  
;                                                                       
;       1.      Description of Operations       SvF        
;
;       2.      I/O list                        SvF
;
;*******************************************************************************
;
;       DEFINE UNITS
;       ------------

        UNIT DYNREL


        COMMON  POLCOM, ALLOF6, CO2COM, ALLOF7,ALLOF5 
	RUNIT DYNREL
;	JOHNOTE - will replace equates w/ header files on final version of code.  For temp code, keep equates
;*******************************************************************************
;
;       VARIABLE DEFINITION
;       -------------------

        BLACK                           ==      0               ; EQUATE        Skid panel black
        GREEN                           ==      1               ; EQUATE        Skid panel green
        RED                             ==      2               ; EQUATE        Skid panel flash red
        YELLOW                          ==      3               ; EQUATE        Skid panel flash red
        NOT_RUNNING                     ==      -1              ; EQUATE        Sabl program not running
        LOG_ADI                         ==      16              ; EQUATE        Log adi
        LAMP_ADI                        ==      15              ; EQUATE        Lamp adi
        
        INTERLOCKED                     ==      16              ; EQUATE        Interlocked Status Bit ($S4)
        INTLK                           ==      16384           ; EQUATE        Interlock Bit ($T30)
        SEQAUTO                         ==      32              ; EQUATE        SeqAuto Bit ($T5)
        BRAND_LENGTH                    ==      3               ; EQUATE        Brand string length
        NO_BRAND                        ==      50              ; EQUATE        Number of brands

        CIP_CONFIRMED                   ==      11              ; EQUATE        CIP Request Confirmed
        CIP_RELEASE                     ==      0               ; EQUATE        CIP Release 90-2 System Service
        CIP_REQUEST                     ==      1               ; EQUATE        CIP Request 90-2 System Service
        LAMP5_ADI                       ==      13              ; EQUATE        Lamp adi        
        ACID                            ==      1               ; EQUATE        Acid CIP mode selected
        CAUSTIC                         ==      0               ; EQUATE        Caustic CIP Mode (Default)
        LAMP_NUMBER  		        ==      18              ; EQUATE        Dynamic Release 8502V3 Lamp Number
        LAMP5_NUMBER  		        ==      58              ; EQUATE        Dynamic Release 8502V3 Lamp Number
        DYNREL_UNIT_NUMBER              ==      22              ; EQUATE        Dynamic Release 8502V3 Unit Number
        DYNRELCO2_LAMP_NUMBER           ==      22              ; EQUATE        Dynamic Release 8502V3 CO2 Lamp Number
        NO_FLOW                         ==      2               ; EQUATE        $SO bit of the flow switch.
        SABL_ALARM                      ==      63              ; EQUATE        Skid Lamp for SABL alarms used by ERRSUB
        ESTOP_SET                       ==      0               ; EQUATE        ESTOP Pushbutton Set

	SB_HI		== 1		;ai_cural field bit for hi alarm
	SB_LO		== 2		;ai_cural field bit for lo alarm
	SB_HIHI		== 4		;ai_cural field bit for hihi alarm
	SB_LOLO		== 8		;ai_cural field bit for lolo alarm
	SB_OBAD		== 128		;Ai_cural field bit for obad alarm
	SB_RANG		== 256		;Ai_cural field bit for range alarm	
	SB_OVER		== 512          ;Ai_cural field bit for over alarm 
	SB_IBAD		== 2048		;Ai_cural field bit for input ibad
	SB_UNDER	== 4096         ;Ai_cural field bit for under alarm 
	SB_AUTO		== 64		;Ai_flg field bit for auto/manual
	SB_DEV		== 64		;Ai_crit field bit for deviation


; EPN REFERENCES

;AI
        DYNREL_TNK_LVL                  ==      '8502LI3'       ; EPN           Dynamic Release Tank Level
        DYNREL_OUT_PSI                     ==      '8690PC37'      ; EPN           Dynamic Release Flow
        DYNREL_DO_LVL                   ==      '8690AT43'      ; EPN           Dynamic Release Dissolved Oxygen Level
        DYNREL_CO2_LVL                  ==      '8690AT42'      ; EPN           Dynamic Release CO2 Level
        DYNREL_TEMP                     ==      '8690TT47'      ; EPN           Dynamic Release Temperature
        DYNREL_OUT_TURBIDITY            ==      '8690AT40'      ; EPN
        DYNREL_FLOW_METER               ==      '8690FI1'       ;EPN           dynamic release flow meter
;ldk030        PAAR_SONIC_VEL		==	'PAAR2$D211F'	; EPN   VCM014  
        PAAR_ALCOHOL		==	'PAAR2$D1ALC'	; EPN   VCM021
	DOMON_EPN_DM131			==	'8690DM131'	; EPN		Dynamic release 1 D.O. meter	;acj014
		  DYN1_FLOW_BATCH    == '8690FQ1B'  
		  DYN1_FLOW_DAILY    == '8690FQ1D'  
;DIN
        DYNREL_RUPTURE_DISK             ==      '8502PSE31'     ; EPN           Dynamic Release Rupture Disk
        DYNREL_BREAKER_BAR              ==      '8502PSV31'     ; EPN           Dynamic Release Breaker Bar     
;DEV
        INLET_CONDTVTY                  ==      '8690CH45'      ; EPN           Tank Inlet Conductivity sensor
        OUTLET_CONDTVTY                 ==      '8690CH31'      ; EPN           Tank Outlet Conductivity sensor
        DRAIN_CONDTVTY                  ==      '8690CH30'      ; EPN           Drain Conductivity sensor
;ldk030        PAAR2_MAINT_DIN	                ==	'PAAR2-MAINT'   ; EPNVCM010
;ALLOF7 EPN References
	; AI
	DYNREL_PRM_BRAND	        ==	'MLDPRMBRAND'		;* joh23feb16 *;
	DYNREL_PRM_CSS_MEDIUM	        ==	'MLDPRMCSSMED'		;* joh23feb16 *;
	DYNREL_PRM_TOTALIZER	        ==	'MLDPRMBBLS'		;* joh23feb16 *;
	PRM_DYNREL_BRAND	        ==	'PRMMLDBRAND'		;* joh23feb16 *;
	DYNREL_PRM_FCV_OUTPUT	        ==	'MLDFCV001'		;* joh23feb16 *;
	DYNREL_FLOW	                ==	'MLDFT002'		;* joh23feb16 *;
	DYNREL_PRESSURE	                ==	'MLDPT002'		;* joh23feb16 *;
	; DIN
	PRM_DYNREL_PROD_REQ	        ==	'PRMMLDPROD'		;* joh23feb16 *;
	PRM_DYNREL_OPEN_PATH_REQ	==	'PRMMLDOPNRT'		;* joh23feb16 *;
	PRM_DYNREL_HOLD_REQ	        ==	'PRMMLDHOLD'		;* joh23feb16 *;
	DYNOUT_DRAIN_CLOSED	        ==	'MLDZSC001'		;* joh23feb16 *;
	DYNREL_BYPASS_BLK_VLV_FAIL_DIN	==	'MLDXV002FLT'		;* joh23feb16 hardware alarms for devices*;
	DYNREL_PCKGLN_BLK_VLV_FAIL_DIN	==	'MLDXV001FLT'		;* joh23feb16 hardware alarms for devices*;
	DYNREL_DILUENT_BLK_VLV_FAIL_DIN	==	'MLDXV004FLT'		;* joh23feb16 hardware alarms for devices*;


	; DOT
	DYNREL_PRM_AVAIL_ACK	        ==	'MLDPRMAVAIL'		;* joh23feb16 *;
	DYNREL_PRM_ACTIVE_ACK	        ==	'MLDPRMACT'		;* joh23feb16 *;
	DYNREL_PRM_HOLD_REQ	        ==	'MLDPRMHOLD'		;* joh23feb16 *;
	DYNREL_PRM_CIP_ACTIVE	        ==	'MLDPRMCIPACT'  	;* johfat2 *;
	DYNREL_BMXF3_SEQ_START  	== 	'MLDF3SEQSTR'     	;jacxxx  Dynamic Release SIG TO BMX TO START SEQ

	; DEV
	DYNREL_BYPASS_BLK_VLV	        ==	'MLDXV002'		;* joh23feb16 *;
	DYNREL_PCKGLN_BLK_VLV	        ==	'MLDXV001'		;* joh23feb16 *;
	DYNREL_DILUENT_BLK_VLV	        ==	'MLDXV004'		;* joh23feb16 *;
	PRM_DYNREL_STUMP_HV	        ==	'MLDHV001'		;* joh23feb16 *;

;mw025 begin
	PRM_MLD_HDR_CONDUCTVITY		==	'PRMMLDHDRCON'		;MLD header conductivity
	PRM_MLD_BEER_DRAIN_OUTPUT       ==      'MLDFCV007'		;MLD beer drain output
	MLD_PRM_BEER_BLK_VLV            ==	'MLDXV008'          	;MLD beer block valve 
	MLD_PRM_DILUENT_VLV             ==	'MLDXV009'          	;MLD diluent valve 
	MLD_PRM_TRAP1_FILL_VLV          ==	'MLDXV100'          	;MLD TRAP1 fill valve 
	MLD_PRM_TRAP2_FILL_VLV          ==	'MLDXV200'          	;MLD TRAP2 fill valve 
	MLD_PRM_TRAP3_FILL_VLV          ==	'MLDXV300'          	;MLD TRAP3 fill valve 
	MLD_TRAP_INLET_SEAT_REQ         ==      'MLDPRMFILLU'		;MLD turn on seat lifters for the trap inlet valves
;mw025 end

;ldk000 start
;ALLOF5 references
	DYN_5F3_FILL_AVG		==	'DYN5F3AVG'		;OLBA averages for inputs

;ldk000 finish






; PRIMARY UNIT REFERENCES 

	PARK_TANK_CMD			==	ZFG000		; SKEL	  JT000 Oper Park Tank command
	SC_SA_PARK_TANK_CMD		==	ZFG001		; SKEL	  JT000 SC_SA Park Tank command
	TANK_READY_CMD			==	ZFG002		; SKEL	  JT000 Oper Park Tank command
	SC_SA_TANK_READY_CMD		==	ZFG003		; SKEL	  JT000 SC_SA Park Tank command
	RELEASE_CMD			==	ZFG004		; SKEL	  JT000 Oper Release Beer command
	SC_SA_RELEASE_CMD		==	ZFG005		; SKEL	  JT000 SC_SA Release Beer command
        RELEASE_FG                      ==      ZFG006          ; SKEL    JT000 Release flag
	TEMP_SC_FG_2			==	ZFG007		; SKEL    JT000 TEMP SC FLAG #2
	CHANGE_TRAP_CMD			==	ZFG008		; SKEL	  JT000 Oper CHANGE TRAP FILTER command
	SC_SA_CHANGE_TRAP_CMD		==	ZFG009		; SKEL    JT000 SC_SA CHANGE TRAP FILTER command
        TRAP_DEVIATION_FG               ==	ZFG010          ; SKEL VCM000
        STOP_TRAP_DEVIATION_FG          ==	ZFG011          ; SKEL VCM000
        HI_LVL_FILL_STOPPED_FG          ==	ZFG012          ; SKEL 
        RELEASE_ALARM_ENABLE_FG         ==	ZFG013          ; SKEL 
        DONT_FAIL_OUTLET_FG             ==   ZFG014          ; SKEL VCM016
        SET_DEV_RUN_OUTLET              ==   ZFG015          ; SKEL VCM016
        WAIT_FOR_RESERVE_FG		==	ZFG025		; SKEL
        DO_CO2_START_DELAY_DONE        ==      ZFG030          ; SKEL VCM014 Delay check of DO and co2

        SYS_OFF_CMD                     ==      ZFG100          ; DYNREL        Oper System Off command
        PURGE_CMD                       ==      ZFG101          ; DYNREL        Oper Purge command
        CONT_CMD                        ==      ZFG102          ; DYNREL        Oper Continue command
        DIL_RIN_TANK_CMD                ==      ZFG103          ; DYNREL        Oper Diluent Rinse Tank command
        STUMP_TO_AGE_CMD                ==      ZFG104          ; DYNREL        Oper Stump To Aging command
        DIL_PACK_IN_CMD                 ==      ZFG105          ; DYNREL  JT000 Oper Diluent Pack Header command
        PACK_BEER_IN_CMD                ==      ZFG106          ; DYNREL        Oper Pack Beer Inlet command
        FILL_TANK_CMD                   ==      ZFG107          ; DYNREL        Oper Fill Tank command
        RESUM_CNTRPRESS_CMD             ==      ZFG108          ; DYNREL  JT000 Oper Resume Counterpressure command
        PACK_BEER_OUT_CMD               ==      ZFG109          ; DYNREL        Oper Pack Beer Outlet command
        FILL_REL_CMD                    ==      ZFG110          ; DYNREL        Oper Fill/Release Beer command
        STUMP_TO_PR_CMD                 ==      ZFG111          ; DYNREL        Oper Stump To PR command
        FB_BEER_PUSH_CMD                ==      ZFG112          ; DYNREL        Oper FB Line Beer Push command
        DIL_PUSH_IN_CMD                 ==      ZFG113          ; DYNREL        Oper Diluent Push Inlet command
        VENT_CMD                        ==      ZFG114          ; DYNREL        Oper Vent command
        RIN_WITH_DIL_CMD                ==      ZFG115          ; DYNREL        Oper Rinse With Diluent command
        MAINT_CMD                       ==      ZFG116          ; DYNREL        Oper Maintenance command
        ACID_CIP_CMD                    ==      ZFG117          ; DYNREL        Oper Acid CIP command
        CAUSTIC_CIP_CMD                 ==      ZFG118          ; DYNREL        Oper Caustic CIP command
        ATNS_CMD                        ==      ZFG119          ; DYNREL        Oper Advance To Next Step command
        HOLD_CMD                        ==      ZFG120          ; DYNREL        Oper Hold command
        ABORT_CIP_CMD                   ==      ZFG121          ; DYNREL        Oper Abort CIP command

        SC_SA_OFF_CMD                   ==      ZFG122          ; DYNREL        SC_SA Off command
        SC_SA_PURGE_CMD                 ==      ZFG123          ; DYNREL        SC_SA Purge command
        SC_SA_CONT_CMD                  ==      ZFG124          ; DYNREL        SC_SA Continue command
        SC_SA_DIL_RIN_CMD               ==      ZFG125          ; DYNREL        SC_SA Diluent Rinse Tank command
        SC_SA_STMP_AG_CMD               ==      ZFG126          ; DYNREL        SC_SA Stump To Aging command
        SC_SA_DPACK_IN_CMD              ==      ZFG127          ; DYNREL  JT000 SC_SA Diluent Pack Header command
        SC_SA_BPACK_IN_CMD              ==      ZFG128          ; DYNREL  JT000 SC_SA Pack Beer Inlet command
        SC_SA_FILL_TANK_CMD             ==      ZFG129          ; DYNREL        SC_SA Fill Tank command
        SC_SA_RES_CNTRPRESS_CMD         ==      ZFG130          ; DYNREL  JT000 SC_SA Resume Counterpressure command
        SC_SA_BPACK_OUT_CMD             ==      ZFG131          ; DYNREL  JT000 SC_SA Pack Beer Outlet command
        SC_SA_FILL_REL_CMD              ==      ZFG132          ; DYNREL        SC_SA Fill/Release command
        SC_SA_STMP_PR_CMD               ==      ZFG133          ; DYNREL        SC_SA Stump To PR command
        SC_SA_FB_PUSH_CMD               ==      ZFG134          ; DYNREL        SC_SA FB Line Beer Push command
        SC_SA_DIL_PUSH_CMD              ==      ZFG135          ; DYNREL        SC_SA Diluent Push Inlet command
        SC_SA_VENT_CMD                  ==      ZFG136          ; DYNREL        SC_SA Vent command
        SC_SA_RIN_DIL_CMD               ==      ZFG137          ; DYNREL        SC_SA Rinse With Diluent command
        SC_SA_MAINT_CMD                 ==      ZFG138          ; DYNREL        SC_SA Maintenance command
        SC_SA_ACID_CIP_CMD              ==      ZFG139          ; DYNREL        SC_SA Acid CIP command
        SC_SA_CAUS_CIP_CMD              ==      ZFG140          ; DYNREL        SC_SA Caustic CIP command               
        CNTRPRESS_CMD                   ==      ZFG141          ; DYNREL        SC_SA Counterpressure command
        SC_SA_ATNS_CMD                  ==      ZFG142          ; DYNREL        SC_SA Advance To Next Step command
        SC_SA_HOLD_CMD                  ==      ZFG143          ; DYNREL        SC_SA Hold command
        SC_SA_ABORT_CMD                 ==      ZFG144          ; DYNREL        SC_SA Abort CIP command

        TEMP_SC_FG                      ==      ZFG145          ; DYNREL        Temporary SC flag
        IBAD_FG                         ==      ZFG146          ; DYNREL        Analog input IBAD failure flag
        ALREADY_INITIALIZED_FG          ==      ZFG147          ; DYNREL        SC has already run intialization
        DEV_FAILED_FG                   ==      ZFG148          ; DYNREL        Device Failed flag
        SUS_COND                        ==      ZFG149          ; DYNREL        Sustained Condition flag
        DIL_PACK_DONE_FG                ==      ZFG150          ; DYNREL        Diluent Pack flag
        TRAP_SEL_FG                     ==      ZFG151          ; DYNREL        Trap Filter Select flag
        PURGE_DONE_FG                   ==      ZFG152          ; DYNREL        Purge Done flag
        BEER_PACK_IN_FG                 ==      ZFG153          ; DYNREL        Beer Pack Inlet Done flag
        DPACK_FB_DONE_FG                ==      ZFG154          ; DYNREL        Diluent Pack FB Done flag
        HIHI_LVL_FG                     ==      ZFG155          ; DYNREL        HI HI Level flag
        HI_LVL_FG                       ==      ZFG156          ; DYNREL        HI Level flag
        LO_LVL_FG                       ==      ZFG157          ; DYNREL        LO Level flag
        LOLO_LVL_FG                     ==      ZFG158          ; DYNREL        LOLO Level flag
        EMPTY_FG                        ==      ZFG159          ; DYNREL        Empty flag
;JT000	BEER_PACK_DONE_FG               ==      ZFG160          ; DYNREL        Beer Pack Done flag
        BEER_PACK_OUT_FG                ==      ZFG160          ; DYNREL  JT000 Beer Pack Outlet Done flag
        FILL_REL_FG                     ==      ZFG161          ; DYNREL        Fill/Release flag
        FB_PUSH_FG                      ==      ZFG162          ; DYNREL        FB Push flag
        DIL_PUSH_IN_FG                  ==      ZFG163          ; DYNREL        Diluent Push Inlet flag
        STMP_PR_FG                      ==      ZFG600          ; DYNREL        Stump to PR flag
        STMP_AG_FG                      ==      ZFG601          ; DYNREL        Stump to Aging flag
        STMP_RUN_FG                     ==      ZFG602          ; DYNREL        Stump Run flag
        VENT_DONE_FG                    ==      ZFG603          ; DYNREL        Vent Done flag
        VENTING_FG                      ==      ZFG604          ; DYNREL        Venting flag
        PURGING_FG                      ==      ZFG605          ; DYNREL        Purging flag
        BRAND_CHK_FAIL_FG               ==      ZFG606          ; DYNREL        Brand Check Fail flag
        TEMP_FG                         ==      ZFG607          ; DYNREL        Temporary flag
        RUN_ACID_CIP_FG                 ==      ZFG608          ; DYNREL        Run Acid CIP flag
        RELEASE_LVL_FG                  ==      ZFG609          ; DYNREL        Release Level flag
        EXPR1                           ==      ZFG610          ; DYNREL        Expression flag
        EXPR2                           ==      ZFG611          ; DYNREL        Expression flag
        EXPR3                           ==      ZFG612          ; DYNREL        Expression flag
        EXPR4                           ==      ZFG613          ; DYNREL        Expression flag
        CNTRPRESS_FG                    ==      ZFG614          ; DYNREL        Counterpressure flag
        DEV_IN_MANUAL_FG                ==      ZFG615          ; DYNREL        Device In Manual flag
        ESTOP_FAIL_FG                   ==      ZFG616          ; DYNREL        Set by the CIP user program
        CIP_ESTOP_FG                    ==      ZFG617          ; DYNREL        CIP ESTOP flag
        BOTTOM_RIN_FG                   ==      ZFG618          ; DYNREL        CIP Bottom Rinse flag
        BOTTOM_RIN_DONE_FG              ==      ZFG619          ; DYNREL        CIP Bottom Rinse Done flag
        CIRC_FG                         ==      ZFG620          ; DYNREL        CIP Circulating flag
        DRAIN_FG                        ==      ZFG621          ; DYNREL        CIP Drain flag
        PR_PACK_FG                      ==      ZFG622          ; DYNREL        PR water Pack flag
        INLET_PURGE_FG                  ==      ZFG623          ; DYNREL        Inlet Purge flag
        INLET_PURGE_DONE_FG             ==      ZFG624          ; DYNREL        Inlet Purge Done flag
        SKID_FG                         ==      ZFG625          ; DYNREL        SKID key flag
        PACK_LVL_FG                     ==      ZFG626          ; DYNREL        Pack Level flag
        DPACK_FG                        ==      ZFG627          ; DYNREL        Diluent Pack flag
        CIRC_DONE_FG                    ==      ZFG628          ; DYNREL        CIP Circ Done flag
        SEATCIP_FG                      ==      ZFG629          ; DYNREL  JT000 Seat CIP flag
        SEATCIP_DONE_FG                 ==      ZFG630          ; DYNREL  JT000 Seat CIP Done flag
	SWAP_NO_HOLD_FG			== 	ZFG632		;* DYNRELSA swap no hold flag (dynrelsc\dynrelsa) joh022 *;
	ENABLE_PRM_VLV_FG		== 	ZFG633		;* DYNRELSA enabe opening non-draft prm valves joh022 *;
	SECOND_PASS_FG			==	ZFG634		; DYNRELSA rma023

	MCMS_ABORTED_FG			==	ZFG636		; DYNREL	;mw027

        SC_MSG_TMR                      ==      ZST100          ; DYNREL        SC message timer
        IBAD_TMR                        ==      ZST101          ; DYNREL        Analog Input Bad timer
        STEP_TMR                        ==      ZST102          ; DYNREL        SA Step timer
        SEAT_TMR                        ==      ZST103          ; DYNREL        Matrix valve seat timer
        PACK_TMR                        ==      ZST104          ; DYNREL        Pack timer
        CONDCTVTY_TMR                   ==      ZST105          ; DYNREL        Conductivity sensor timer
        SUS_1_TMR                       ==      ZST106          ; DYNREL        Sustained Condition timer
        SUS_2_TMR                       ==      ZST107          ; DYNREL        Sustained Condition timer
        SUS_3_TMR                       ==      ZST108          ; DYNREL        Sustained Condition timer
        SUS_4_TMR                       ==      ZST109          ; DYNREL        Sustained Condition timer
        MATRIX_TMR                      ==      ZST110          ; DYNREL        CIP Matrix valve seat cycle timer
        DELAY_TMR                       ==      ZST111          ; DYNREL        CIP Delay timer
        TRAP_DEVIATION_TMR              ==      ZST112          ; DYNREL VCM000
        PUMP_ON_TMR                     ==      ZST113          ; DYNREL VCM000
        OLBA_ENABLE_COUNT_DOWN_TMR      ==      ZST115          ; JMS002

        BOTTOM_TMR                      ==      ZST004          ; SKEL          Bottom rinse timer
        CIRC_TMR                        ==      ZST005          ; SKEL          Circulation timer
        DRAIN_TMR                       ==      ZST006          ; SKEL          Drain timer
        SUS_5_TMR			==	ZST008          ; SKEL  ;VCM005
        SUS_6_TMR			==	ZST009          ; SKEL  ;VCM005
        SUS_7_TMR                       ==      ZST114          ; DYNREL
        SUS_8_TMR                       ==      ZST003          ; SKEL
        SUS_9_TMR                       ==      ZST000          ; SKEL  ;VCM011

        PAAR2_HEART_FAIL_TMR             ==      ZST001          ; DYNREL VCM010
        PAAR2_COMM_FAIL_TMR              ==      ZST002          ; DYNREL VCM010

        PAAR_SONIC_VEL_CHANGE_TMR              ==      ZMT101          ; DYNREL VCM013
        PURGE_VENT_TMR                  ==      ZMT100          ; DYNREL        Purge and Vent timer
        DO_CO2_START_DELAY_TIMER        ==      ZMT102          ; DYNREL VCM014 Delay check of DO and co2
        TRENDR_COLL_TMR                 ==      ZMT103          ; DYNREL         TRENDR COLLECT
        PUMP_OFF_TMR                    ==      ZMT104          ; DYNREL       P11 OFF TMR
        SC_MESSAGE                      ==      ZSG100          ; DYNREL        SC message string
        OPER_RESPONSE                   ==      ZSG101          ; DYNREL        Operator Response string
        SEQ_STATUS                      ==      ZSG102          ; DYNREL        Sequence Status string
        SA_STATUS                       ==      ZSG103          ; DYNREL        SA_Status string
        FAIL_MSG                        ==      ZSG104          ; DYNREL        Fail Message string
        DYNREL_CLND                     ==      ZSG105          ; DYNREL        Dynamic Release Cleaned
        DYNREL_CIP_MODE_SG              ==      ZSG106          ; DYNREL        Dynamic Release CIP mode (CAUSTIC OR ACID) (8)
        TEMP_SG                         ==      ZSG107          ; DYNREL        Temporary String
        BRAND_ID                        ==      ZSG109          ; DYNREL        Brand ID string
        OLD_BRAND                       ==      ZSG110          ; DYNREL        Old Brand string
        SA_MESSAGE                      ==      ZSG120          ; DYNREL        SA Message string
        ERROR_STRING                    ==      ZSG121          ; DYNREL        Error string
        SA_2_MESSAGE                    ==      ZSG122          ; DYNREL        SA Message string
        QUERY_MESSAGE                   ==      ZSG123          ; DYNREL        Query Message string
        SA_TMP_SG			==	ZSG124		; DYNREL
        SA_TMP1_SG			==	ZSG125		; DYNREL
	UNIT_SG				==	ZSG126		; DYNREL
        ERROR_STRING2			==	ZSG127          ; DYNREL
	BRAND_SG			== 	ZSG155		;*  brand string (brandtable.inc) joh013 *;
	PRM_BRAND_SG			== 	ZSG156		;*  brand string (brandtable.inc) joh013 *;
        BRAND_ID_REQ                    ==      ZSG151          ; DYNREL        Brand ID Request string
        SA_3_MESSAGE                    ==      ZSG153          ; DYNREL        SA Message string
        RELEASE_FAIL_MSG                ==      ZSG154          ; DYNREL        RELEASE FAIL MESSAGE VCM017

	LAST_SA_STATUS			==	ZSG157		; DYNREL	;mw027

	SC_TMP_INT			==	ZIN023		;* Sc prgm temporary integer zin020 -> zin023 for PAAR_ALCOHOL_CHECK joh013 *;
        SC_MSG_TIME                     ==      ZIN100          ; DYNREL        Time before SC message is cleared
        SC_ERROR_NUM                    ==      ZIN101          ; DYNREL        SC Error number
        SC_ERROR_LIN                    ==      ZIN102          ; DYNREL        SC Error Line number
        CMD_ERROR_NUM                   ==      ZIN103          ; DYNREL        Command Device Error number
        CMD_ERROR_LIN                   ==      ZIN104          ; DYNREL        Command Device Error Line number
        ERROR_NUM                       ==      ZIN105          ; DYNREL        SA Error number
        ERROR_LIN                       ==      ZIN106          ; DYNREL        SA Error Line number
        STK_CNT                         ==      ZIN107          ; DYNREL        Loop counter for CLRSTK subroutine
        IBAD_SECONDS                    ==      ZIN108          ; DYNREL        Number of seconds IBAD before failure
;        LAST_LAMP_STATE                 ==      ZIN109          ; DYNREL        Last state of SKID lamp
        LAST_LAMP_STATE                 ==      ZIN011          ; DYNREL        Last state of SKID lamp
        PAAR2_STATUS_INT                ==      ZIN110          ; DYNREL VCM010       
        CMD_SA_STATUS_INT               ==      ZIN111          ; DYNREL        Integer used by OPENDEV and CLOSEDEV
        MIN_TIME                        ==      ZIN112          ; DYNREL        Sustained condition time
        SUS_TIME                        ==      ZIN113          ; DYNREL        Sustained condition time
        MAX_TIME                        ==      ZIN114          ; DYNREL        Sustained condition time
        PURGE_TIME                      ==      ZIN115          ; DYNREL        Purge time
        INLET_PURGE_TIME                ==      ZIN116          ; DYNREL        Inlet Purge time
        DIL_PACK_TIME                   ==      ZIN117          ; DYNREL        Diluent Pack time
        TRAP_HDR_REQ                    ==      ZIN118          ; DYNREL        Trap Filter Header Request
        TRAP_HDR_DSP                    ==      ZIN119          ; DYNREL        Trap Filter value for graphic
        SA_STATE                        ==      ZIN120          ; DYNREL        SA State number
        CONDCTVTY_TIME                  ==      ZIN121          ; DYNREL        Conductivity sensor time
        BEER_PACK_TIME                  ==      ZIN122          ; DYNREL        Beer Pack time
        DIL_PACK_FB_TIME                ==      ZIN123          ; DYNREL        Diluent Pack FB time
        SEAT_TIME                       ==      ZIN124          ; DYNREL        Matrix valve seat time
        HIHI_LVL                        ==      ZIN125          ; DYNREL        HI HI tank level
        HI_LVL                          ==      ZIN126          ; DYNREL        HI tank level
        LO_LVL                          ==      ZIN127          ; DYNREL        LO tank level
        LOLO_LVL                        ==      ZIN128          ; DYNREL        LO LO tank level
        EMPTY_LVL                       ==      ZIN129          ; DYNREL        Empty tank level
        RELEASE_LVL                     ==      ZIN130          ; DYNREL        Release tank level
        RIN_NUM                         ==      ZIN131          ; DYNREL        Rinse number
        TEMP_INT                        ==      ZIN132          ; DYNREL        Temporary Integer
        DYNREL_FLOW_DEADBAND            ==      ZIN133          ; DYNREL  JT000 Release Flow Dead band
        RINSE_LVL                       ==      ZIN134          ; DYNREL        Rinse level

        PRERINSE_TIME                   ==      ZIN135          ; DYNREL        Prerinse Step time
        CAU_PRERINSE_TIME               ==      ZIN136          ; DYNREL        Caustic Prerinse Step time
        ACID_PRERINSE_TIME              ==      ZIN137          ; DYNREL        Acid Prerinse Step time
        CAUSTIC_TIME                    ==      ZIN138          ; DYNREL        Caustic Step time
        ACID_TIME                       ==      ZIN139          ; DYNREL        Acid Step time
        FIRST_RINSE_TIME                ==      ZIN140          ; DYNREL        First Rinse Step time
        CHLOR_RINSE_TIME                ==      ZIN141          ; DYNREL        Chlorine Rinse Step time
        FINAL_RINSE_TIME                ==      ZIN142          ; DYNREL        Final Rinse Step time
        CAU_FINAL_RINSE_TIME            ==      ZIN143          ; DYNREL        Caustic Final Rinse Step time
        ACID_FINAL_RINSE_TIME           ==      ZIN144          ; DYNREL        Acid Final Rinse Step time
        CT1_LVL_TIME                    ==      ZIN145          ; DYNREL        Caustic Delay Time for Transition 1
        AT2_LVL_TIME                    ==      ZIN146          ; DYNREL        Acid Delay Time for Transition 2
        AT3_LVL_TIME                    ==      ZIN147          ; DYNREL        Acid Delay Time for Transition 3
        CT4_LVL_TIME                    ==      ZIN148          ; DYNREL        Caustic Delay Time for Transition 4
        CT5_LVL_TIME                    ==      ZIN149          ; DYNREL        Caustic Delay Time for Transition 5
        CT6_LVL_TIME                    ==      ZIN150          ; DYNREL        Caustic Delay Time for Transition 6
        CT7_LVL_TIME                    ==      ZIN151          ; DYNREL        Caustic Delay Time for Transition 7
        AT7_LVL_TIME                    ==      ZIN152          ; DYNREL        Acid Delay Time for Transition 7
        T7_LVL_TIME                     ==      ZIN153          ; DYNREL        Delay Time for Transition 7
        CSR_2_TIME                      ==      ZIN154          ; DYNREL        CSR Delay Time for State 2
        CSR_3_TIME                      ==      ZIN155          ; DYNREL        CSR Delay Time for State 3
        CSR_4_TIME                      ==      ZIN156          ; DYNREL        CSR Delay Time for State 4
        CSR_5_TIME                      ==      ZIN157          ; DYNREL        CSR Delay Time for State 5
        CSR_6_TIME                      ==      ZIN158          ; DYNREL        CSR Delay Time for State 6
        CSR_7_TIME                      ==      ZIN159          ; DYNREL        CSR Delay Time for State 7
        CL2_PPM                         ==      ZIN160          ; DYNREL        CL2 reading as input by operator on SC graphic
        PAAR2_HEARTBEAT_INT             ==      ZIN161          ; DYNRELVCM010        CL2 reading as input by operator on SC graphic
        CSS_VLV_OUT                     ==      ZIN162          ; DYNREL        Output value for CSS flow control
        CSS_AUTO_SETPT                  ==      ZIN163          ; DYNREL        Setpoint for CSS flow control
        PR_PACK_TIME                    ==      ZIN164          ; DYNREL        PR Pack time
;JT000  BOT_RIN_TIME                    ==      ZIN165          ; DYNREL        Bottom Rinse time
        SEATCIP_TIME                    ==      ZIN165          ; DYNREL  JT000 Seat CIP time
        CIRC_TIME                       ==      ZIN166          ; DYNREL        Circulation time
        DRAIN_TIME                      ==      ZIN167          ; DYNREL        Drain time
        TIME_OUT                        ==      ZIN168          ; DYNREL        Time Out for waituntil
        VENT_TIME                       ==      ZIN169          ; DYNREL        Vent time
        FLOW_LO_TIME                    ==      ZIN170          ; DYNREL        Low Flow time
        DYNREL_FLOW_LO_LIM              ==      ZIN171          ; DYNREL        Dynamic Release Low Flow Limit
        BOT_RINSE_TIME                  ==      ZIN172          ; DYNREL        Bottom Rinse time
        RESTART_FILL                    ==      ZIN173          ; DYNREL        Restart Fill Tank 
        CIP_STATE                       ==      ZIN174          ; DYNREL  JT000 CIP State number
	DYNREL_FLOW_PC_SETPT		==	ZIN178		; DYNREL  JT000 8690PC37 SETPOINT
	STUMP_BBL			==	ZIN179		; DYNREL  JT000 STUMP TO PR/AGING BBL
	BEFORE_STUMP_BBL		==	ZIN180		; DYNREL  JT000 TANK LEVEL BEFORE STUMP
        TRAP_DEVIATION_TIME             ==      ZIN181          ; DYNREL VCM000 Time delay for trap deviation
	SA_TMP_INT			==	ZIN182		; DYNREL
	UNIT_NUMBER			==	ZIN183		; DYNREL
        ALCOHOL_ALARM_TIME              ==	ZIN186		; DYNREL VCM005
        CO2_ALARM_TIME                  ==	ZIN187		; DYNREL VCM005
        DO_ALARM_TIME                   ==	ZIN188		; DYNREL VCM005
        TURB_ALARM_TIME                 ==	ZIN189		; DYNREL VCM009
        RE_ALARM_TIME                 	==	ZIN194		; DYNREL VCM011
        TEMP_INT2                    	==      ZIN190          ; DYNREL        
        PAAR2_LAST_HEARTBEAT_INT         ==      ZIN191          ; DYNREL  VCM010      
        PAAR2_HEART_FAIL_TIMEOUT         ==      ZIN192          ; DYNREL  VCM010      
        PAAR2_COMM_FAIL_TIMEOUT          ==      ZIN193          ; DYNREL  VCM010      
        ERROR_187_COUNT          ==      ZIN195          ; DYNREL  VCM012      
	     PLC_ERROR			==	ZIN196		; DYNREL	;acj013
        PAAR_SONIC_FAIL_TIME		==	ZIN197		; DYNREL VCM013
	     DOMON_STAT_INT			==	ZIN198		; DYNREL	D.O. meter status	;acj014
        DO_CO2_START_DELAY_TIME        ==      ZIN199          ; DYNREL VCM014 Delay check of DO and co2
        PAAR_ALCOHOL_CHECK    ==  ZIN020  ;SKEL VCM016
	CLS_REM_LOOP_CNT                ==      ZIN200		;* remclsdev loop counter joh013 *;
	OPN_REM_LOOP_CNT                ==      ZIN201		;* remopndev loop counter joh013 *;
	PRM_REQUEST_INT                 ==      ZIN202		;* nondraft pr matrix request integer joh013 *;
	PRM_REQUEST_STEP_INT            ==      ZIN203		;* nondraft pr matrix request step integer joh013 *;
	BPACK1_FCV_DRAIN_OTPT           ==      ZIN204		;* beer pack step 1 flow control drain output joh013 *;
	DPACK2_FCV_DRAIN_OTPT           ==      ZIN205		;* diluent pack step 2 flow control drain output joh013 *;
	CIP_FCV_DRAIN_OTPT              ==      ZIN206		;* cip flow control drain output joh013 *;
	BRAND_NUM                       ==      ZIN208		;*  brand number (brandtable.inc) joh013 *;
	DYNREL_BYPASS_BLK_VLV_DEVSTAT   ==      ZIN209		;*  mldxv004 onetime alignment device status integer  joh013 *;
	DYNREL_PCKGLN_BLK_VLV_DEVSTAT   ==      ZIN210		;*  mldxv001 onetime alignment device status integer joh013 *;
	SUB_STEP_INT                    ==      ZIN211		;*  sub step integer joh013 *;
	DIL_PACK_FB_TIME2               ==      ZIN212		;*  second diluent pack time joh013 *;
   OLBA_ENABLE_COUNT_DOWN_TIME     ==      ZIN213     ; JMS002  
	CIP_NEW_FCV_DRAIN_OTPT		==	ZIN215		;* cip new flow control drain output mw025 *;
        START_PUSH_BBLS			==	ZFL100		; DYNREL
        PAAR_PREVIOUS_SONIC_VEL	==	ZFL101		; DYNREL VCM013
        PAAR_PREVIOUS_ALCOHOL	==	ZFL102		; DYNREL VCM016
	BEER_PACK_BYPASS_BBL		== ZFL103		;*  Beer Pack Outlet bypass barrels joh013  *;
	BEER_PACK_MAIN_BBL		== ZFL104		;*  Beer Pack Outlet main barrels joh013  *;
	BEER_PACK_BOTH_BBL		== ZFL105		;*  Beer Pack Outlet both joh013  *;
   OLBA_ENABLE_COUNT_DOWN  == ZFL106      ; JMS002

	DEV_PTR                         ==      ZPT100          ; DYNREL        Device Pointer
	SEQ_STATUS_PTR                  ==      ZPT101          ; DYNREL        Sequence Status string pointer
        TRAP_VALVE_PTR                  ==      ZPT102          ; DYNREL        Trap Filter Valve pointer
        TEMP_PTR                        ==      ZPT103          ; DYNREL        Temporary Pointer
        TRAP_BRAND_PTR                  ==      ZPT104          ; DYNREL        Trap Filter Brand
        CIP_REQ_PTR                     ==      ZPT105          ; DYNREL        CIP Request Pointer
        TRAP_ALC_PTR			==	ZPT106          ; DYNREL
        TRAP_CO2_PTR			==	ZPT107          ; DYNREL
        TRAP_DO_PTR			==	ZPT108          ; DYNREL
	TRAP_RE_PTR              	== 	ZPT126			;jac031
	SA_TMP_PTR			==	ZPT109          ; DYNREL

	MCMS_PROCEDURE_PTR		==	ZPT121		; DYNREL ;mw027
	MCMS_STATE_PTR			==	ZPT122		; DYNREL ;mw027
	MCMS_STATUS_PTR			==	ZPT123		; DYNREL ;mw027


;ldk029 start addition
	MEL_CRIT_COMM_ERR_FG	== ZFG049	;/* MEL monitor program x-pcm ciritical communication flag  */
	MEL_TRANSFER_ACTIVE_FG	== ZFG050	;/* MEL transfer active flag			 */
	MEL_EX1_FG				== ZFG051	;/* MEL temporary expression flag	 */
	MEL_EX2_FG				== ZFG052	;/* MEL temporary expression flag	 */
	MEL_EX3_FG				== ZFG053	;/* MEL temporary expression flag	 */
	MEL_EX4_FG				== ZFG054	;/* MEL temporary expression flag	 */
	MEL_EX5_FG				== ZFG055	;/* MEL temporary expression flag	 */
	MEL_SOURCE_CHANGE_FG	== ZFG056	;/* MEL source change detected flag	 */
	PHENO_DYNREL_CHECK_P_FG     == ZFG635
	TV_BATCH_DATE_OK_FG         == ZFG637
	TV_DETECT_DATE_FG           == ZFG638
	ROLLOVER_LATCH_FG           == ZFG639
	TARGET_POST_ROLLOVER_FG     == ZFG640
	TV_BATCH_TIME_OK_FG         == ZFG641
	TV_DETECT_TIME_FG           == ZFG642
	CLOSE_BATCH_CMD             == ZFG643
	FILL_ACTIVE_FG              == ZFG644
	EMPTY_ACTIVE_FG             == ZFG645
	TANK_TAPPED_FG              == ZFG646
	INIT_FILL_FG                == ZFG647
	CIP_IN_PROG_FG              == ZFG648
	
	MEL_MSG_TMR				    == ZST010	;/* similar to SC message timer ldk31aug19 */
	BATCH_CONTINUATION_STMR	    == ZST116  ;/* ldk31aug19 */
	CLOSE_BATCH_DELAY_STMR      == ZST117  ;/* ldk31aug19 */
	MEL_ERROR_NUM			== ZIN025	;/* MEL monitor program error number			 */
	MEL_ERROR_LIN			== ZIN026	;/* MEL monitor program error line number	 */
	MEL_ERR_INT				== ZIN027	;/* MEL monitor program temporary integer	 */
	MEL_TMP_INT				== ZIN028	;/* MEL monitor program temporary integer	 */
	MEL_TMP_INT1			== ZIN029	;/* MEL monitor program temporary integer	 */
	MEL_TMP_INT2			== ZIN030	;/* MEL monitor program temporary integer	 */
	MEL_MSG_TIME			== ZIN031	;/* MEL monitor program message time			 */
	LAST_DEV_ALIGN_INT		== ZIN032	;/* last state device alignment				 */
	MEL_TRANSFER_TYPE		== ZIN050	;/* transfer type for MEL - 1 = beer, 2 = WATER, 3 = CIP  */
	MEL_DELAY_TIME			== ZIN051	;/* Delay time after populating context but before populating transfer active and time before clearing context after lowering transfer active  */
	PREV_MEL_TRANSFER_TYPE	== ZIN052	;/* transfer type for PREV MEL transfer	 */
	MEL_VESSEL_TYPE			== ZIN053	;/* vessel type for MEL lookup tables 0 = n/a, 1 = silo, 2 = fermenter, 3 = aging tank, 4 = PRT  */
	
	BATCH_CONTINUATION_EVENT        == ZIN216
	BATCH_CONTINUATION_SELECT       == ZIN217
	TMP_DAY                         == ZIN218
	TMP_MONTH                       == ZIN219
	TMP_YEAR                        == ZIN220
	TMP_HOURS                       == ZIN221
	TMP_MINUTES                     == ZIN222
	TMP_SECONDS                     == ZIN223
	BATCH_CONTINUATION_DELAY_TIME   == ZIN224
	OLD_BRAND_NUM                   == ZIN225
	TEST_MONTH_INT                  == ZIN226
	TEST_DAY_INT                    == ZIN227
	TEST_YEAR_INT                   == ZIN228
	TEST_HOUR_INT                   == ZIN229
	TEST_MIN_INT                    == ZIN230
	CLOSE_BATCH_DELAY_TIME          == ZIN231
	MCMS_BRAND_PLC_LOCAL		    == ZIN232
	MCMS_PROCEDURE_LOCAL		    == ZIN233
	MCMS_STATE_LOCAL			    == ZIN234
	MCMS_STATUS_LOCAL               == ZIN235
	MCMS_PROCEDURE_LOCAL_B		    == ZIN236
	MCMS_STATE_LOCAL_B			    == ZIN237
	MCMS_STATUS_LOCAL_B             == ZIN238
	
	MEL_TMP_FLT				== ZFL004	;/* MEL monitor program temporary float hyl03dec15 */
	MEL_TMP_FLT1			== ZFL005	;/* MEL monitor program temporary float hyl03dec15 */
	
	MEL_SOURCE_STR_1		== ZFL050	;/* strength of MEL source vessel 1 hyl03dec15 */
	MEL_SOURCE_STR_2		== ZFL051	;/* strength of MEL source vessel 2 hyl03dec15 */
	MEL_SOURCE_STR_3		== ZFL052	;/* strength of MEL source vessel 3 hyl03dec15 */
	MEL_SOURCE_STR_4		== ZFL053	;/* strength of MEL source vessel 4 hyl03dec15 */
	MEL_STR_LIMIT			== ZFL054	;/* instrument value used to determine beer/water interface units variable (oP/ABV) hyl03dec15 */
	PREV_MEL_SOURCE_STR_1	== ZFL055	;/* strength of MEL source vessel 1 for PREV transfer hyl03dec15 */
	PREV_MEL_SOURCE_STR_2	== ZFL056	;/* strength of MEL source vessel 2 for PREV transfer hyl03dec15 */
	PREV_MEL_SOURCE_STR_3	== ZFL057	;/* strength of MEL source vessel 3 for PREV transfer hyl03dec15 */
	PREV_MEL_SOURCE_STR_4	== ZFL058	;/* strength of MEL source vessel 4 for PREV transfer hyl03dec15 */
	MEL_XFER_AMOUNT			== ZFL059	;/* amount transferred for MEL transfer hyl03dec15 */
	MEL_RCPTD_STR			== ZFL060	;/* receipted strength for MEL transfer (material handling only) hyl03dec15 */
	PREV_MEL_XFER_AMOUNT	== ZFL061	;/* amount transferred for PREV MEL transfer hyl03dec15 */
	PREV_MEL_RCPTD_STR		== ZFL062	;/* receipted strength for previous MEL transfer (material handling only) hyl03dec15 */
	MEL_AVG_STR_XFER		== ZFL063	;/* MEL needs the volume weighted average alcohol/plato for each transfer hyl03dec15 */
	
	TV_BATCH_DURATION_TOTAL_HR  == ZFL132
	DEFAULT_BATCH_TOT_VALUE     == ZFL133
	DEFAULT_BATCH_DURATION      == ZFL134
	BATCH_TOT_VALUE             == ZFL135
	MIN_BATCH_TOT_VALUE         == ZFL136
	MAX_BATCH_TOT_VALUE         == ZFL137
	TV_BATCH_TOT_VALUE          == ZFL138
	CURRENT_TOT_VALUE           == ZFL139
	START_TOT_VALUE             == ZFL140
	TARGET_TOT_VALUE            == ZFL141
	REMAINING_TOT_VALUE         == ZFL142
	CURRENT_BATCH_RUN_VOL       == ZFL143
	ROLLOVER_TARGET_TOT_VALUE   == ZFL144
	BATCH_DURATION              == ZFL145
	MIN_BATCH_DURATION          == ZFL146
	MAX_BATCH_DURATION          == ZFL147
	TV_BATCH_DURATION           == ZFL148
	CURRENT_JULIAN_TIME         == ZFL149
	START_JULIAN_TIME           == ZFL150
	TARGET_JULIAN_TIME          == ZFL151
	REMAINING_TIME              == ZFL152
	CURRENT_BATCH_RUN_TIME      == ZFL153
	LEAP_YEAR                   == ZFL154
	TMP_JULIAN_YEAR             == ZFL155
	TMP_JULIAN_DATE             == ZFL156
	TMP_JULIAN_HOURS            == ZFL157
	TMP_JULIAN_MINUTES          == ZFL158
	DEFAULT_BATCH_END_HOUR      == ZFL159
	TV_BATCH_DURATION_DAY       == ZFL160
	TV_BATCH_DURATION_HR        == ZFL161
	TV_BATCH_DURATION_MIN       == ZFL162
	BATCH_DURATION_DAY          == ZFL163
	BATCH_DURATION_HR           == ZFL164
	BATCH_DURATION_MIN          == ZFL165
	CURRENT_BATCH_RUNTIME_DAYS  == ZFL166
	CURRENT_BATCH_RUNTIME_HR    == ZFL167
	CURRENT_BATCH_RUNTIME_MIN   == ZFL168
	REMAINING_TIME_DAYS         == ZFL169
	REMAINING_TIME_HR           == ZFL170
	REMAINING_TIME_MIN          == ZFL171
	
	MEL_MSG					== ZSG022	
	MEL_ERR_SG				== ZSG023	
	MEL_TMP_SG				== ZSG024	
	MEL_TMP_SG1				== ZSG025	
	MEL_TMP_SG2				== ZSG026	
	MEL_TMP_SG3				== ZSG027	
	MEL_TMP_SG4				== ZSG028	
	
	MEL_MATERIAL_TYPE		== ZSG050	
	MEL_SOURCE_VESSEL_1		== ZSG051	
	MEL_SOURCE_VESSEL_2		== ZSG052	
	MEL_SOURCE_VESSEL_3		== ZSG053	
	MEL_SOURCE_VESSEL_4		== ZSG054	
	MEL_SOURCE_BATCH_ID_1	== ZSG055	
	MEL_SOURCE_BATCH_ID_2	== ZSG056	
	MEL_SOURCE_BATCH_ID_3	== ZSG057	
	MEL_SOURCE_BATCH_ID_4	== ZSG058	
	MEL_DEST_VESSEL_1		== ZSG059	
	MEL_DEST_VESSEL_2		== ZSG060	
	MEL_DEST_VESSEL_3		== ZSG061	
	MEL_DEST_VESSEL_4		== ZSG062	
	MEL_DEST_BATCH_ID_1		== ZSG063	
	MEL_DEST_BATCH_ID_2		== ZSG064	
	MEL_DEST_BATCH_ID_3		== ZSG065	
	MEL_DEST_BATCH_ID_4		== ZSG066	
	MEL_TRANSFER_START_TIME		== ZSG067	
	PREV_MEL_MATERIAL_TYPE		== ZSG068	
	PREV_MEL_SOURCE_VESSEL_1	== ZSG069	
	PREV_MEL_SOURCE_VESSEL_2	== ZSG070	
	PREV_MEL_SOURCE_VESSEL_3	== ZSG071	
	PREV_MEL_SOURCE_VESSEL_4	== ZSG072	
	PREV_MEL_SOURCE_BATCH_ID_1	== ZSG073	
	PREV_MEL_SOURCE_BATCH_ID_2	== ZSG074	
	PREV_MEL_SOURCE_BATCH_ID_3	== ZSG075	
	PREV_MEL_SOURCE_BATCH_ID_4	== ZSG076	
	PREV_MEL_DEST_VESSEL_1		== ZSG077	
	PREV_MEL_DEST_VESSEL_2		== ZSG078	
	PREV_MEL_DEST_VESSEL_3		== ZSG079	
	PREV_MEL_DEST_VESSEL_4		== ZSG080	
	PREV_MEL_DEST_BATCH_ID_1	== ZSG081	
	PREV_MEL_DEST_BATCH_ID_2	== ZSG082	
	PREV_MEL_DEST_BATCH_ID_3	== ZSG083	
	PREV_MEL_DEST_BATCH_ID_4	== ZSG084	
	PREV_TRANSFER_END_TIME		== ZSG085	
	PREV_TRANSFER_START_TIME	== ZSG086	
	BATCH_END_DATE_SG           == ZSG128
	TV_BATCH_END_DATE_SG        == ZSG129
	TEST_MONTH_SG               == ZSG130
	TEST_DAY_SG                 == ZSG131
	TEST_YEAR_SG                == ZSG132
	TV_BATCH_FAIL_SG            == ZSG133
	TV_UNIT_SG                  == ZSG134
	SA_TMP2_SG                  == ZSG135
	TEST_DATE_SG                == ZSG136
	BATCH_END_TIME_SG           == ZSG137
	TV_BATCH_END_TIME_SG        == ZSG138
	TEST_TIME_SG                == ZSG139
	TEST_HOUR_SG                == ZSG140
	TEST_MIN_SG                 == ZSG141
	CURRENT_BATCH_RUNTIME_SG    == ZSG142
	REMAINING_TIME_SG			== ZSG143
	OLD_BRAND_SG                == ZSG144
	MEL_TMP_PTR			== ZPT007	;/* temporary pointer for MEL  */
	MEL_TMP1_PTR			== ZPT008	;/* temporary pointer for MEL  */
	MEL_TMP2_PTR			== ZPT009	;/* temporary pointer for MEL  */
	MEL_TMP3_PTR			== ZPT010	;/* temporary pointer for MEL  */
	MEL_AVG_STR_EPN_PTR		== ZPT011	;/* pointer to PAAR ABV averaging reading or plato averaging EPN  */
	TANK_INLET_TOTAL_PTR            == ZPT124  	;/* ldk31aug19 */
	MCMS_BRAND_PLC_PTR              == ZPT125  	;/* ldk31aug19 */
;ldk029 finish addition


	PRMATRIX_HEARTBEAT_OK_FG_ALLOF6	==	YFG220		; Nondraft PR Matrix PCM7/PCM6 heartbeat ok flag joh23feb16
	TRAP1_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6  ==	YFG319  ;egs30apr2018
	TRAP2_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6  ==	YFG320  ;egs30apr2018
	TRAP3_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6  ==	YFG321  ;egs30apr2018

        TRAP_HDR_SEL_ALLOF6             ==      YIN016          ; ALLOF6        Trap Filter Header Select
	PRM_DYNREL_BRAND_AIMEAS_ALLOF6		==	YIN167	;* p7ilk to pcm6 programs prm to mld\dynrel brand integer  joh23feb16 *;
	PRM_DYNREL_STUMP_HV_DEVSTAT_ALLOF6	==	YIN168	;* p7ilk to pcm6 programs prm to mld\dynrel handvlv device status  joh23feb16 *;
	DYNOUT_DRAIN_CLOSED_DINVAL_ALLOF6	==	YIN169	;* p7ilk to pcm6 programs prm to mld\dynrel drain zsc closed prox din val  joh23feb16 *;

	DYN_5F3_MCMS_PROCEDURE_NUM_ALLOF6	==	YIN350	; ALLOF6	;mw027
	DYN_5F3_MCMS_STATE_NUM_ALLOF6		==	YIN380	; ALLOF6	;mw027
	DYN_5F3_MCMS_STATUS_NUM_ALLOF6		==	YIN410	; ALLOF6	;mw027
	DYN_5F3_STUMP_PLC_ALLOF6		==	YIN441	; ALLOF6	;mw000
        DYN_5F3_BRAND_ID_ALLOF6         ==	YSG013		;Dynamic release BRAND VCM008
		  DYN_STUMP_CSR_RESERVE_SG_ALLOF6	==	YSG027		;Dynamic release stump/csr system reserve - TV (30 char) (dynoutsa.seq) */	/*aj(4/7/00)*/
		  DYN_5F3_SA_STATUS_ALLOF6			 ==		YSG050	;/* Sa status - TRENDR,TV (30 char) (dynrelsa.seq) */
        DYNREL_FILL_OK_FG_ALLOF6        ==      YFG076          ; ALLOF6        Dynamic Release OK flag
        DYNALARM_5F3_ALLOF6             ==      YFG150          ; ALLOF6
        DYNRELSA_CONNECTION_FG_ALLOF6   ==	YFG152          ; ALLOF6 VCM006
	PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 ==	YFG222	;* Nondraft PR Matrix loc pcm6 dynrel open path request dinval flag joh23feb16 *;
	PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6	==      YFG221	; Nondraft PR Matrix loc pcm6 dynrel hold request dinval joh024

	DYNREL_PAAR2_STATUS_INT_ALLOF6 == YIN332  ; ldk030 new interface to mPDS5 directly in PCM6
	DYNREL_HEARTBEAT_INT_ALLOF6    == YIN333  ; ldk030 new interface to mPDS5 directly in PCM6

	POL1_BRAND_POLCOM_ALLOF6     	==     YSG120		;/*POLBMXPROD - PROCOMM6*/
	POL2_BRAND_POLCOM_ALLOF6        ==     YSG121		;/*POLBMXPROD - PROCOMM6*/
	POL3_BRAND_POLCOM_ALLOF6        ==     YSG122		;/*POLBMXPROD - PROCOMM6*/

	TRAP_FILL_OK_FG_POLCOM_ALLOF6 	== 	YFG404		;/*POLBMXPROD - PROCOMM6 REPLACE TRAP_FILL_OK_FG_POLCOM*/

        POL1_BRAND_POLCOM               ==      ISG010          ; POLCOM        Trap Filter 1 Brand
        POL2_BRAND_POLCOM               ==      ISG025          ; POLCOM        Trap Filter 2 Brand
        POL3_BRAND_POLCOM               ==      ISG040          ; POLCOM        Trap Filter 3 Brand

        TRAP_FILL_OK_FG_POLCOM          ==      IFG042          ; POLCOM        Trap Filter OK flag

        FIRST_BRAND_ALLOF7              ==      PSG302          ; ALLOF7        First Brand string

        CO2_PRT_FAIL_FG_CO2COM          ==      VFG002          ; CO2COM        12LB Counterpressure System Off/Fail flag
        CO2_XFER_TNK_FAIL_FG_CO2COM     ==      VFG001          ; CO2COM        10LB COUNTERPRESSURE SYSTEM OFF/FAILURE FLAG

	DOMON_STAT_DM131_ALLOF6		== 	YIN471		;POLBMXPROD - REPLACE DOMON_STAT_DM131_ALLOF5

	DOMON_STAT_DM131_ALLOF5		==	QIN080		;ALLOF5		Dynamic release 1 D.O. meter status	;acj014
        
;#define	DYNREL1_PAAR2_STATUS_INT_POLCOM	IIN029	/* Dynrel1 Paar 2 driver status integer ;acj016 */
;#define	PAARCALC_HEARTBEAT_INT_POLCOM	IIN030	/* Paarcalc.seq heartbeat (paarcalc.seq) ;acj016 */
         DYNREL1_PAAR2_STATUS_INT_POLCOM	== IIN029	;/* Dynrel1 Paar 2 driver status integer ;acj016 */
         PAARCALC_HEARTBEAT_INT_POLCOM	== IIN030	;/* Paarcalc.seq heartbeat (paarcalc.seq) ;acj016 */

;*******************************************************************************
;
;       EQUATES
;       -------

        T_0 == 1                ;Temp Bit $T0
        T_1 == 2                ;Temp Bit $T1
        T_2 == 4                ;Temp Bit $T2
        T_3 == 8                ;Temp Bit $T3
        T_4 == 16               ;Temp Bit $T4
        T_5 == 32               ;Temp Bit $T5
        T_6 == 64               ;Temp Bit $T6
        T_7 == 128              ;Temp Bit $T7
        T_8 == 256              ;Temp Bit $T8
        T_9 == 512              ;Temp Bit $T9
        T_10 == 1024            ;Temp Bit $T10
        T_11 == 2048            ;Temp Bit $T11
        T_12 == 4096            ;Temp Bit $T12
        T_13 == 8192            ;Temp Bit $T13
        T_14 == 16384           ;Temp Bit $T14
        T_15 == 32768           ;Temp Bit $T15
        T_16 == 1               ;Temp Bit $T16
        T_17 == 2               ;Temp Bit $T17
        T_18 == 4               ;Temp Bit $T18
        T_19 == 8               ;Temp Bit $T19
        T_20 == 16              ;Temp Bit $T20
        T_21 == 32              ;Temp Bit $T21
        T_22 == 64              ;Temp Bit $T22
        T_23 == 128             ;Temp Bit $T23
        T_24 == 256             ;Temp Bit $T24
        T_25 == 512             ;Temp Bit $T25
        T_26 == 1024            ;Temp Bit $T26
        T_27 == 2048            ;Temp Bit $T27
        T_28 == 4096            ;Temp Bit $T28
        T_29 == 8192            ;Temp Bit $T29
        T_30 == 16384           ;Temp Bit $T30
        T_31 == 32768           ;Temp Bit $T31


        C_0 == 1                ;Command Bit $C0
        C_1 == 2                ;Command Bit $C1
        C_2 == 4                ;Command Bit $C2
        C_3 == 8                ;Command Bit $C3
        C_4 == 16               ;Command Bit $C4
        C_5 == 32               ;Command Bit $C5
        C_6 == 64               ;Command Bit $C6
        C_7 == 128              ;Command Bit $C7


        S_0 == 1                ;Status Bit $S0
        S_1 == 2                ;Status Bit $S1
        S_2 == 4                ;Status Bit $S2
        S_3 == 8                ;Status Bit $S3
        S_4 == 16               ;Status Bit $S4
        S_5 == 32               ;Status Bit $S5
        S_6 == 64               ;Status Bit $S6
        S_7 == 128              ;Status Bit $S7


        F_0 == 1                ;Fault Bit $F0
        F_1 == 2                ;Fault Bit $F1


        M_0 == 1                ;Mode Bit $M0
        M_1 == 2                ;Mode Bit $M1
        M_2 == 4                ;Mode Bit $M2

;*******************************************************************************
;
;               SET ERROR SUBROUTINES
;
;*******************************************************************************

        ON ERROR GOSUB ERRSUB           ;define error handling routine
        ON HOLD GOSUB HOLDSUB           ;define hold handling routine


;*******************************************************************************
;*******************************************************************************
;               M A I N
;*******************************************************************************
;*******************************************************************************

;JT000  SA_STATE = 0
MAIN:
	;joh022 begin
;	IF (STRLEN(SEQ_STATUS) < 2) & SWAP_NO_HOLD_FG  THEN	
	; normally, would check to see if unit is in hold/ fail to do swap no hold BUT the program does not go to hold . . .
	IF (SWAP_NO_HOLD_FG) THEN	
		BEGIN
		SWAP_NO_HOLD_FG = 0
		ON SA_STATE GOTO DYN1SS,DYN2SS,DYN3SS,DYN4SS,DYN5SS,DYN6SS,DYN7SS,DYN8SS,DYN9SS,DYN10SS
		ON (SA_STATE-10) GOTO DYN11SS,DYN12SS,DYN13SS,DYN14SS,DYN15SS,DYN16SS,DYN17SS,DYN18SS,DYN19SS
		END
	SWAP_NO_HOLD_FG = 0
	;joh022 end





        ON SA_STATE GOTO DYN1,DYN2,DYN3,DYN4,DYN5,DYN6,DYN7,DYN8,DYN9,DYN10
;JT000	ON (SA_STATE-10) GOTO DYN11,DYN12,DYN13,DYN14,DYN15,DYN16,DYN17
        ON (SA_STATE-10) GOTO DYN11,DYN12,DYN13,DYN14,DYN15,DYN16,DYN17,DYN18,DYN19		;JT000

        GOSUB SAINIT

;==============================================================================
;                               SYSTEM OFF
;==============================================================================
DYN1:
        SA_STATUS = "SYSTEM OFF"
        SA_STATE = 1
        GOSUB STATEINIT                 ;STATE INITALIZE
        LAMP LAMP_ADI,LAMP_NUMBER,BLACK
        LAMP LAMP5_ADI,LAMP5_NUMBER,BLACK
        LAST_LAMP_STATE = BLACK
        GOSUB ADSO                      ;ALIGN DEVICES SYSTEM OFF
DYN1SS:

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 0
        ;PURGE COMMAND
        IF (SC_SA_PURGE_CMD) THEN
                BEGIN
                GOSUB CHKMAN            ;CHECK DEVICES IN MANUAL
                TIMERCLR PURGE_VENT_TMR  ;VCM018
                GOTO DYN2               ;PURGE STATE
                END

        ;TRANSITION 17
        ;MAINTENANCE COMMAND
        IF (SC_SA_MAINT_CMD) THEN
                GOTO DYN16              ;MAINTENANCE STATE

        ;TRANSITION 21
        ;CIP COMMAND
        IF (SC_SA_CAUS_CIP_CMD) THEN
                BEGIN
                GOSUB CHKMAN            ;CHECK DEVICES IN MANUAL
                GOTO DYN15              ;CAUSTIC CIP STATE
                END

        ;TRANSITION 23
        ;RINSE WITH DILUENT COMMAND
        IF (SC_SA_RIN_DIL_CMD) THEN
                BEGIN
                GOSUB CHKMAN            ;CHECK DEVICES IN MANUAL
                GOTO DYN17              ;RINSE WITH DILUENT STATE
                END

        WAIT 1
        GOTO DYN1SS


;==============================================================================
;                               PURGE
;==============================================================================
DYN2:
        SA_STATUS = "PURGE"
        SA_STATE = 2
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADPRG                     ;ALIGN DEVICES PURGE

        PRINT LOG_ADI," ADPRG DONE"
DYN2SS:
        GOSUB CONTCHK                   ;CONTINOUS CHECK
        GOSUB PURGE                     ;PURGE

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 1
        ;PURGE TIMER > PURGE TIME TO TANK READY
        IF (PURGE_DONE_FG) THEN
                GOTO DYN3               ;TANK READY STATE
        
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN2SS

;==============================================================================
;                               TANK READY
;==============================================================================
DYN3:
        SA_STATUS = "TANK READY"
        SA_STATE = 3
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADTR                      ;ALIGN DEVICES TANK READY

DYN3SS:
        IF !(TRAP_SEL_FG) THEN
                GOSUB SELECTHDR         ;SELECT HEADER
     ELSE    
                BEGIN           
                BRAND_CHK_FAIL_FG = 0
;                GOSUB BRANDCHK          ;BRAND CHECK ;mrp001                           
                BRAND_CHK_FAIL_FG = 1
                END
   
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB LEVELCHK                  ;LEVEL CHECK
        GOSUB CHTRAPCHK			;CHANGE TRAP HDR CHECK
        
   
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 2
;JT000  ;DILUENT PACK HEADER COMMAND
;JT000  IF (SC_SA_DPACK_HDR_CMD) THEN
        ;DILUENT PACK INLET COMMAND	;JT000
	IF (SC_SA_DPACK_IN_CMD) THEN	;JT000
                BEGIN
;                GOSUB BRANDCHK          ;BRAND CHECK ;mrp001
                GOTO DYN4               ;DILUENT PACK INLET STATE	JT000
                END

        ;TRANSITION 11
        ;DILUENT RINSE TANK COMMAND
        IF (SC_SA_DIL_RIN_CMD) THEN
                GOTO DYN12              ;DILUENT RINSE TANK STATE
                

        ;TRANSITION 15
        ;STUMP TO AGING COMMAND
        IF (SC_SA_STMP_AG_CMD) THEN
                GOTO DYN13              ;STUMP TO AGING STATE
                
        ;TRANSITION 19
        ;VENT COMMAND
        IF (SC_SA_VENT_CMD) THEN
                BEGIN
                TIMERCLR PURGE_VENT_TMR  ;VCM018
                GOTO DYN14              ;VENT STATE
                END
        
        ;TRANSITION 25
        ;ACID CIP COMMAND
        IF (SC_SA_ACID_CIP_CMD) THEN
                GOTO DYN15              ;ACID CIP STATE

        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN3SS

;==============================================================================
;                       DILUENT PACK INLET
;==============================================================================
DYN4:
;mw025fat        SA_STATUS = "DILUENT PACK INLET"	;JT000	   		
	SA_STATUS = "DILUENT PACK"		;mw025fat
        SA_STATE = 4
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADDPH                     ;ALIGN DEVICES DILUENT PACK INLET, THERE IS ANOTHER ADDPI SUBROUTINE

DYN4SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB CHTRAPCHK			;CHANGE TRAP HDR CHECK

	IF !(DIL_PACK_DONE_FG) THEN
                GOSUB DILPACK           ;DILUENT PACK INLET
;mw025 start
	;move DILUENT PACK FB here from FILL TANK state
	ELSE
		IF !(DPACK_FB_DONE_FG) THEN
                        GOSUB DILPKFB           ;DILUENT PACK FB
;mw025 end

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 3
        ;PACK BEER INLET COMMAND
;JT000	IF (SC_SA_PACK_IN_CMD) THEN
;	IF (PARK_TANK_CMD = 1) THEN	;mrp002
	IF (SC_SA_BPACK_IN_CMD) THEN	;JT000 mrp002
		BEGIN			;JT000, FOLLOWING FLAGS ARE FOR ENTERING PARK TANK STATE THE FIRST TIME.
	        DPACK_FB_DONE_FG = 0	;JT000
	        DIL_PUSH_IN_FG = 0	;JT000
		FB_PUSH_FG = 0		;JT000
		BEER_PACK_OUT_FG = 0	;JT000
		BEER_PACK_IN_FG = 0	;JT000
;                GOTO DYN18	;PARK TANK ;mrp001
					  GOTO DYN5		;mrp002
		END			;JT000
                
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN4SS
        

;==============================================================================
;                       PACK BEER INLET                         
;==============================================================================
DYN5:
        SA_STATUS = "PACK BEER INLET"
        SA_STATE = 5
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADPBI                     ;ALIGN DEVICES PACK BEER IN

DYN5SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB LEVELCHK                  ;LEVEL CHECK
        GOSUB BEERPACKI                 ;PACK BEER INLET

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 4
;JT000	;FILL TANK COMMAND
;JT000	IF (SC_SA_FILL_TANK_CMD) & (BEER_PACK_IN_FG) THEN
;JT000          GOTO DYN6               ;FILL TANK STATE

        ;TRANSITION ?			;JT000
        ;BEER PACK INLET DONE		;JT000
        IF (BEER_PACK_IN_FG) THEN	;JT000
                GOTO DYN18              ;PARK TANK STATE	JT000

        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN5SS


;==============================================================================
;                               FILL TANK
;==============================================================================
DYN6:
        SA_STATUS = "FILL TANK"
        SA_STATE = 6
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADFT                      ;ALIGN DEVICES FILL TANK
DYN6SS:
           IF AND('8502XV315':DEV_STAT,S_1) THEN
	        GOSUB FILLALARMS                ;VCM000
             ELSE
               BEGIN
               TIMEROFF TRAP_DEVIATION_TMR
               TIMERCLR TRAP_DEVIATION_TMR
               END
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB LEVELCHK                  ;LEVEL CHECK
;JT000	IF (FB_PUSH_FG) & (RESTART_FILL = 0) THEN
        IF (RESTART_FILL != 1) THEN					;JT000
                GOSUB RESTART                   			;PROPT OPERATOR FOR RESTART FILL
        IF !(FB_PUSH_FG) | (RESTART_FILL = 1) THEN
                BEGIN
                GOSUB FILLTANK                  ;FILL TANK
;mw025                IF !(DPACK_FB_DONE_FG) THEN
;mw025                        GOSUB DILPKFB           ;DILUENT PACK FB
                END

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 5
;JT000	;PACK BEER OUTLET COMMAND
;JT000	IF (SC_SA_PACK_OUT_CMD) THEN
;JT000	IF (SC_SA_BPACK_OUT_CMD) THEN	;JT000
;JT000		GOTO DYN7               ;PACK BEER OUTLET STATE 
                
;JT000	;TRANSITION 9
;JT000	;DILUENT PUSH INLET COMMAND
;JT000	IF (SC_SA_DIL_PUSH_CMD) THEN
;JT000		GOTO DYN10              ;DILUENT PUSH INLET STATE

        ;TRANSITION ??			;JT000
        ;PARK TANK COMMAND		;JT000
        IF (SC_SA_PARK_TANK_CMD) THEN	;JT000
                GOTO DYN18              ;PARK TANK STATE	JT000

        IF (STOP_TRAP_DEVIATION_FG = 1) THEN
				GOSUB UPDSKD                    ;UPDATE SKID KEY

		WAIT 1
        GOTO DYN6SS
        

;==============================================================================
;                       PACK BEER OUTLET
;==============================================================================
DYN7:
        SA_STATUS = "PACK BEER OUTLET"
        SA_STATE = 7
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB WRITEBRANDNUMBER		;get brand number			;joh022
	GOSUB ADPBO                     ;ALIGN DEVICES PACK BEER OUTLET

DYN7SS:
;JT000, NO LONGER FILLTANK DURING PACK BEER OUTLET
;JT000	GOSUB FILLTANK                  ;FILL TANK
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB LEVELCHK                  ;LEVEL CHECK	;JT000
;JT000	IF !(BEER_PACK_DONE_FG) THEN
        IF !(BEER_PACK_OUT_FG) THEN	;JT000
		BEGIN			;joh024
;joh024                GOSUB BEERPACKO         ;BEER PACK OUTLET
		GOSUB BEERPACKOSTEPS	;joh024
		END			;joh024
        
	GOSUB RELHVFAILCOND		;joh024
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 6
;JT000	;FILL/RELEASE COMMAND
;JT000	IF (SC_SA_FILL_REL_CMD) THEN
;JT000		GOTO DYN8               ;FILL/RELEASE STATE
                
        ;TRANSITION ?			;JT000
        ;PACK BEER OUTLET DONE		;JT000
        IF (BEER_PACK_OUT_FG) THEN	;JT000
                GOTO DYN18              ;PARK TANK STATE
                
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN7SS
        

;============================================================================== 
;                       FILL/RELEASE BEER                       
;============================================================================== 
DYN8:
        SA_STATUS = "FILL/RELEASE BEER"
        SA_STATE = 8
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB WRITEBRANDNUMBER		;get brand number			;joh022
        GOSUB ADFRB                     ;ALIGN DEVICES FILL/RELEASE BEER
        TIMERON STEP_TMR
DYN8SS:
        GOSUB RELALARMS                ;VCM000
           IF AND('8502XV315':DEV_STAT,S_1) THEN
	        GOSUB FILLALARMS                ;VCM000
             ELSE
               BEGIN
               TIMEROFF TRAP_DEVIATION_TMR
               TIMERCLR TRAP_DEVIATION_TMR
               END
        GOSUB CONTCHK                   ;CONTINUOUS CHECKS
        GOSUB FILLTANK                  ;FILL TANK
        GOSUB FILLREL                   ;FILL/RELEASE
	GOSUB PRMREQUESTCHK		;NONDRAFT PRM RELEASE COMMUNICATION		;joh022
	GOSUB RELPRMFAILCOND		;Release beer PRM Fail conditions		;joh022
        GOSUB LEVELCHK                  ;LEVEL CHECK    
        GOSUB RESCNTRPRESSCHK           ;RESUME COUNTER PRESSURE CHECK  ;JT000
	GOSUB DOMON			;D.O. monitoring		;acj014
	GOSUB CHTRAPCHK			;CHANGE TRAP HDR CHECK		;jac032

	IF (STEP_TMR > 120) THEN
           GOSUB TRENDRCOLL

        IF !(BEER_PACK_IN_FG) THEN
           GOSUB BEERPACKI                 ;PACK BEER INLET
;JMS002 START
		  IF (RELEASE_ALARM_ENABLE_FG = 1) THEN    ;Alarms disabled  ;JMS002
           BEGIN
           TIMERON OLBA_ENABLE_COUNT_DOWN_TMR
           OLBA_ENABLE_COUNT_DOWN = OLBA_ENABLE_COUNT_DOWN_TIME - OLBA_ENABLE_COUNT_DOWN_TMR
				IF (OLBA_ENABLE_COUNT_DOWN_TMR > OLBA_ENABLE_COUNT_DOWN_TIME)THEN
				BEGIN
            RELEASE_ALARM_ENABLE_FG = 0          ;Alarms enabled  ;JMS002
            TIMEROFF OLBA_ENABLE_COUNT_DOWN_TMR
            TIMERCLR OLBA_ENABLE_COUNT_DOWN_TMR
            OLBA_ENABLE_COUNT_DOWN = 0
				END
           END
;JMS002 END
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 7
;JT000	;FB LINE PUSH COMMAND
;JT000	IF (SC_SA_FB_PUSH_CMD) THEN
;JT000		GOTO DYN9               ;FB LINE PUSH STATE

;JT000	;TRANSITION 13
;JT000	;STUMP TO PR COMMAND
;JT000	IF (SC_SA_STMP_PR_CMD) THEN
;JT000		GOTO DYN11              ;STUMP TO PR STATE
                                

        ;TRANSITION ??			;JT000
        ;PARK TANK COMMAND		;JT000
        IF (SC_SA_PARK_TANK_CMD) THEN	;JT000
                GOTO DYN18              ;PARK TANK STATE	JT000

        ;RELEASE COMMAND
        IF (SC_SA_RELEASE_CMD) THEN
                GOTO DYN19		;RELEASE STATE

        IF (STOP_TRAP_DEVIATION_FG = 1) THEN
			  GOSUB UPDSKD                    ;UPDATE SKID KEY

		  WAIT 1
        ERROR_187_COUNT = 0 ;VCM012
        GOTO DYN8SS
        

;============================================================================== 
;                       FB LINE BEER PUSH               
;============================================================================== 
DYN9:
        SA_STATUS = "FB BEER PUSH"
        SA_STATE = 9
        GOSUB STATEINIT                 ;STATE INITALIZE

        FB_PUSH_FG = 0

        GOSUB ADFBP                     ;ALIGN DEVICES FB BEER PUSH

DYN9SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB FBPUSH                    ;FB DILUENT PUSH
        GOSUB LEVELCHK                  ;LEVEL CHECK
	GOSUB RELHVFAILCOND		;joh024

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 8
;JT000	;DILUENT DRAIN TIMER > DILUENT DRAIN TIME TO FILL TANK 
;JT000	IF (FB_PUSH_FG) THEN
;JT000		GOTO DYN6               ;FILL TANK STATE
        
        ;TRANSITION ?
        ;FB LINE BEER PUSH DONE
        IF (FB_PUSH_FG) THEN
                BEGIN
                PRINT LOG_ADI,"STOP FB PUSH BBLS = %5.2f",'8502LI3':AI_MEAS
                GOTO DYN18              ;PARK TANK STATE		;JT000
                END
        
        GOSUB UPDSKD                    ;UPDATE SKID KEY 
        WAIT 1
        GOTO DYN9SS
        

;============================================================================== 
;                       DILUENT PUSH INLET              
;============================================================================== 
DYN10:
        SA_STATUS = "DILUENT PUSH INLET"
        SA_STATE = 10
        GOSUB STATEINIT                 ;STATE INITALIZE

        DIL_PUSH_IN_FG = 0

        GOSUB ADDPI                     ;ALIGN DEVICES DILUENT PUSH INLET

DYN10SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB DILPUSH                   ;DILUENT PUSH 
        GOSUB LEVELCHK                  ;LEVEL CHECK    

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 10
;JT000	;DILUENT DRAIN TIMER > DILUENT DRAIN TIME TO TANK READY
;JT000	IF (DIL_PUSH_IN_FG) & !(STMP_RUN_FG) THEN       
;JT000		GOTO DYN3               ;TANK READY STATE

;JT000	;TRANSITION 27
;JT000	;STUMP RUN FLAG AND DILUENT PUSH INLET FLAG TO STUMP TO PR
;JT000	IF (DIL_PUSH_IN_FG) & (STMP_RUN_FG) THEN
;JT000		GOTO DYN11              ;STUMP TO PR STATE

        ;TRANSITION ??			;JT000
        ;DILUENT PUSH INLET DONE 	;JT000
        IF (DIL_PUSH_IN_FG) THEN       	;JT000
                BEGIN
                PRINT LOG_ADI,"STOP DIL PUSH BBLS = %5.2f",'8502LI3':AI_MEAS
                GOTO DYN18              ;PARK TANK STATE		;JT000
                END

        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN10SS
        

;============================================================================== 
;                       STUMP TO PR             
;============================================================================== 
DYN11:
        SA_STATUS = "STUMP TO PR"
        SA_STATE = 11
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADSPR                     ;ALIGN DEVICES STUMP TO PR

DYN11SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECKS      
        GOSUB STUMPPR                   ;STUMP TO PR
        GOSUB LEVELCHK                  ;LEVEL CHECK    

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 14
;JT000	;TANK LEVEL < EMPTY LEVEL TO FB LINE BEER PUSH
;JT000	IF (STMP_PR_FG) THEN    
;JT000		GOTO DYN9               ;FB LINE BEER PUSH STATE
        
;JT000	;TRANSITION 28
;JT000	;STUMP RUN FLAG AND NOT DILUENT PUSH INLET FLAG TO DILUENT PUSH INLET
;JT000	IF (STMP_RUN_FG) & !(DIL_PUSH_IN_FG) THEN
;JT000		GOTO DYN10              ;DILUENT PUSH INLET STATE

	;TRANSITION ??			;JT000
	;STUMP TO PR DONE		;JT000
	IF (STMP_PR_FG) THEN    	;JT000
		GOTO DYN18              ;PARK TANK STATE
        
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN11SS
        

;==============================================================================
;                       DILUENT RINSE TANK
;==============================================================================
DYN12:
        SA_STATUS = "DILUENT RINSE TANK"
        SA_STATE = 12
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADDRT                     ;ALIGN DEVICES DILUENT RINSE TANK

DYN12SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB DILRIN                    ;DILUENT RINSE TANK
        GOSUB LEVELCHK                  ;LEVEL CHECK

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 12
        ;(TANK LEVEL < EMPTY LEVEL) & (TANK RINSED 3 TIMES) TO TANK READY
        IF (EMPTY_FG) & (RIN_NUM = 3) THEN      
                BEGIN
                OLD_BRAND = BRAND_ID
                SA_2_MESSAGE = "DILUENT RINSE TANK: FINISHED"
                PRINT LOG_ADI, "%p",SA_2_MESSAGE
                GOTO DYN3               ;TANK READY STATE
                END

        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN12SS
        

;==============================================================================
;                       STUMP TO AGING
;==============================================================================
DYN13:
        SA_STATUS = "STUMP TO AGING"
        SA_STATE = 13
        GOSUB STATEINIT                 ;STATE INITALIZE
	GOSUB RESERVEDYNSTUMPCSR	;Reserve dynamic stump/csr shared equipment
        GOSUB ADSAG                     ;ALIGN DEVICES STUMP TO AGING

DYN13SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB STUMPAG                   ;STUMP TO AGING
        GOSUB LEVELCHK                  ;LEVEL CHECK
        
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

;JT000	;TRANSITION 16
;JT000	;TANK LEVEL < EMPTY LEVEL TO TANK READY
;JT000	IF (STMP_AG_FG) THEN    
;JT000		GOTO DYN3               ;TANK READY STATE
                
	;TRANSITION ??			;JT000
	;STUMP TO AGING DONE		;JT000
	IF (STMP_AG_FG) THEN    	;JT000
		GOTO DYN18              ;PARK TANK STATE	JT000

        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN13SS
        

;============================================================================== 
;                               VENT            
;============================================================================== 
DYN14:
        SA_STATUS = "VENT"
        SA_STATE = 14
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADV                       ;ALIGN DEVICES VENT
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033

DYN14SS:
        GOSUB VENT                      ;VENT 
        
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 20
        ;VENT TIMER > VENT TIME TO SYSTEM OFF
        IF (VENT_DONE_FG) THEN
                GOTO DYN1               ;SYSTEM OFF STATE

        GOSUB UPDSKD                    ;UPDATE SKID KEY                                
        WAIT 1
        GOTO DYN14SS
        
 

;============================================================================== 
;                               CIP             
;============================================================================== 
DYN15:
        IF (RUN_ACID_CIP_FG) THEN
                SA_STATUS = "ACID CIP"
        ELSE
                SA_STATUS = "CAUSTIC CIP"
        SA_STATE = 15
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033

;JT000  GOSUB STATEINIT                 ;STATE INITALIZE
;JT000  GOSUB ADCIP                     ;ALIGN DEVICES CIP

DYN15SS:
;JT000  GOSUB CONTCHK                   ;CONTINUOUS CHECK
;JT000  GOSUB CIPCNTRL                  ;CIP CONTROL
;JT000  GOSUB SEATCIP                   ;SEATCIP
;JT000  GOSUB LEVELCHK                  ;LEVEL CHECK

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 22 (CAUSTIC) & TRANSITION 26 (ACID)
        ;PHENO CHECK OK TO SYSTEM OFF OR TANK READY(ACID)
        IF (PGMSTAT("DYNRELCIP") = NOT_RUNNING) THEN
                IF (RUN_ACID_CIP_FG) THEN
                        GOTO DYN3               ;ACID CIP RETURNS TO TANK READY
                ELSE
                        GOTO DYN1               ;CAUSTIC CIP RETURNS TO SYSTEM OFF

        ;ABORT CIP COMMAND
        IF (SC_SA_ABORT_CMD) THEN
                BEGIN
                SA_2_MESSAGE = "ABORTING CIP"
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
                IF (RUN_ACID_CIP_FG) THEN
                        GOTO DYN3               ;ACID CIP RETURNS TO TANK READY
                ELSE
                        GOTO DYN1               ;CAUSTIC CIP RETURNS TO SYSTEM OFF
                END
                

        WAIT 1
        GOTO DYN15SS
                

;==============================================================================
;                               MAINTENANCE
;==============================================================================
DYN16:
        SA_STATUS = "MAINTENANCE"
        SA_STATE = 16
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADMAINT                   ;ALIGN DEVICES MAINTENANCE

DYN16SS:
        ;NO STEADY STATE ACTIONS
        
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 18
        ;SYSTEM OFF COMMAND
        IF (SC_SA_OFF_CMD) THEN 
                GOTO DYN1               ;SYSTEM OFF STATE
                
        WAIT 1
        GOTO DYN16SS
        


;============================================================================== 
;                       RINSE WITH DILUENT              
;============================================================================== 
DYN17:
        SA_STATUS = "RINSE WITH DILUENT"
        SA_STATE = 17
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADRWD                     ;ALIGN DEVICES RINSE WITH DILUENT

DYN17SS:
        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB DILRIN                    ;RINSE WITH DILUENT
        GOSUB LEVELCHK                  ;LEVEL CHECK

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION 24
        ;(TANK LEVEL < EMPTY LEVEL) & (TANK RINSED 3 TIMES) TO SYSTEM OFF
        IF (EMPTY_FG) & (RIN_NUM = 3) THEN      
                BEGIN
                SA_2_MESSAGE = "RINSE WITH DILUENT: FINISHED"
                PRINT LOG_ADI, "%p",SA_2_MESSAGE        
                GOTO DYN1               ;SYSTEM OFF STATE
                END

        WAIT 1
        GOTO DYN17SS
        

;==============================================================================
;                               PARK TANK		JT000, NEW STATE
;==============================================================================
DYN18:
        SA_STATUS = "PARK TANK"
        SA_STATE = 18
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB ADPT                      ;ALIGN DEVICES PARK TANK

DYN18SS:

        GOSUB CONTCHK                   ;CONTINUOUS CHECK
        GOSUB LEVELCHK                  ;LEVEL CHECK
	GOSUB CHTRAPCHK			;CHANGE TRAP HDR CHECK

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION ?
        ;TANK READY COMMAND
	IF (SC_SA_TANK_READY_CMD) THEN
                GOTO DYN3               ;TANK READY STATE

        ;TRANSITION ?
        ;BEER PACK INLET COMMAND
	IF (SC_SA_BPACK_IN_CMD) THEN
      BEGIN
      GOSUB BRANDCHK                  ;Brand Check ;mrp001
      GOTO DYN5               ;BEER PACK INLET STATE
      END

        ;TRANSITION ?
        ;DILUENT PUSH INLET COMMAND
        IF (SC_SA_DIL_PUSH_CMD) THEN
                BEGIN
                START_PUSH_BBLS = '8502LI3':AI_MEAS
                PRINT LOG_ADI,"START DIL PUSH BBLS = %5.2f",START_PUSH_BBLS
                GOTO DYN10              ;DILUENT PUSH INLET STATE
                END

        ;TRANSITION ?
        ;FILL TANK COMMAND
        IF (SC_SA_FILL_TANK_CMD) & (BEER_PACK_IN_FG) THEN
                GOTO DYN6               ;FILL TANK STATE
                
        ;TRANSITION ?
        ;PACK BEER OUTLET COMMAND
        IF (SC_SA_BPACK_OUT_CMD) THEN	;JT000
		BEGIN				;joh024
		PUTMANL DYN1_FLOW_BATCH		;joh024
		WAIT 2				;joh024
		PUTAUTO DYN1_FLOW_BATCH		;joh024
		;
                GOTO DYN7               ;PACK BEER OUTLET STATE 
		END				;joh024
                
        ;TRANSITION ?
        ;FILL/RELEASE COMMAND
        IF (SC_SA_FILL_REL_CMD) THEN
                GOTO DYN8               ;FILL/RELEASE STATE
                
        ;TRANSITION ?
        ;FB LINE PUSH COMMAND
        IF (SC_SA_FB_PUSH_CMD) THEN
                BEGIN
                START_PUSH_BBLS = '8502LI3':AI_MEAS
                PRINT LOG_ADI,"START FB PUSH BBLS = %5.2f",START_PUSH_BBLS
                GOTO DYN9               ;FB LINE PUSH STATE
                END

        ;TRANSITION ?
        ;STUMP TO PR COMMAND
        IF (SC_SA_STMP_PR_CMD) THEN
                GOTO DYN11              ;STUMP TO PR STATE
                                
        ;TRANSITION ?
        ;STUMP TO AGING COMMAND
        IF (SC_SA_STMP_AG_CMD) THEN
                GOTO DYN13              ;STUMP TO AGING STATE
                
        ;TRANSITION ?
        ;RELEASE COMMAND
        IF (SC_SA_RELEASE_CMD) THEN
                GOTO DYN19		;RELEASE STATE
                
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        GOTO DYN18SS

;============================================================================== 
;                       RELEASE BEER	JT000, NEW STATE	DYN19
;============================================================================== 
DYN19:
        SA_STATUS = "RELEASE BEER"
        SA_STATE =19
        GOSUB STATEINIT                 ;STATE INITALIZE
        GOSUB WRITEBRANDNUMBER		;get brand number			;joh022
        GOSUB ADRB                     	;ALIGN DEVICES RELEASE BEER
        TIMERON STEP_TMR

DYN19SS:
        GOSUB RELALARMS                ;VCM000
        GOSUB CONTCHK                   ;CONTINUOUS CHECKS
        GOSUB RELEASE                   ;RELEASE
        GOSUB LEVELCHK                  ;LEVEL CHECK    
        GOSUB RESCNTRPRESSCHK           ;RESUME COUNTER PRESSURE CHECK  ;JT000
	GOSUB CHTRAPCHK			;CHANGE TRAP HDR CHECK
	GOSUB DOMON			;D.O. monitoring		;acj014
	GOSUB PRMREQUESTCHK		;NONDRAFT PRM RELEASE COMMUNICATION		;joh022
	GOSUB RELPRMFAILCOND		;Release beer PRM Fail conditions		;joh022

	IF (STEP_TMR > 120) THEN
           GOSUB TRENDRCOLL

;JMS002 START
		  IF (RELEASE_ALARM_ENABLE_FG = 1) THEN       ;Alarms disabled  ;JMS002
           BEGIN
           TIMERON OLBA_ENABLE_COUNT_DOWN_TMR
           OLBA_ENABLE_COUNT_DOWN = OLBA_ENABLE_COUNT_DOWN_TIME - OLBA_ENABLE_COUNT_DOWN_TMR
				IF (OLBA_ENABLE_COUNT_DOWN_TMR > OLBA_ENABLE_COUNT_DOWN_TIME)THEN
				BEGIN
            RELEASE_ALARM_ENABLE_FG = 0             ;Alarms enabled  ;JMS002
            TIMEROFF OLBA_ENABLE_COUNT_DOWN_TMR
            TIMERCLR OLBA_ENABLE_COUNT_DOWN_TMR
            OLBA_ENABLE_COUNT_DOWN = 0
				END
           END
;JMS002 END

        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        ;TRANSITION ??			;JT000
        ;PARK TANK COMMAND		;JT000
        IF (SC_SA_PARK_TANK_CMD) THEN	;JT000
                GOTO DYN18              ;PARK TANK STATE	JT000

        ;FILL/RELEASE COMMAND
        IF (SC_SA_FILL_REL_CMD) THEN
                GOTO DYN8               ;FILL/RELEASE STATE
                
        GOSUB UPDSKD                    ;UPDATE SKID KEY
        WAIT 1
        ERROR_187_COUNT = 0 ;VCM012
        GOTO DYN19SS
        

;==============================================================================
;                               HOLD
;==============================================================================
HOLDSUB:
        SEQ_STATUS = "HOLD"  
	DYNREL_FILL_OK_FG_ALLOF6 = 0
;ldk029	LAST_SA_STATUS = SA_STATUS		;mw027
;ldk029	MCMS_STATUS_PTR = 3		;mw027
        HRSCLR


         STACKCLR  ;VCM003
;        ON ERROR GOSUB ERRSTK
;        FOR STK_CNT = 1 TO 10 STEP 1
;                RETCLR
;        NEXT STK_CNT
;        GOTO ENDSTK
;
;ERRSTK:
;        ERSCLR
;
;ENDSTK:
;        ON ERROR GOSUB ERRSUB

        LAMP LAMP_ADI,LAMP_NUMBER,RED   ;SKD FLASH RED
        LAMP LAMP5_ADI,LAMP5_NUMBER,RED
        LAST_LAMP_STATE = RED
        PRINT LOG_ADI,"IN HOLD STATE"

        IF (SA_STATE = 8) | (SA_STATE = 19) THEN  ;Release state    
	        DYNALARM_5F3_ALLOF6 = 1

        TIMEROFF PURGE_VENT_TMR

                GOSUB ADH               ;ALIGN DEVICES HOLD

HLOOP:           ;Trap not on stream
;POLBMXPROD                IF !(TRAP_FILL_OK_FG_POLCOM) THEN 
                IF !(TRAP_FILL_OK_FG_POLCOM_ALLOF6) THEN 	;POLBMXPROD
                        BEGIN
                        GOSUB C2XV315                   ;CLOSE 8502XV315
;mw025                        GOSUB C90XV15                   ;CLOSE TRAP VALVE
;mw025                        GOSUB C90XV16                   ;CLOSE TRAP VALVE
;mw025                        GOSUB C90XV17                   ;CLOSE TRAP VALVE
			GOSUB CLSDYRELTRAP1MVLV		;CLOSE TRAP 1 VALVE	;mw025
			GOSUB CLSDYRELTRAP2MVLV		;CLOSE TRAP 2 VALVE	;mw025
			GOSUB CLSDYRELTRAP3MVLV		;CLOSE TRAP 3 VALVE	;mw025
                        END
                
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------


        ;CONTINUE COMMAND
        IF (SC_SA_CONT_CMD) THEN 
                BEGIN
                DONT_FAIL_OUTLET_FG = 0 ;VCM016
                SET_DEV_RUN_OUTLET = 0
;ldk029;mw027 begin
;ldk029		IF COMPAR(SA_STATUS, LAST_SA_STATUS, STRLEN(SA_STATUS),NE) THEN
;ldk029			BEGIN
;ldk029			IF COMPAR(SA_STATUS,"SYSTEM OFF",10,EQ) THEN
;ldk029				MCMS_ABORTED_FG = 1
;ldk029			END
;ldk029;mw027 end
                GOTO MAIN               ;RETURN TO CURRENT STATE
                END
                   
        IF (SC_SA_OFF_CMD) THEN
                GOTO DYN1               ;SYSTEM OFF STATE
        WAIT 1
        GOTO HLOOP

;==============================================================================
;                               FAIL
;==============================================================================
FAIL:
        SEQ_STATUS = "FAIL"
        DYNREL_FILL_OK_FG_ALLOF6 = 0 
;ldk029	MCMS_STATUS_PTR = 2		;mw027
;        SET_DEV_RUN_OUTLET = 0
                                                       ;VCM016
        IF ((SA_STATE = 8) | (SA_STATE = 19)) & (DONT_FAIL_OUTLET_FG = 0) THEN  ;Release state    
	        DYNALARM_5F3_ALLOF6 = 1

        IF ((SA_STATE = 8) | (SA_STATE = 19)) & (DONT_FAIL_OUTLET_FG = 1) THEN  ;Release state    
            SET_DEV_RUN_OUTLET = 1           

         STACKCLR   ;VCM003
;        ON ERROR GOSUB ERRSTK2
;
;        FOR STK_CNT = 1 TO 10 STEP 1
;                RETCLR
;        NEXT STK_CNT
;        GOTO ENDSTK2
;
;ERRSTK2:
;        ERSCLR
;
;ENDSTK2:
;        ON ERROR GOSUB ERRSUB
        LAMP LAMP_ADI,LAMP_NUMBER,RED   ;SKD FLASH RED
        LAMP LAMP5_ADI,LAMP5_NUMBER,RED
        LAST_LAMP_STATE = RED

        PRINT LOG_ADI,"IN FAIL STATE"
;        PRINT LOG_ADI,"CONTCHK# %i",TEMP_INT
        SA_MESSAGE = FAIL_MSG
        PRINT LOG_ADI,"%p",FAIL_MSG

        TIMEROFF PURGE_VENT_TMR
        IF (DEV_IN_MANUAL_FG) THEN
                DEV_IN_MANUAL_FG = 0
        ELSE
                GOSUB ADF               ;ALIGN DEVICES FAIL
FLOOP:
                ;Trap not on stream                       ;VCM001
;POLBMXPROD                IF !(TRAP_FILL_OK_FG_POLCOM) THEN         ;VCM001
                IF !(TRAP_FILL_OK_FG_POLCOM_ALLOF6) THEN         ;POLBMXPROD
                        BEGIN                             ;VCM001
                        GOSUB C2XV315   ;CLOSE 8502XV315  ;VCM001
;mw025                        GOSUB C90XV15   ;CLOSE TRAP VALVE ;VCM001
;mw025                        GOSUB C90XV16   ;CLOSE TRAP VALVE ;VCM001               
;mw025                        GOSUB C90XV17   ;CLOSE TRAP VALVE ;VCM001  
			GOSUB CLSDYRELTRAP1MVLV		;CLOSE TRAP 1 VALVE	;mw025
			GOSUB CLSDYRELTRAP2MVLV		;CLOSE TRAP 2 VALVE	;mw025
			GOSUB CLSDYRELTRAP3MVLV		;CLOSE TRAP 3 VALVE	;mw025             
                        END                               ;VCM001
        ;-----------------------------------
        ;       TRANSITION CONDITIONS
        ;-----------------------------------

        GOSUB RESCNTRPRESSCHK           ;JT000

        ;CONTINUE COMMAND
        IF (SC_SA_CONT_CMD) THEN 
                BEGIN
                DEV_FAILED_FG =0
                FAIL_MSG = ""
                RELEASE_FAIL_MSG = ""  ;VCM017
                DONT_FAIL_OUTLET_FG = 0 ;VCM016
                SET_DEV_RUN_OUTLET = 0
                GOTO MAIN               ;RETURN TO CURRENT STATE
                END

        WAIT 1
        GOTO FLOOP

;*******************************************************************************
;*******************************************************************************
;               S U B R O U T I N E S
;*******************************************************************************
;*******************************************************************************

;==============================================================================
;                               SA INITIALIZE
;==============================================================================
SAINIT:
        SEQ_STATUS = ""
        SA_MESSAGE = ""
        SA_2_MESSAGE = ""
        SA_3_MESSAGE = ""
        RELEASE_FAIL_MSG = ""  ;VCM017
        FAIL_MSG = ""
        ERROR_STRING = ""
        QUERY_MESSAGE = ""
        DEV_FAILED_FG = 0
        TEMP_INT = 0
        SKID_FG = 0
        RESTART_FILL = 0        
        GOSUB CLRCMDS                   ;CLEAR COMMANDS

        TIMEROFF IBAD_TMR               
        TIMEROFF STEP_TMR               
        TIMEROFF SEAT_TMR                       
        TIMEROFF PACK_TMR       
        TIMEROFF CONDCTVTY_TMR                  
        TIMEROFF SUS_1_TMR
        TIMEROFF SUS_2_TMR                      
        TIMEROFF SUS_3_TMR              
        TIMEROFF SUS_4_TMR                      
        TIMEROFF SUS_5_TMR   ;VCM005                   
        TIMEROFF SUS_6_TMR   ;VCM005                   
        TIMEROFF SUS_7_TMR   ;VCM005                   
        TIMEROFF SUS_8_TMR   ;VCM009                   
        TIMEROFF SUS_9_TMR   ;VCM011                   
        TIMEROFF MATRIX_TMR                     
        TIMEROFF DELAY_TMR                      
        TIMEROFF BOTTOM_TMR                     
        TIMEROFF CIRC_TMR                       
        TIMEROFF DRAIN_TMR
        TIMEROFF PURGE_VENT_TMR                 
        TIMEROFF TRAP_DEVIATION_TMR  ;VCM000
        TIMEROFF PAAR_SONIC_VEL_CHANGE_TMR   ;VCM013
        TIMEROFF PUMP_ON_TMR
        TIMEROFF PUMP_OFF_TMR
        TIMEROFF OLBA_ENABLE_COUNT_DOWN_TMR  ;JMS002
  
               
        TIMERCLR IBAD_TMR               
        TIMERCLR STEP_TMR               
        TIMERCLR SEAT_TMR                       
        TIMERCLR PACK_TMR       
        TIMERCLR CONDCTVTY_TMR                  
        TIMERCLR SUS_1_TMR
        TIMERCLR SUS_2_TMR                      
        TIMERCLR SUS_3_TMR              
        TIMERCLR SUS_4_TMR                      
        TIMERCLR SUS_5_TMR   ;VCM005                   
        TIMERCLR SUS_6_TMR   ;VCM005                   
        TIMERCLR SUS_7_TMR   ;VCM005                   
        TIMERCLR SUS_8_TMR   ;VCM009                   
        TIMERCLR SUS_9_TMR   ;VCM011                  
        TIMERCLR PAAR_SONIC_VEL_CHANGE_TMR    ;VCM013
        TIMERCLR MATRIX_TMR                     
        TIMERCLR DELAY_TMR                      
        TIMERCLR BOTTOM_TMR                     
        TIMERCLR CIRC_TMR                       
        TIMERCLR DRAIN_TMR
        TIMERCLR PURGE_VENT_TMR                 
        TIMERCLR TRAP_DEVIATION_TMR  ;VCM000
        TIMERCLR PUMP_ON_TMR
        TIMERCLR PUMP_OFF_TMR
        TIMERCLR OLBA_ENABLE_COUNT_DOWN_TMR  ;JMS002

        RETURN

;==============================================================================
;                               STATE INITIALIZE
;==============================================================================
STATEINIT:
        SEQ_STATUS = ""
        SA_MESSAGE = ""
        SA_2_MESSAGE = ""
        SA_3_MESSAGE = ""
        RELEASE_FAIL_MSG = ""  ;VCM017
        FAIL_MSG = ""
        ERROR_STRING = ""
        QUERY_MESSAGE = ""
        SKID_FG = 0
        STOP_TRAP_DEVIATION_FG = 1 ;OK VCM000 
        ERROR_187_COUNT = 0 ;VCM012
	  	  DYN_5F3_SA_STATUS_ALLOF6 = SA_STATUS
        PRINT LOG_ADI,"%p",SA_STATUS

        GOSUB CLRCMDS                   		;CLEAR COMMANDS 
  
;ldk029	IF SA_STATE > 1 THEN		;mw027
;ldk029		MCMS_ABORTED_FG = 0		;mw027                                                    

        LAMP LAMP_ADI,LAMP_NUMBER,GREEN
        LAMP LAMP5_ADI,LAMP5_NUMBER,GREEN
        LAST_LAMP_STATE = GREEN

        IF (PURGE_DONE_FG) & !(CNTRPRESS_FG) THEN
                GOSUB CNTRPRESS         		;COUNTERPRESSURE
        DYNREL_FILL_OK_FG_ALLOF6 = 0
        DONT_FAIL_OUTLET_FG = 0  ;VCM016
        SET_DEV_RUN_OUTLET = 0
	SUB_STEP_INT = 0				;joh022
   TIMEROFF CONDCTVTY_TMR
   TIMERCLR CONDCTVTY_TMR
	TIMEROFF SUS_1_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_1_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_2_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_2_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_3_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_3_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_4_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_4_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_5_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_5_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_6_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_6_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_7_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_7_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_8_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_8_TMR		;Clear sustained condition timer 
	TIMEROFF SUS_9_TMR		;Turnoff sustained condition timer 
	TIMERCLR SUS_9_TMR		;Clear sustained condition timer 
        TIMEROFF PAAR_SONIC_VEL_CHANGE_TMR   ;VCM013
        TIMERCLR PAAR_SONIC_VEL_CHANGE_TMR   ;VCM013

;	TIMEROFF STEP_TMR				;JT000
	TIMERCLR STEP_TMR				;JT000
	TIMERON STEP_TMR				;JT000

   TIMEROFF OLBA_ENABLE_COUNT_DOWN_TMR  ;JMS002
   TIMERCLR OLBA_ENABLE_COUNT_DOWN_TMR  ;JMS002
   OLBA_ENABLE_COUNT_DOWN = 0           ;JMS002
        TRNGRPDIS "DYNOUT_1"
;        IF (DYNALARM_5F3_ALLOF6 = 1) THEN ;VCM006
;	        TURNOFF 'DYNALARM'

        DYNALARM_5F3_ALLOF6 = 0

        TIMERCLR TRENDR_COLL_TMR   ;OUTPUT TO "L" PLC
        TIMEROFF TRENDR_COLL_TMR
        IF (SA_STATE != 13) THEN
           GOSUB RELEASEDYNSTUMPCSR

	DOMON_STAT_INT = 0		;acj014
;POLBMXPROD	DOMON_STAT_DM131_ALLOF5 = 0	;acj014
	DOMON_STAT_DM131_ALLOF6 = 0	;POLBMXPROD

;ldk000 start
	;In Purge, Diluent Rinse Tank, Stump to PR, reset the inlet OLBA averages
	IF (SA_STATE = 2) | (SA_STATE = 11) | (SA_STATE = 12) THEN
		GOSUB CLEARDYNAMICAVG
;ldk000 finish
;ldk029	GOSUB UPDATEMCMS		;mw027

        RETURN

;==============================================================================
;                               CLEAR COMMANDS
;==============================================================================
CLRCMDS:
        SC_SA_OFF_CMD = 0
        SC_SA_PURGE_CMD = 0
        SC_SA_CONT_CMD = 0
        SC_SA_DIL_RIN_CMD = 0
;JT000	SC_SA_DPACK_HDR_CMD =0
        SC_SA_DPACK_IN_CMD =0			;JT000
;JT000	SC_SA_PACK_IN_CMD = 0
        SC_SA_BPACK_IN_CMD = 0			;JT000
        SC_SA_FILL_TANK_CMD = 0
;JT000  SC_SA_DPACK_FB_CMD = 0
        SC_SA_RES_CNTRPRESS_CMD = 0             ;JT000
;JT000	SC_SA_PACK_OUT_CMD = 0
        SC_SA_BPACK_OUT_CMD = 0			;JT000
        SC_SA_FILL_REL_CMD = 0
        SC_SA_RELEASE_CMD = 0			;JT000
        SC_SA_FB_PUSH_CMD = 0
        SC_SA_DIL_PUSH_CMD = 0
	SC_SA_STMP_PR_CMD = 0
	SC_SA_STMP_AG_CMD = 0
        SC_SA_VENT_CMD = 0
        SC_SA_RIN_DIL_CMD = 0
	SC_SA_PARK_TANK_CMD = 0			;JT000
	SC_SA_TANK_READY_CMD = 0		;JT000
        CNTRPRESS_CMD = 0
        SC_SA_ATNS_CMD = 0
        SC_SA_HOLD_CMD = 0
        SC_SA_ABORT_CMD = 0
        SC_SA_CAUS_CIP_CMD = 0
        SC_SA_ACID_CIP_CMD = 0

        RETURN

;==============================================================================
;                               UPDATE SKID
;==============================================================================
UPDSKD:
        IF (STRLEN(ERROR_STRING) != 0) | (STRLEN(ERROR_STRING2) != 0) THEN
                BEGIN
                LAMP LAMP_ADI,LAMP_NUMBER, YELLOW
	        LAMP LAMP5_ADI,LAMP5_NUMBER,YELLOW
                LAST_LAMP_STATE = YELLOW
                SKID_FG = 1
                END
        ELSE 
                IF ((STRLEN(ERROR_STRING) = 0)&(STRLEN(ERROR_STRING2) = 0)&(LAST_LAMP_STATE != GREEN)) THEN
                        BEGIN
                        LAMP LAMP_ADI,LAMP_NUMBER, GREEN
                        LAMP LAMP5_ADI,LAMP5_NUMBER, GREEN
                        LAST_LAMP_STATE = GREEN
                        END
        

                SA_MESSAGE = ERROR_STRING       
                ERROR_STRING = ""
                IF (STRLEN(ERROR_STRING2) != 0) THEN
	                SA_2_MESSAGE = ERROR_STRING2       
                      ELSE
                        IF (STRLEN(ERROR_STRING2) = 0) & (COMPAR(SA_2_MESSAGE,"STOP FILLERS",12,EQ)) THEN
                           SA_2_MESSAGE = ""       

                ERROR_STRING2 = ""
                SKID_FG = 0

        RETURN

;==============================================================================
;                               COUNTERPRESSURE
;==============================================================================
CNTRPRESS:
        QUERY_MESSAGE = "RECONNECT TO CNTRPRESS? (Y)"
        IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                BEGIN
                SA_2_MESSAGE = "RECONNECTING CNTRPRESS"
                OPER_RESPONSE = ""
                QUERY_MESSAGE = ""
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
                GOSUB O2XV31            ;OPEN 8502XV31
                END
        
        RETURN

;==============================================================================
;                       CHECK DEVICES IN MANUAL
;==============================================================================
CHKMAN:
        ASSIGN DEV_PTR = '8502XV31'
        FAIL_MSG = "8502XV31 CNTRPRESS VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV32'
        FAIL_MSG = "8502XV32 VENT VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV310'
        FAIL_MSG = "8502XV310 CSS/DT VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV314'
        FAIL_MSG = "8502XV314 CSS VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV315'
        FAIL_MSG = "8502XV315 INLET VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV316'
        FAIL_MSG = "8502XV316 INLET DRAIN MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV317'
        FAIL_MSG = "8502XV317 CO2 B-B VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV318'
        FAIL_MSG = "8502XV318 CO2 B-B VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8502XV319'
        FAIL_MSG = "8502XV319 CO2 B-B VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK

        ASSIGN DEV_PTR = '8502XV320'
        FAIL_MSG = "8502XV320 CSS VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV11'
        FAIL_MSG = "8690XV11 FB/CSR VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;joh024        ASSIGN DEV_PTR = '8690XV12'
;joh024        FAIL_MSG = "8690XV12 PKG VALVE MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
        
;joh024        ASSIGN DEV_PTR = '8690XV13'
;joh024        FAIL_MSG = "8690XV13 PKG VALVE MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
        
;mw025        ASSIGN DEV_PTR = '8690XV14'
;mw025        FAIL_MSG = "8690XV14 FB/DT VALVE MANL"
        ASSIGN DEV_PTR = MLD_PRM_DILUENT_VLV	;mw025
        FAIL_MSG = "MLDXV009 FB/DT VALVE MANL"  ;mw025
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;mw025        ASSIGN DEV_PTR = '8690XV15'
;mw025        FAIL_MSG = "8690XV15 TRAP1 VALVE MANL"
	ASSIGN DEV_PTR = MLD_PRM_TRAP1_FILL_VLV			;mw025
        FAIL_MSG = "MLDXV100 TRAP1 VALVE MANL"          	;mw025
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;mw025        ASSIGN DEV_PTR = '8690XV16'
;mw025        FAIL_MSG = "8690XV16 TRAP2 VALVE MANL"
        ASSIGN DEV_PTR = MLD_PRM_TRAP2_FILL_VLV		;mw025
        FAIL_MSG = "MLDXV200 TRAP2 VALVE MANL"		;mw025
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;mw025        ASSIGN DEV_PTR = '8690XV17'
;mw025        FAIL_MSG = "8690XV17 TRAP3 VALVE MANL"
        ASSIGN DEV_PTR = MLD_PRM_TRAP3_FILL_VLV		;mw025
        FAIL_MSG = "MLDXV300 TRAP3 VALVE MANL"          ;mw025
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;mw025        ASSIGN DEV_PTR = '8690XV18'
;mw025        FAIL_MSG = "8690XV18 FB BLOCK VALVE MANL"
;mw025        GOSUB MANLCHK                   ;MANUAL CHECK
        
;joh024        ASSIGN DEV_PTR = '8690XV19'
;joh024        FAIL_MSG = "8690XV19 FB/DT BLK VLV MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
        
;joh024        ASSIGN DEV_PTR = '8690XV20'
;joh024        FAIL_MSG = "8690XV20 FB DRAIN VALVE MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
                                            
;joh024        ASSIGN DEV_PTR = '8690XV21'
;joh024        FAIL_MSG = "8690XV21 FB DRAIN VALVE MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
        
;joh024        ASSIGN DEV_PTR = '8690XV22'
;joh024        FAIL_MSG = "8690XV22 FB BLOCK VALVE MANL"
;joh024        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV23'
        FAIL_MSG = "8690XV23 CSR BLOCK VLV MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV24'
        FAIL_MSG = "8690XV24 CSR DRAIN VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV25'
        FAIL_MSG = "8690XV25 FB BLOCK VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV26'
        FAIL_MSG = "8690XV26 CSR BLOCK VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV27'
        FAIL_MSG = "8690XV27 FB DRAIN VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV28'
        FAIL_MSG = "8690XV28 VENT VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690XV29'
        FAIL_MSG = "8690XV29 OUTLET VALVE MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;VCM007        ASSIGN DEV_PTR = '8690XV38'
;        FAIL_MSG = "8690XV38 FB SHUT-OFF VLV MANL"
;        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690P11'
        FAIL_MSG = "8690P11 BEER FEED PUMP MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
        ASSIGN DEV_PTR = '8690P12'
        FAIL_MSG = "8690P12 CSR/STUMP PUMP MANL"
        GOSUB MANLCHK                   ;MANUAL CHECK
        
;VCM020        ASSIGN DEV_PTR = '8690P13'
;VCM020        FAIL_MSG = "8690P13 BEER CIRC PUMP MANL"
;VCM020        GOSUB MANLCHK                   ;MANUAL CHECK
        
        RETURN

;==============================================================================
;                               MANUAL CHECK
;==============================================================================
MANLCHK:
        DEV_IN_MANUAL_FG = 0                            

        IF !AND(DEV_PTR:DEV_MODE,M_0) THEN
                BEGIN
                DEV_IN_MANUAL_FG = 1                    
                GOTO FAIL                       
                END
        RETURN                                  

;===============================================================================
;		RESERVE DYNAMIC STUMP/CSR SHARED EQUIPMENT
;===============================================================================
RESERVEDYNSTUMPCSR:
	ASSIGN SA_TMP_PTR = DYN_STUMP_CSR_RESERVE_SG_ALLOF6	;Reservation string
	SA_TMP_SG = UNIT_SG					;Identifier string
	SA_TMP1_SG = "DYNXX STUMP/CSR"				;System to be reserved (16 char maximum)
	WAIT_FOR_RESERVE_FG = 1					;Wait for reserve flag (if already owned by another: 0=fail, 1=wait)
	GOSUB STMPRESERVE
	RETURN

;===============================================================================
;		RELEASE DYNAMIC STUMP/CSR SHARED EQUIPMENT
;===============================================================================
RELEASEDYNSTUMPCSR:
	ASSIGN SA_TMP_PTR = DYN_STUMP_CSR_RESERVE_SG_ALLOF6	;Reservation string
	SA_TMP_SG = UNIT_SG					;Identifier string
	SA_TMP1_SG = "DYNXX STUMP/CSR"				;System to be reserved (16 char maximum)
	GOSUB STMPRELEASE
	RETURN

;===============================================================================
;		RESERVE SYSTEM (STANDARD #INCLUDE)
;===============================================================================
STMPRESERVE:
	SA_TMP_INT = (STRLEN(SA_TMP_SG))
	EXPR1 = (COMPAR(SA_TMP_PTR,SA_TMP_SG,SA_TMP_INT,NE))
	IF (EXPR1 | (SA_TMP_INT != STRLEN(SA_TMP_PTR))) THEN	;If not already the owner
		BEGIN
		IF ((STRLEN(SA_TMP_PTR) > 0) & COMPAR(SA_TMP_PTR," ",1,NE)) THEN	;If reserved by another
			BEGIN
			IF (!WAIT_FOR_RESERVE_FG) THEN			;If not wait for reserve
				BEGIN
				SA_TMP_INT = APPEND(FAIL_MSG,SA_TMP1_SG," ALREADY OWNED")
				GOTO FAIL
				END
			SA_TMP_INT = APPEND(SA_MESSAGE,"RESERVING ",SA_TMP1_SG)
				;Waituntil available
			WAITUNTIL ((STRLEN(SA_TMP_PTR) = 0) | COMPAR(SA_TMP_PTR," ",1,EQ))
			END
		SA_TMP_PTR = SA_TMP_SG		;Reserve system
		PRINT LOG_ADI,"%p RESERVED BY %p",SA_TMP1_SG,SA_TMP_SG
		END
	RETURN

;===============================================================================
;		RELEASE SYSTEM (STANDARD #INCLUDE)
;===============================================================================
STMPRELEASE:
	SA_TMP_INT = (STRLEN(SA_TMP_SG))
	EXPR1 = (COMPAR(SA_TMP_PTR,SA_TMP_SG,SA_TMP_INT,EQ))
	IF (EXPR1 & (SA_TMP_INT = STRLEN(SA_TMP_PTR))) THEN	;If the owner
		BEGIN
		SA_TMP_PTR = ""		;Release system
		PRINT LOG_ADI,"%p RELEASED BY %p",SA_TMP1_SG,SA_TMP_SG
		END
	RETURN

;==============================================================================
;                       ALIGN DEVICES SYSTEM OFF		DYN1
;==============================================================================
ADSO:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        PURGING_FG = 0
        PURGE_DONE_FG = 0
        INLET_PURGE_FG = 0
        INLET_PURGE_DONE_FG = 0 
        CNTRPRESS_FG = 0
        BRAND_ID = ""
        BRAND_ID_REQ = ""
        VENT_DONE_FG = 1
        TRAP_SEL_FG = 0
        TRAP_HDR_REQ = 0        
        TRAP_HDR_SEL_ALLOF6 = 4
        TRAP_HDR_DSP = 0        
        RIN_NUM = 0
        RELEASE_ALARM_ENABLE_FG = 1  ;Alarms disabled ;JMS002

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES PURGE			DYN2
;==============================================================================
ADPRG:
            IF (TRAP_SEL_FG = 0) THEN
                ASSIGN TRAP_VALVE_PTR = 'DUMMYPUMP'

        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        PURGING_FG = 0
        PURGE_DONE_FG = 0
        INLET_PURGE_FG = 0
        INLET_PURGE_DONE_FG = 0
        CNTRPRESS_FG = 0
        VENT_DONE_FG = 0
        RIN_NUM = 0
;VCM018        TIMERCLR PURGE_VENT_TMR
        TIMERON PURGE_VENT_TMR
        OPER_RESPONSE = ""

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                       ALIGN DEVICES TANK READY		DYN3
;==============================================================================
ADTR:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        STMP_PR_FG = 0
        DIL_PUSH_IN_FG = 0
        DIL_PACK_DONE_FG = 0
	BEER_PACK_IN_FG = 0	;JT000
	BEER_PACK_OUT_FG = 0	;JT000
	DPACK_FB_DONE_FG = 0	;JT000
	FB_PUSH_FG = 0		;JT000
        STMP_RUN_FG = 0
	DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
        STMP_AG_FG = 0
        RESTART_FILL = 0
        FB_PUSH_FG = 0
        RELEASE_ALARM_ENABLE_FG = 1  ;Alarms disabled  ;JMS002

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033

        RETURN

;==============================================================================
;JT000                  ALIGN DEVICES DILUENT PACK HEADER	
;                       ALIGN DEVICES DILUENT PACK INLET	DYN4
;==============================================================================
ADDPH:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        DPACK_FB_DONE_FG = 0	;JT000
        DIL_PUSH_IN_FG = 0	;JT000
	FB_PUSH_FG = 0		;JT000
	BEER_PACK_OUT_FG = 0	;JT000
	BEER_PACK_IN_FG = 0	;JT000
        DIL_PACK_DONE_FG = 0
	DPACK_FG = 0		;mw025
        TIMERCLR PACK_TMR
;mw025        TIMERON PACK_TMR        
        RELEASE_ALARM_ENABLE_FG = 1  ;Alarms disabled  ;JMS002

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                       ALIGN DEVICES PACK BEER INLET		DYN5
;==============================================================================
ADPBI:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
;JT000	DIL_PUSH_IN_FG = 0
	BEER_PACK_IN_FG = 0
        TIMERCLR SEAT_TMR
        TIMERCLR CONDCTVTY_TMR  

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                       ALIGN DEVICES FILL TANK			DYN6
;==============================================================================
ADFT:

        BRAND_ID = BRAND_ID_REQ
        DYN_5F3_BRAND_ID_ALLOF6 = BRAND_ID   ;VCM008

        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        TIMERCLR PACK_TMR
;JT000, NEXT STATEMENT WILL MAKE DILUENT PACK FB EVERY TIME TO FILL THE TANK
;JT000        DPACK_FB_DONE_FG = 0
        HIHI_LVL_FG = 0
        HI_LVL_FG = 0
        LO_LVL_FG = 0
        LOLO_LVL_FG = 0
        EMPTY_FG = 0
        DPACK_FG = 0

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033

        RETURN

;==============================================================================
;                       ALIGN DEVICES PACK BEER OUTLET		DYN7
;==============================================================================
ADPBO:
        GOSUB SETDEV2           ;SET DEVICES ARRANGEMENT 2
;JT000	BEER_PACK_DONE_FG = 0
        BEER_PACK_OUT_FG = 0	;JT000
;JT000	DPACK_FB_DONE_FG = 0
	FB_PUSH_FG = 0		;JT000
        RESTART_FILL = 0
        TIMERCLR CONDCTVTY_TMR
        TIMERCLR PACK_TMR

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                       ALIGN DEVICES FILL/RELEASE BEER		DYN8
;==============================================================================
ADFRB:
        GOSUB SETDEV2           ;SET DEVICES ARRANGEMENT 2
        FILL_REL_FG = 0
	RELEASE_FG = 0		;JT000
        OPER_RESPONSE = ""
        TRNGRPENA "DYNOUT_1"
        TIMERCLR TRENDR_COLL_TMR
        TIMERON TRENDR_COLL_TMR

	;
;joh024	IF (ENABLE_PRM_VLV_FG) THEN			;johtmp
		TURNON DYNREL_PRM_AVAIL_ACK		;joh022
;joh024	ELSE						;johtmp
;joh024		TURNOFF DYNREL_PRM_AVAIL_ACK		;johtmp
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
	;
        RETURN

;==============================================================================
;                       ALIGN DEVICES FB LINE BEER PUSH		DYN9
;==============================================================================
ADFBP:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        FB_PUSH_FG = 0
;JT000	BEER_PACK_DONE_FG = 0
        BEER_PACK_OUT_FG = 0	;JT000
        TIMERCLR CONDCTVTY_TMR
        TIMERCLR PACK_TMR        			;joh024
;mw025        TIMERON PACK_TMR        			;joh024
        STMP_RUN_FG = 0
	DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
        FILL_REL_FG = 0
	RELEASE_FG = 0

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES STUMP TO PR		DYN11
;==============================================================================
ADSPR:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
	BEFORE_STUMP_BBL = DYNREL_TNK_LVL:AI_MEAS 	;JT000
        OPER_RESPONSE = ""
;JT000	FILL_REL_FG = 0
;JT000	RELEASE_FG = 0
        PR_PACK_FG = 0
	STMP_RUN_FG = 0			;JT000
	DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
	STMP_PR_FG = 0			;JT000
;JT000	TIMERCLR STEP_TMR
        TIMEROFF PACK_TMR		;JT000
        TIMERCLR PACK_TMR		;JT000

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES DILUENT PUSH INLET	DYN10
;==============================================================================
ADDPI:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        BEER_PACK_IN_FG = 0
        TIMERCLR SEAT_TMR
        TIMERCLR CONDCTVTY_TMR
;JT000	IF !(STMP_RUN_FG) THEN
;JT000		BEGIN
;JT000		TRAP_SEL_FG = 0
;JT000		TRAP_HDR_REQ = 0        
;JT000		TRAP_HDR_SEL_ALLOF6 = 4
;JT000		TRAP_HDR_DSP = 0        
;JT000		END

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES DILUENT RINSE TANK	DYN12
;==============================================================================
ADDRT:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        RIN_NUM = 0     

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES STUMP TO AGING		DYN13
;==============================================================================
ADSAG:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
	BEFORE_STUMP_BBL = DYNREL_TNK_LVL:AI_MEAS 	;JT000
        STMP_RUN_FG = 0
	DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
        STMP_AG_FG = 0
        OPER_RESPONSE = ""
	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033
        
        RETURN

;==============================================================================
;                       ALIGN DEVICES VENT			DYN14
;==============================================================================
ADV:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        VENTING_FG = 0
        VENT_DONE_FG = 0
        DIL_PUSH_IN_FG = 0
        DIL_PACK_DONE_FG = 0
;VCM018        TIMERCLR PURGE_VENT_TMR
        TIMERON PURGE_VENT_TMR
        OPER_RESPONSE = ""

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                               ALIGN DEVICES CIP		DYN15
;JT000, FUNCTIONS HAD MOVED TO DYNRELCIP.SEQ & DYNCIPDEV.SEQ, 
;JT000, BECAUSE DYNRELSA.SEQ IS ABORTED DURING CIP
;==============================================================================
ADCIP:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033
        IF !(RUN_ACID_CIP_FG) THEN
                BEGIN
                PURGE_DONE_FG = 0
                CNTRPRESS_FG = 0
                END
        TIMERCLR SEAT_TMR
        TIMERCLR MATRIX_TMR


	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES MAINTENANCE		DYN16
;==============================================================================
ADMAINT:
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033
        PURGE_DONE_FG = 0
        CNTRPRESS_FG = 0

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN

;==============================================================================
;                       ALIGN DEVICES RINSE WITH DILUENT	DYN17
;==============================================================================
ADRWD:
	TURNOFF DYNREL_BMXF3_SEQ_START			;jac033
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        PURGE_DONE_FG = 0       
        CNTRPRESS_FG = 0
        RIN_NUM = 0

	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
        RETURN


;==============================================================================
;                       ALIGN DEVICES PARK TANK		JT000, NEW STATE, DYN18
;==============================================================================
ADPT:
            IF (TRAP_SEL_FG = 0) THEN
                ASSIGN TRAP_VALVE_PTR = 'DUMMYPUMP'
        GOSUB SETDEV1           ;SET DEVICES ARRANGEMENT 1
        RESTART_FILL = 0	;ALWAYS PROMPT OPERATOR BEFORE FILL
	STMP_RUN_FG = 0
	DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
	STMP_AG_FG = 0
	STMP_PR_FG = 0
        RELEASE_FG = 0
	FILL_REL_FG = 0
        RELEASE_ALARM_ENABLE_FG = 1  ;Alarms disabled   ;JMS002
        OPER_RESPONSE = ""
	TURNOFF DYNREL_PRM_AVAIL_ACK			;joh022
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        RETURN

;==============================================================================
;                       ALIGN DEVICES RELEASE BEER	JT000, NEW STATE, DYN19
;==============================================================================
ADRB:
        GOSUB SETDEV2           ;SET DEVICES ARRANGEMENT 2
        RELEASE_FG = 0
	FILL_REL_FG = 0
        OPER_RESPONSE = ""
        TRNGRPENA "DYNOUT_1"
        TIMERCLR TRENDR_COLL_TMR
        TIMERON TRENDR_COLL_TMR
        '8690FI1':IOS_TG:1 = 0
        '8690FI1':IOS_TG:2 = 0
        '8690FI1':IOS_TG:3 = 0
	;
;joh024	IF (ENABLE_PRM_VLV_FG) THEN			;johtmp
	TURNON DYNREL_PRM_AVAIL_ACK			;joh022
;joh024	ELSE						;johtmp
;joh024		TURNOFF DYNREL_PRM_AVAIL_ACK		;johtmp
	TURNOFF DYNREL_PRM_HOLD_REQ			;joh022
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
	;
        RETURN

;==============================================================================
;                               ALIGN DEVICES FAIL
;==============================================================================
ADF:
        TURNON 'DYNALARM'
        GOSUB SETDEV1

	IF (DYNREL_PRM_AVAIL_ACK:DOT_VAL = 1) THEN			;joh022
		TURNON DYNREL_PRM_HOLD_REQ				;joh022
        RETURN

;==============================================================================
;                               ALIGN DEVICES HOLD VCM001
;==============================================================================
ADH:
        GOSUB SETDEV3

	IF (DYNREL_PRM_AVAIL_ACK:DOT_VAL = 1) THEN			;joh022
		TURNON DYNREL_PRM_HOLD_REQ				;joh022
        RETURN

;==============================================================================
;                               PURGE
;==============================================================================
PURGE:
        IF !(PURGING_FG) THEN
                BEGIN   
                QUERY_MESSAGE = "START PURGING? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        TIMERON PURGE_VENT_TMR
                        GOSUB O2XV317                   ;OPEN 8502XV317
                        GOSUB O2XV319                   ;OPEN 8502XV319
                        PURGING_FG = 1
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        END     
                END
        ELSE
                BEGIN
;                IF !(INLET_PURGE_FG) THEN
;                        BEGIN
                        SA_3_MESSAGE = "PURGING. ELAPSED TIME "
                        TEMP_INT = FLTCNV(TEMP_SG,PURGE_VENT_TMR,4,0)
                        TEMP_INT = APPEND(SA_3_MESSAGE,SA_3_MESSAGE,TEMP_SG," MIN")

                        SA_2_MESSAGE = "PURGE SETPOINT= "
                        TEMP_INT = FLTCNV(TEMP_SG,PURGE_TIME,4,0)
                        TEMP_INT = APPEND(SA_2_MESSAGE,SA_2_MESSAGE,TEMP_SG," MIN")
;                        END
                END

        IF (PURGE_VENT_TMR >= PURGE_TIME) & !(INLET_PURGE_FG) THEN
                BEGIN
                SA_3_MESSAGE = "PURGING INLET LINE"
                PRINT LOG_ADI,"%p",SA_3_MESSAGE
                SA_2_MESSAGE = ""
                INLET_PURGE_FG = 1
                GOSUB O2XV315                           ;OPEN 8502XV315
                GOSUB O2XV316                           ;OPEN 8502XV316
                END

;VCM018        IF (PURGE_VENT_TMR >= INLET_PURGE_TIME) & !(INLET_PURGE_DONE_FG) THEN
        IF (PURGE_VENT_TMR >= (PURGE_TIME + INLET_PURGE_TIME)) & !(INLET_PURGE_DONE_FG) THEN;VCM018
                BEGIN
;                TIMEROFF PURGE_VENT_TMR
                GOSUB C2XV315                   ;CLOSE 8502XV315
                GOSUB C2XV316                   ;CLOSE 8502XV316
                INLET_PURGE_DONE_FG = 1
                SA_3_MESSAGE = "PURGING INLET LINE: FINISHED"
                PRINT LOG_ADI,"%p",SA_3_MESSAGE
                END

;        IF (INLET_PURGE_DONE_FG) THEN
        IF (PURGE_VENT_TMR >= PURGE_TIME) & (INLET_PURGE_FG) THEN
                BEGIN
                QUERY_MESSAGE = "CONNECT TO CNTRPRESS? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        EXPR1 = COMPAR(SA_STATUS,"PURGE",5,EQ)
                        EXPR2 = (PGMSTAT("DYNRELCIP") = NOT_RUNNING)
                        EXPR3 = COMPAR(SEQ_STATUS,"FAIL",4,NE)

                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""

                        IF (EXPR1 & EXPR2 & EXPR3) THEN
                                BEGIN
                                CNTRPRESS_CMD = 1
                                SA_3_MESSAGE = "CNTRPRESS ON: DONE"
                                PRINT LOG_ADI,"%p",SA_3_MESSAGE
                                END     
                        ELSE
                                SA_3_MESSAGE = "INVALID CNTRPRESS ON"
                        END
                END

        IF (CNTRPRESS_CMD) THEN
                BEGIN
                GOSUB C2XV319                   ;CLOSE 8502XV319
                GOSUB C2XV317                   ;CLOSE 8502XV317
                GOSUB O2XV31                    ;OPEN 8502XV31
                PURGING_FG = 0
                INLET_PURGE_FG = 0
                PURGE_DONE_FG = 1
                CNTRPRESS_FG = 1
                SA_3_MESSAGE = "PURGE: FINISHED"
                PRINT LOG_ADI,"%p",SA_3_MESSAGE
                END
                
        RETURN

;==============================================================================
;                       DILUENT PACK HEADER
;==============================================================================
DILPACK:
;mw025        GOSUB O90XV14                                   ;OPEN 8690XV14
;mw025        GOSUB O90XV18                                   ;OPEN 8690XV18
	GOSUB OPNDYNRELDILUENTVLV			;OPEN MLDXV009	;mw025
        GOSUB O2XV316                                   ;OPEN 8502XV316
        TIMERON PACK_TMR
        IF (PACK_TMR > DIL_PACK_TIME) THEN
                BEGIN
                TIMEROFF PACK_TMR
		TIMERCLR PACK_TMR		;mw025
;mw025                GOSUB C90XV14                           ;CLOSE 8690XV14
;mw025                GOSUB C90XV18                           ;CLOSE 8690XV18
		GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
                GOSUB C2XV316                           ;CLOSE 8502XV316
                DIL_PACK_DONE_FG = 1
;mw025fat                SA_2_MESSAGE = "DILUENT PACK HEADER: FINISHED"
		SA_2_MESSAGE = "DILUENT PACK INLET: FINISHED"	;mw025fat
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
                END
	TURNON DYNREL_BMXF3_SEQ_START			;jac033
        
        RETURN  

;==============================================================================
;                               SELECT HEADER
;==============================================================================
SELECTHDR:
        
;        TRAP_HDR_REQ = TRAP_HDR_REQ - 1

        IF (TRAP_HDR_REQ = 0) THEN
                BEGIN
                ERROR_STRING = "NO TRAP HEADER SELECTED"
                TRAP_HDR_SEL_ALLOF6 = 4  ;NO TRAP UNIT #
                TRAP_SEL_FG = 0
                TRAP_HDR_REQ = 0
                TRAP_HDR_DSP = TRAP_HDR_REQ
                ASSIGN TRAP_VALVE_PTR = 'DUMMYPUMP'
                GOTO TRAPDONE
                END
        IF (TRAP_HDR_REQ = 1) THEN 
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV15'
;polbmxprod		ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP1_FILL_VLV		;mw025
;polbmxprod                ASSIGN TRAP_ALC_PTR = 'PAAR1$D216'
;polbmxprod                ASSIGN TRAP_CO2_PTR = 'FIL1CO2'
;polbmxprod                ASSIGN TRAP_DO_PTR = 'FIL1DO'

		ASSIGN TRAP_ALC_PTR = 'BMXD3TRP1ALC' ;polbmxprod								;bmxpol_rehxxx
		ASSIGN TRAP_RE_PTR = 'BMXD3TRP1RE' ;polbmxprod;jac031								;bmxpol_rehxxx
		ASSIGN TRAP_CO2_PTR = 'BMXD3TRP1CO2'	 ;polbmxprod							;bmxpol_rehxxx
		ASSIGN TRAP_DO_PTR = 'BMXD3TRP1DO'	;polbmxprod								;bmxpol_rehxxx
;polbmxprod		ASSIGN TRAP_FLOW_PTR = 'BMXD3TRP1FR';polbmxprod

                TRAP_HDR_SEL_ALLOF6 = 22  ;TRAP 1 UNIT #
                TRAP_HDR_DSP = 1
                TRAP_HDR_REQ = TRAP_HDR_DSP
;POLBMXPROD                ASSIGN TRAP_BRAND_PTR = POL1_BRAND_POLCOM
                ASSIGN TRAP_BRAND_PTR = POL1_BRAND_POLCOM_ALLOF6	;POLBMXPROD
                TRAP_SEL_FG = 1
;                '8690FI1':IOS_TG:1 = 1                  ;mrp706
;                '8690FI1':IOS_TG:2 = 0
;                '8690FI1':IOS_TG:3 = 0
                GOTO TRAPDONE
                END
        IF (TRAP_HDR_REQ = 2) THEN
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV16'
		ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP2_FILL_VLV		;mw025
;polbmxprod                ASSIGN TRAP_ALC_PTR = 'PAAR1$D226'
;polbmxprod                ASSIGN TRAP_CO2_PTR = 'FIL2CO2'
;polbmxprod                ASSIGN TRAP_DO_PTR = 'FIL2DO'

		ASSIGN TRAP_ALC_PTR = 'BMXD3TRP2ALC'	;polbmxprod							;bmxpol_rehxxx
		ASSIGN TRAP_RE_PTR = 'BMXD3TRP2RE'	;polbmxprod							;bmxpol_rehxxx;jac031
		ASSIGN TRAP_CO2_PTR = 'BMXD3TRP2CO2'	;polbmxprod							;bmxpol_rehxxx
		ASSIGN TRAP_DO_PTR = 'BMXD3TRP2DO'	;polbmxprod								;bmxpol_rehxxx
;polbmxprod		ASSIGN TRAP_FLOW_PTR = 'BMXD3TRP2FR'	;polbmxprod

                TRAP_HDR_SEL_ALLOF6 = 23 ;TRAP 2 UNIT #
                TRAP_HDR_DSP = 2
                TRAP_HDR_REQ = TRAP_HDR_DSP
;POLBMXPROD                ASSIGN TRAP_BRAND_PTR = POL2_BRAND_POLCOM
                ASSIGN TRAP_BRAND_PTR = POL2_BRAND_POLCOM_ALLOF6	;POLBMXPROD
                TRAP_SEL_FG = 1
;                '8690FI1':IOS_TG:1 = 0                  'mrp706
;                '8690FI1':IOS_TG:2 = 1
;                '8690FI1':IOS_TG:3 = 0
                GOTO TRAPDONE
                END
        IF (TRAP_HDR_REQ = 3) THEN
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV17'
		ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP3_FILL_VLV		;mw025
;polbmxprod                ASSIGN TRAP_ALC_PTR = 'PAAR1$D236'
;polbmxprod                ASSIGN TRAP_CO2_PTR = 'FIL3CO2'
;polbmxprod                ASSIGN TRAP_DO_PTR = 'FIL3DO'

		ASSIGN TRAP_ALC_PTR = 'BMXD3TRP3ALC'	;polbmxprod							;bmxpol_rehxxx
		ASSIGN TRAP_RE_PTR = 'BMXD3TRP3RE'	;polbmxprod;jac031							;bmxpol_rehxxx
		ASSIGN TRAP_CO2_PTR = 'BMXD3TRP3CO2'	;polbmxprod							;bmxpol_rehxxx
		ASSIGN TRAP_DO_PTR = 'BMXD3TRP3DO'	;polbmxprod								;bmxpol_rehxxx
;polbmxprod		ASSIGN TRAP_FLOW_PTR = 'BMXD3TRP3FR'	;polbmxprod


                TRAP_HDR_SEL_ALLOF6 = 24  ;TRAP 3 UNIT #
                TRAP_HDR_DSP = 3
                TRAP_HDR_REQ = TRAP_HDR_DSP
;POLBMXPROD                ASSIGN TRAP_BRAND_PTR = POL3_BRAND_POLCOM
                ASSIGN TRAP_BRAND_PTR = POL3_BRAND_POLCOM_ALLOF6	;POLBMXPROD
                TRAP_SEL_FG = 1
;                '8690FI1':IOS_TG:1 = 0                        ;mrp706
;                '8690FI1':IOS_TG:2 = 0
;                '8690FI1':IOS_TG:3 = 1
                GOTO TRAPDONE
                END
        IF (TRAP_HDR_REQ > 3) THEN
                BEGIN
                ERROR_STRING = "INVALID HEADER NUMBER"
                TRAP_HDR_SEL_ALLOF6 = 4  ;NO TRAP UNIT #
                TRAP_SEL_FG = 0
                TRAP_HDR_REQ = 0
                TRAP_HDR_DSP = TRAP_HDR_REQ
                ASSIGN TRAP_VALVE_PTR = 'DUMMYPUMP'
                END


TRAPDONE:
        RETURN

;==============================================================================
;                               BRAND CHECK
;==============================================================================

BRANDCHK:
        IF (STRLEN(BRAND_ID_REQ) < 2) THEN
                BEGIN
                ERROR_STRING = "NO BRAND SELECTED"
                GOTO BRANDCLR
                END

        IF !(EMPTY_FG)&(COMPAR(BRAND_ID_REQ,BRAND_ID,BRAND_LENGTH,NE))  THEN
                BEGIN
                FAIL_MSG = "BRAND CANNOT BE CHANGED!"
                GOTO FAIL
                END

        IF (STRLEN(BRAND_ID_REQ) != BRAND_LENGTH) THEN
                BEGIN
                FAIL_MSG = "INVALID BRAND STRING LENGTH"
                IF !(BRAND_CHK_FAIL_FG) THEN
                        GOTO BRANDFAIL
                GOTO FAIL
                END
        ASSIGN TEMP_PTR = FIRST_BRAND_ALLOF7
        FOR TEMP_INT = 1 TO NO_BRAND
                IF (COMPAR(BRAND_ID_REQ,TEMP_PTR,BRAND_LENGTH,EQ)) THEN
                        GOTO TRAPCHK
                STEP TEMP_PTR BY 1
                NEXT TEMP_INT
        FAIL_MSG = "INVALID BRAND"
        IF !(BRAND_CHK_FAIL_FG) THEN
                GOTO BRANDFAIL
        GOTO FAIL

TRAPCHK:
        IF (COMPAR(BRAND_ID_REQ,TRAP_BRAND_PTR,BRAND_LENGTH,NE)) THEN
                BEGIN
                FAIL_MSG = "TRAP FLTER BRND DOES NOT MATCH"
                IF !(BRAND_CHK_FAIL_FG) THEN
                        GOTO BRANDFAIL
                GOTO FAIL
                END
        SA_2_MESSAGE = ""
        BRAND_ID = BRAND_ID_REQ
        
        RETURN

BRANDFAIL:
        SA_2_MESSAGE = FAIL_MSG

BRANDCLR:
        RETURN

;==============================================================================
;                               BEER PACK INLET
;==============================================================================
BEERPACKI:
        IF !(BEER_PACK_IN_FG) THEN
                BEGIN
                SA_2_MESSAGE = "BEER PACKING INLET"
                GOSUB O2XV316                           ;OPEN 8502XV316
                GOSUB OTRAPVLV                          ;OPEN TRAP MATRIX VALVE
                TIMERON SEAT_TMR
;egs025                IF (SEAT_TMR > SEAT_TIME) THEN
;egs025                        BEGIN
;egs025;mw025                        TURNOFF '8690XV15U'             ;CLOSE TRAP 1 MATRIX SEAT
;egs025			TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
;egs025                        TIMEROFF SEAT_TMR
;egs025                        END 
;egs025                  ELSE
;egs025;mw025                  TURNON '8690XV15U'                      ;OPEN TRAP 1 MATRIX SEAT
;egs025			TURNON MLD_TRAP_INLET_SEAT_REQ                    ;OPEN SEAT	;mw025
                TIMERON CONDCTVTY_TMR   
                IF (INLET_CONDTVTY:DEV_STAT = S_1) | (CONDCTVTY_TMR > CONDCTVTY_TIME) THEN
                        BEGIN
                        TIMEROFF CONDCTVTY_TMR
                        DYNREL_FILL_OK_FG_ALLOF6 = 0
                        GOSUB CTRAPVLV                  ;CLOSE TRAP MATRIX VALVE
;mw025                        TURNOFF '8690XV15U'             ;CLOSE TRAP 1 MATRIX SEAT
			TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
                        TIMEROFF SEAT_TMR
                        GOSUB C2XV316                   ;CLOSE 8502XV316
                        BEER_PACK_IN_FG = 1
                        SA_2_MESSAGE = "BEER PACK INLET: FINISHED"
                        PRINT LOG_ADI,"%p",SA_2_MESSAGE
                        END
                END

;        TURNOFF 'DYNALARM'          ;VCM002

        RETURN

;==============================================================================
;                               RESTART FILL TANK
;==============================================================================
RESTART:
        QUERY_MESSAGE = "RESTART FILL TANK? (Y,N)"
        IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                BEGIN
                SA_2_MESSAGE = "RESTARTING FILL TANK"
                OPER_RESPONSE = ""
                QUERY_MESSAGE = ""
                RESTART_FILL = 1
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
                END
         ELSE
                IF COMPAR(OPER_RESPONSE,"N",1,EQ) THEN
                        BEGIN
                        RESTART_FILL = 2
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        SA_2_MESSAGE = ""
                        END
        RETURN

;==============================================================================
;                               FILL TANK
;==============================================================================
FILLTANK:
;        EXPR1 = (TRAP_FILL_OK_FG_POLCOM) & !(HIHI_LVL_FG) & !(HI_LVL_FG)
;POLBMXPROD        EXPR1 = (TRAP_FILL_OK_FG_POLCOM) & !(HI_LVL_FILL_STOPPED_FG)
        EXPR1 = (TRAP_FILL_OK_FG_POLCOM_ALLOF6) & !(HI_LVL_FILL_STOPPED_FG)	;POLBMXPROD
        EXPR2 = (STOP_TRAP_DEVIATION_FG) ;VCM000

        IF (EXPR1 & EXPR2) THEN
                BEGIN
                GOSUB O2XV315                           ;OPEN 8502XV315
                GOSUB OTRAPVLV                          ;OPEN TRAP MATRIX VALVE
                END
        ELSE
                BEGIN
                GOSUB CTRAPVLV                          ;CLOSE TRAP MATRIX VALVE
                GOSUB C2XV315                           ;CLOSE 8502XV315
                END

	IF (SC_SA_PARK_TANK_CMD) THEN			;JT000
                BEGIN
                GOSUB CTRAPVLV                          ;CLOSE TRAP MATRIX VALVE
                GOSUB C2XV315                           ;CLOSE 8502XV315
                END


        RETURN

;==============================================================================
;                       DILUENT PACK FB LINE
;==============================================================================
DILPKFB:
        IF !(DPACK_FG) THEN
                BEGIN
                SA_2_MESSAGE = "DILUENT PACKING FB LINE"
;joh024                GOSUB O90XV19                                   ;OPEN 8690XV19 
;joh024                GOSUB O90XV22                                   ;OPEN 8690XV22
		GOSUB OPNDYNRELBEERBLKVLV			;MLDXV008	;mw025
		GOSUB OPNDYNRELDILUENTBLKVLV			;MLDXV004	;joh022
		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh022
		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
                GOSUB O90XV25                                   ;OPEN 8690XV25
                GOSUB O90XV27                                   ;OPEN 8690XV27
;mw025                GOSUB O90XV14                                   ;OPEN 8690XV14	   
		GOSUB OPNDYNRELDILUENTVLV			;OPEN MLDXV009	;mw025
                TIMERON PACK_TMR
                IF (PACK_TMR > DIL_PACK_FB_TIME) THEN
                        BEGIN
;joh024                        GOSUB O90XV12                           ;OPEN 8690XV12
;joh024                        GOSUB O90XV13                           ;OPEN 8690XV13
;joh024                        GOSUB O90XV21                           ;OPEN 8690XV21
                        ;VCM020 GOSUB O8690P13                          ;START CIRC PUMP
                        GOSUB C90XV27                           ;CLOSE 8690XV27
                        GOSUB C90XV25                           ;CLOSE 8690XV25
                        DPACK_FG = 1
;joh024                        END
;joh024                END
;joh024        IF (PACK_TMR > DIL_PACK_FB_TIME + 60) THEN
;joh024                BEGIN
                ;VCM020 GOSUB C8690P13                          ;STOP CIRC PUMP
;mw025			GOSUB C90XV14                           ;CLOSE 8690XV14
;joh024                GOSUB C90XV21                           ;CLOSE 8690XV21
;joh024                GOSUB C90XV19                           ;CLOSE 8690XV19
;joh024                GOSUB C90XV12                           ;CLOSE 8690XV12
;joh024                GOSUB C90XV13                           ;CLOSE 8690XV13
;joh024                GOSUB C90XV22                           ;CLOSE 8690XV22
			GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
			GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008		;mw025
			GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004		;joh024
			GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh024
			GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh024
			DPACK_FB_DONE_FG = 1
			DPACK_FG = 1				;joh024
			BEER_PACK_OUT_FG = 0			;JT000
			TIMEROFF PACK_TMR
;mw026			SA_2_MESSAGE = "DILUENT PACK FB: FINISHED"
			SA_2_MESSAGE = "DILUENT PACK: FINISHED"	;mw026
			PRINT LOG_ADI,"%p",SA_2_MESSAGE 
;mw026			WAIT 4
;mw026			SA_2_MESSAGE = ""
			END
		END
        RETURN

;==============================================================================
;                       BEER PACK OUTLET
;==============================================================================
;joh024 use BEERPACKOSTEPS
;BEERPACKO:
;        IF (PACK_LVL_FG) THEN 
;                BEGIN
;;joh024                GOSUB O90XV20                           ;OPEN 8690XV20
;;joh024                GOSUB O90XV22                           ;OPEN 8690XV22
;                GOSUB O90XV29                           ;OPEN 8690XV29
;                GOSUB O90XV25                           ;OPEN 8690XV25
;		PUTAUTO DYNREL_OUT_PSI					;JT000
;		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
;		;
;		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
;		WAIT 1								;joh022
;		PUTOUT DYNREL_PRM_FCV_OUTPUT, BPACK1_FCV_DRAIN_OTPT	;mldfcv001	;joh022
;		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
;		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh022
;		;
;                GOSUB O8690P11                          ;BEER FEED PUMP 
;                TIMERON CONDCTVTY_TMR   
;                END
;        ;ELSE
;        IF (DYNREL_TNK_LVL:AI_MEAS < RELEASE_LVL)THEN
;                ERROR_STRING = "DYNREL LEVEL NOT HIGH ENOUGH"
;  
;;joh024        IF (DRAIN_CONDTVTY:DEV_STAT = S_1) | (CONDCTVTY_TMR > CONDCTVTY_TIME) THEN
;;joh024                BEGIN
;;joh024                TIMEROFF CONDCTVTY_TMR
;;joh024                GOSUB O90XV12                           ;OPEN 8690XV12
;;joh024                GOSUB O90XV13                           ;OPEN 8690XV13
;;joh024                ;VCM020 GOSUB O8690P13                          ;START CIRC PUMP
;;joh024                TIMERON PACK_TMR
;;joh024                END             
;;joh024        IF (PACK_TMR > BEER_PACK_TIME) THEN
;	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BOTH_BBL ) ) THEN		;joh024
;                BEGIN
;                TIMEROFF PACK_TMR
;                GOSUB C8690P11                          ;STOP BEER FEED PUMP
;		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001		;joh024
;		WAIT 1									;joh024
;		PUTOUT DYNREL_PRM_FCV_OUTPUT, 0.0	;mldfcv001			;joh024
;		GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh024
;		GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh024
;                ;VCM020 GOSUB C8690P13                          ;STOP CIRC PUMP
;                GOSUB C90XV29                           ;CLOSE 8690XV29
;;joh024                GOSUB C90XV20                           ;CLOSE 8690XV20
;;joh024                GOSUB C90XV12                           ;CLOSE 8690XV12
;;joh024                GOSUB C90XV13                           ;CLOSE 8690XV13
;;joh024                GOSUB C90XV22                           ;CLOSE 8690XV22
;                GOSUB C90XV25                           ;CLOSE 8690XV25
;;JT000          BEER_PACK_DONE_FG = 1
;                BEER_PACK_OUT_FG = 1
;                SA_2_MESSAGE = "BEER PACK OUTLET: FINISHED"
;                PRINT LOG_ADI,"%p",SA_2_MESSAGE
;                END
;
;        RETURN

;			joh024 begin
;==============================================================================
;                       BEER PACK OUTLET STEPS
;==============================================================================
BEERPACKOSTEPS:

	ON SUB_STEP_INT GOSUB BPOSTEP1,BPOSTEP2,BPOSTEP3,BPOSTEP4, BPOSTEP5

	IF SUB_STEP_INT = 0 THEN
		BEGIN
		GOSUB BPOSTEP1
		END

	RETURN

BPOSTEP1:
	IF SUB_STEP_INT != 1 THEN
		BEGIN
		;
		SUB_STEP_INT = 1
		END

        IF (DYNREL_TNK_LVL:AI_MEAS < RELEASE_LVL)THEN
                ERROR_STRING = "DYNREL LEVEL NOT HIGH ENOUGH"
	
	; pack steps
	; 1) Bypass for BBLs
	; 2) Main for BBLs
	; 3) Both for BBLs

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL + BEER_PACK_BOTH_BBL) ) THEN
		GOTO BPOSTEP5
	
	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL ) ) THEN
		GOTO BPOSTEP4

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL) ) THEN
		GOTO BPOSTEP3

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS <  BEER_PACK_BYPASS_BBL) THEN
		GOTO BPOSTEP2

	RETURN

BPOSTEP2:
	IF SUB_STEP_INT != 2 THEN
		BEGIN
		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
		WAIT 1								;joh022
		PUTOUT DYNREL_PRM_FCV_OUTPUT, BPACK1_FCV_DRAIN_OTPT	;mldfcv001	;joh022
		GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh022
                GOSUB O90XV29                           ;OPEN 8690XV29
                GOSUB O90XV25                           ;OPEN 8690XV25
		PUTAUTO DYNREL_OUT_PSI					;JT000
		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
                GOSUB O8690P11                          ;BEER FEED PUMP 
		;
                SA_3_MESSAGE = "BEER PACK OUTLET: BYPASS"
		SUB_STEP_INT = 2
		END
	
	; pack steps
	; 1) Bypass for BBLs
	; 2) Main for BBLs
	; 3) Both for BBLs

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL + BEER_PACK_BOTH_BBL) ) THEN
		GOTO BPOSTEP5
	
	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL ) ) THEN
		GOTO BPOSTEP4

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL) ) THEN
		GOTO BPOSTEP3

	RETURN

BPOSTEP3:
	IF SUB_STEP_INT != 3 THEN
		BEGIN
                GOSUB C8690P11                          ;BEER FEED PUMP 
		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
		WAIT 1								;joh022
		PUTOUT DYNREL_PRM_FCV_OUTPUT, BPACK1_FCV_DRAIN_OTPT	;mldfcv001	;joh022
		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
		GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
                GOSUB O90XV29                           ;OPEN 8690XV29
                GOSUB O90XV25                           ;OPEN 8690XV25
		PUTAUTO DYNREL_OUT_PSI					;JT000
		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
                GOSUB O8690P11                          ;BEER FEED PUMP 
		;
                SA_2_MESSAGE = "BEER PACK OUTLET: MAIN"
		SUB_STEP_INT = 3
		END

	
	; pack steps
	; 1) Bypass for BBLs
	; 2) Main for BBLs
	; 3) Both for BBLs

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL + BEER_PACK_BOTH_BBL) ) THEN
		GOTO BPOSTEP5
	
	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL ) ) THEN
		GOTO BPOSTEP4

	RETURN
BPOSTEP4:
	IF SUB_STEP_INT != 4 THEN
		BEGIN
		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
		WAIT 1								;joh022
		PUTOUT DYNREL_PRM_FCV_OUTPUT, BPACK1_FCV_DRAIN_OTPT	;mldfcv001	;joh022
		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh022
                GOSUB O90XV29                           ;OPEN 8690XV29
                GOSUB O90XV25                           ;OPEN 8690XV25
		PUTAUTO DYNREL_OUT_PSI					;JT000
		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
                GOSUB O8690P11                          ;BEER FEED PUMP 
		;
                SA_2_MESSAGE = "BEER PACK OUTLET: BOTH"
		SUB_STEP_INT = 4
		END
	
	; pack steps
	; 1) Bypass for BBLs
	; 2) Main for BBLs
	; 3) Both for BBLs

	IF PACK_LVL_FG & (DYN1_FLOW_BATCH:AI_MEAS >= (BEER_PACK_BYPASS_BBL + BEER_PACK_MAIN_BBL + BEER_PACK_BOTH_BBL) ) THEN
		GOTO BPOSTEP5
	

	RETURN
BPOSTEP5:
	IF SUB_STEP_INT != 5 THEN
		BEGIN
                GOSUB C8690P11                          ;STOP BEER FEED PUMP
                ;VCM020 GOSUB C8690P13                          ;STOP CIRC PUMP
                GOSUB C90XV29                           ;CLOSE 8690XV29
;joh022                GOSUB C90XV20                           ;CLOSE 8690XV20
;joh022                GOSUB C90XV12                           ;CLOSE 8690XV12
;joh022                GOSUB C90XV13                           ;CLOSE 8690XV13
;joh022                GOSUB C90XV22                           ;CLOSE 8690XV22
;joh022		Update here
		PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
		WAIT 1								;joh022
		PUTOUT DYNREL_PRM_FCV_OUTPUT, 0.0	;mldfcv001	;joh022
		GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
		GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
                GOSUB C90XV25                           ;CLOSE 8690XV25
;JT000          BEER_PACK_DONE_FG = 1
                SA_2_MESSAGE = "BEER PACK OUTLET: FINISHED"
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
		;
		SUB_STEP_INT = 5
		END

	; pack steps
	; 1) Bypass for BBLs
	; 2) Main for BBLs
	; 3) Both for BBLs
	
	BEER_PACK_OUT_FG = 1
	
	RETURN
;			joh024 end
;==============================================================================
;                               FILL/RELEASE BEER
;==============================================================================
FILLREL: 
;joh024        IF (FILL_REL_FG =0) & (RELEASE_LVL_FG) THEN
        IF (FILL_REL_FG =0) & (RELEASE_LVL_FG) & (EMPTY_FG = 0) THEN				;joh024
                BEGIN
;                QUERY_MESSAGE = "ALL CONNECTIONS COMPLETE? (Y)"
;                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
;                        BEGIN
                        GOSUB O90XV29                   ;OPEN 8690XV29
                        GOSUB O90XV25                   ;OPEN 8690XV25
;joh024                        GOSUB O90XV12                   ;OPEN 8690XV12
;joh024                        GOSUB O90XV13                   ;OPEN 8690XV13	JT000
;joh024                        GOSUB O90XV22                   ;OPEN 8690XV22	JT000
;joh022		Initial with the valves closed
;joh024			GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
;joh024			GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
			GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh024
			GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh024
			TURNON DYNREL_PRM_AVAIL_ACK								;joh024
			TURNOFF DYNREL_PRM_HOLD_REQ						;joh024
                        ;VCM020 GOSUB O8690P13                  ;START CIRC PUMP
;ldk030								TURNON 'PAAR2$1PROD1'				;VCM021
                        RELEASE_ALARM_ENABLE_FG = 0      ;Alarms enabled    ;JMS002
                        FILL_REL_FG = 1
                        SA_2_MESSAGE = "FILL/RELEASING BEER"
                        PRINT LOG_ADI,"%p",SA_2_MESSAGE
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
;                        END     
                END
                        
;joh024	EXPR1 = ENABLE_PRM_VLV_FG			;joh022 (PRM_REQUEST_INT >= 1)									;joh022
;joh024	EXPR2 = (DYNREL_BYPASS_BLK_VLV_DEVSTAT != S_1) | (DYNREL_PCKGLN_BLK_VLV_DEVSTAT != S_1)		;joh022
;joh024	IF (EXPR1 & EXPR2) THEN										;joh022
;joh024	IF ( EXPR2) THEN										;joh022
;joh024		BEGIN											;joh022
;joh024		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002				;joh022
;joh024		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001				;joh022
;joh024		;johtmp NOTE: avail signal is turned off when ENABLE_PRM_VLV_FG is cleared
;joh024		TURNON DYNREL_PRM_AVAIL_ACK								;johtmp
;joh024		END											;joh022
;joh024	ELSE IF (ENABLE_PRM_VLV_FG = 0) THEN								;johtmp
;joh024		BEGIN											;johtmp
;joh024		TURNOFF DYNREL_PRM_AVAIL_ACK								;johtmp
;joh024		DYNREL_BYPASS_BLK_VLV_DEVSTAT = 0							;johtmp
;joh024		END											;johtmp
		
         IF (FILL_REL_FG) & (DYNREL_FLOW_METER:AI_MEAS > 50) & ('8690P11':DEV_STAT = S_0) THEN
             TIMERON PUMP_ON_TMR                      ;  ;mrp706
            ELSE 
                BEGIN
                TIMEROFF PUMP_ON_TMR
                TIMERCLR PUMP_ON_TMR
                END
		
;johtmp     IF (PUMP_ON_TMR > 30)  & ('8690P11':DEV_STAT = S_0)  THEN
;joh024     IF ((PUMP_ON_TMR > 30) |(PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 & ENABLE_PRM_VLV_FG) )  & ('8690P11':DEV_STAT = S_0)  THEN   ;johtmp
	EXPR1 = PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 & (PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 = 0)		;joh024
	IF FILL_REL_FG & (EXPR1 )  & ('8690P11':DEV_STAT = S_0)  THEN   ;joh024
                BEGIN
		          PUTAUTO DYNREL_OUT_PSI					;JT000
		          DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
			GOSUB O8690P11                          ;START BEER FEED PUMP
		          END

;JT000        IF (FILL_REL_FG) & (DYNREL_OUT_PSI:AI_MEAS < DYNREL_FLO) THEN
;        IF (FILL_REL_FG) & (DYNREL_OUT_PSI:AI_MEAS < (DYNREL_FLOW_PC_SETPT - DYNREL_FLOW_DEADBAND)) THEN
;		BEGIN
;		PUTAUTO DYNREL_FLOW					;JT000
;		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
;       
;                GOSUB O8690P11                          ;START BEER FEED PUMP
;		END
         IF (FILL_REL_FG) & (DYNREL_FLOW_METER:AI_MEAS <= 50) & ('8690P11':DEV_STAT = S_1) THEN
             TIMERON PUMP_OFF_TMR                       ;mrp706
            ELSE 
                BEGIN
                TIMEROFF PUMP_OFF_TMR
                TIMERCLR PUMP_OFF_TMR
                END
		
;johtmp     IF (PUMP_OFF_TMR > 1)  & ('8690P11':DEV_STAT = S_1)  THEN
;joh024     IF (PUMP_OFF_TMR > 1) & ((PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 = 0) | (ENABLE_PRM_VLV_FG = 0))  & ('8690P11':DEV_STAT = S_1)  THEN	;johtmp
     
	EXPR1 = PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 & (PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 = 0)		;joh024
	IF ((EXPR1 = 0) )  & ('8690P11':DEV_STAT = S_1)  THEN	;joh024
                  BEGIN
                  PUTMANL DYNREL_OUT_PSI         
                  PUTOUT DYNREL_OUT_PSI,0
                  GOSUB C8690P11                          ;STOP BEER FEED PUMP
		            END

  IF !(EMPTY_FG) & (LOLO_LVL_FG) THEN			;JT000
		BEGIN
		IF (STRLEN(ERROR_STRING) = 0) THEN
	                ERROR_STRING = "TANK LEVEL LOLO, EMPTY SOON"		;JT000
		END
        ELSE IF (EMPTY_FG) THEN 
                BEGIN
                GOSUB C8690P11                          ;STOP CIRC PUMP
                ;VCM020 GOSUB C8690P13                          ;STOP BEER FEED PUMP
;joh024                GOSUB C90XV22                           ;CLOSE 8690XV22		JT000
;joh024                GOSUB C90XV13                           ;CLOSE 8690XV13		JT000
;joh024                GOSUB C90XV12                           ;CLOSE 8690XV12
;joh022		Update here
;joh024		EXPR1 = ENABLE_PRM_VLV_FG	 ;rmaxxx       	;joh022 (PRM_REQUEST_INT >= 1)									;joh022
;joh024		EXPR2 = (DYNREL_BYPASS_BLK_VLV_DEVSTAT != S_1) | (DYNREL_PCKGLN_BLK_VLV_DEVSTAT != S_1)	;rmaxxx	;joh022
;joh024		IF (EXPR1 & EXPR2 & ENABLE_PRM_VLV_FG) THEN							;johtmp
;joh024			BEGIN							;johtmp
			TURNON DYNREL_PRM_HOLD_REQ						;joh024
			GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
			GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
;joh024			END							;johtmp
                GOSUB C90XV25                           ;CLOSE 8690XV25
                GOSUB C90XV29                           ;CLOSE 8690XV29
                FILL_REL_FG = 0
                ERROR_STRING = "RELEASE STOPPED. TANK EMPTY"
                END

        RETURN

;==============================================================================
;                               RELEASE BEER	JT000	NEW ROUTINE
;==============================================================================
RELEASE:
;joh024        IF !(RELEASE_FG) & (RELEASE_LVL_FG) THEN
        IF (RELEASE_FG =0) & (RELEASE_LVL_FG) & (EMPTY_FG = 0) THEN				;joh024
                BEGIN
                QUERY_MESSAGE = "ALL CONNECTIONS COMPLETE? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        GOSUB O90XV29                   ;OPEN 8690XV29
                        GOSUB O90XV25                   ;OPEN 8690XV25
;joh024                        GOSUB O90XV12                   ;OPEN 8690XV12
;joh024                        GOSUB O90XV13                   ;OPEN 8690XV13
;joh024                        GOSUB O90XV22                   ;OPEN 8690XV22
;joh022		Update here
;joh024			IF (ENABLE_PRM_VLV_FG = 1) THEN						;johtmp
;joh024				BEGIN								;johtmp
			TURNON DYNREL_PRM_AVAIL_ACK						;joh024
			TURNOFF DYNREL_PRM_HOLD_REQ						;joh024
			GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002		;joh022
			GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
;joh024				END								;johtmp
;ldk030								TURNON 'PAAR2$1PROD1'				;VCM021
                        ;VCM020 GOSUB O8690P13                  ;START CIRC PUMP
                        RELEASE_ALARM_ENABLE_FG = 0      ;Alarms enabled  ;JMS002
                        RELEASE_FG = 1
                        SA_2_MESSAGE = "RELEASING BEER"
                        PRINT LOG_ADI,"%p",SA_2_MESSAGE
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        END     
                END

;joh024	EXPR1 = ENABLE_PRM_VLV_FG		;joh022 (PRM_REQUEST_INT >= 1)							;johtmp
;joh024	EXPR2 = (DYNREL_BYPASS_BLK_VLV_DEVSTAT != S_1) | (DYNREL_PCKGLN_BLK_VLV_DEVSTAT != S_1)		;joh022
;joh024	IF (EXPR1 & EXPR2) THEN										;joh022
;joh024		BEGIN											;joh022
;joh024		TURNON DYNREL_PRM_AVAIL_ACK								;johtmp
;joh024		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002				;joh022
;joh024		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001				;joh022
;joh024		END											;joh022
;joh024	ELSE IF (ENABLE_PRM_VLV_FG = 0) THEN								;johtmp
;joh024		BEGIN											;johtmp
;joh024		TURNOFF DYNREL_PRM_AVAIL_ACK								;johtmp
;joh024		DYNREL_BYPASS_BLK_VLV_DEVSTAT = 0							;johtmp
;joh024		END											;johtmp

         IF (RELEASE_FG) & (DYNREL_FLOW_METER:AI_MEAS > 50) & ('8690P11':DEV_STAT = S_0) THEN
             TIMERON PUMP_ON_TMR                       ;mrp706
            ELSE 
                BEGIN
                TIMEROFF PUMP_ON_TMR
                TIMERCLR PUMP_ON_TMR
                END
	
;johtmp     IF (PUMP_ON_TMR > 30)  & ('8690P11':DEV_STAT = S_0)  THEN   ;MRP706
;joh024     IF ((PUMP_ON_TMR > 30) |(PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 & ENABLE_PRM_VLV_FG) )  & ('8690P11':DEV_STAT = S_0)  THEN   ;MRP706;johtmp
     IF ((PUMP_ON_TMR > 30) |(PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6) )  & ('8690P11':DEV_STAT = S_0)  THEN   ;MRP706;joh024
                BEGIN
		PUTAUTO DYNREL_OUT_PSI					;JT000
		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000
                GOSUB O8690P11                          ;START BEER FEED PUMP
		END


;JT000        IF (RELEASE_FG) & (DYNREL_OUT_PSI:AI_MEAS < RELEASE_FLO) THEN
;        IF (RELEASE_FG) & (DYNREL_OUT_PSI:AI_MEAS < (DYNREL_FLOW_PC_SETPT - DYNREL_FLOW_DEADBAND)) THEN
;		BEGIN
;		PUTAUTO DYNREL_OUT_PSI					;JT000
;		DYNREL_OUT_PSI:PID_SPVL:1 = DYNREL_FLOW_PC_SETPT		;JT000


;                GOSUB O8690P11                          ;START BEER FEED PUMP
;		END

;joh022           IF (FILL_REL_FG) & (DYNREL_FLOW_METER:AI_MEAS <= 50) & ('8690P11':DEV_STAT = S_1) THEN
;joh022		FILL_REL_FG never set in release state, so use release_fg instead
           IF (RELEASE_FG) & (DYNREL_FLOW_METER:AI_MEAS <= 50) & ('8690P11':DEV_STAT = S_1) THEN 	;joh022
             TIMERON PUMP_OFF_TMR                      ;  ;mrp706
            ELSE 
                BEGIN
                TIMEROFF PUMP_OFF_TMR
                TIMERCLR PUMP_OFF_TMR
                END
		
;johtmp     IF (PUMP_OFF_TMR > 1)  & ('8690P11':DEV_STAT = S_1)  THEN
;joh024     IF (PUMP_OFF_TMR > 1) & ((PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 = 0) | (ENABLE_PRM_VLV_FG = 0))  & ('8690P11':DEV_STAT = S_1)  THEN	;johtmp
     IF (PUMP_OFF_TMR > 1) & ((PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 = 0) )  & ('8690P11':DEV_STAT = S_1)  THEN	;joh024
                BEGIN
                PUTMANL DYNREL_OUT_PSI         
		          PUTOUT DYNREL_OUT_PSI,0
                GOSUB C8690P11                          ;STOP BEER FEED PUMP
		          END

	IF !(EMPTY_FG) & (LOLO_LVL_FG) THEN			;JT000
		BEGIN
		IF (STRLEN(ERROR_STRING) = 0) THEN
	                ERROR_STRING = "TANK LEVEL LOLO, EMPTY SOON"		;JT000
		END
       ELSE IF (EMPTY_FG) THEN 
                BEGIN
                GOSUB C8690P11                          ;STOP CIRC PUMP
                ;VCM020 GOSUB C8690P13                          ;STOP BEER FEED PUMP
;joh024                GOSUB C90XV22                           ;CLOSE 8690XV22
;joh024                GOSUB C90XV13                           ;CLOSE 8690XV13
;joh024                GOSUB C90XV12                           ;CLOSE 8690XV12
;joh022		Update here
;joh024		IF ENABLE_PRM_VLV_FG THEN						;johtmp
;joh024			BEGIN								;johtmp
			GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
			GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
			TURNON DYNREL_PRM_HOLD_REQ						;joh024
;rmaxxx			GOSUB C90XV25                           ;CLOSE 8690XV25
;joh024			END								;johtmp
		GOSUB C90XV25      ;rmaxxx                     ;CLOSE 8690XV25
                GOSUB C90XV29                           ;CLOSE 8690XV29
                RELEASE_FG = 0
                ERROR_STRING = "RELEASE STOPPED. TANK EMPTY"
                END

        RETURN

;===============================================================================
;		Convert Brand_iD to Brand Number		;joh022
;===============================================================================
WRITEBRANDNUMBER:
	BRAND_NUM = 0
	BRAND_SG = BRAND_ID			; brand_sg is used in brand table
	GOSUB BRANDTABLE
	;
	IF BRAND_NUM = 0 THEN
		BEGIN
		FAIL_MSG = "BRAND ID NOT IN BRAND TABLE"
		GOTO FAIL
		END
	;
	DYNREL_PRM_BRAND:AI_INVL:0 = BRAND_NUM

	RETURN

;===============================================================================
;		Convert Brand_iD to Brand Number		;joh022
;===============================================================================
READBRANDNUMBER:
	BRAND_NUM = PRM_DYNREL_BRAND_AIMEAS_ALLOF6		;p7ilk writes this value
	BRAND_SG = ""			; brand_sg is used in brand table
	GOSUB BRANDTABLE
	;
	PRM_BRAND_SG = BRAND_SG
	;
	RETURN


;===============================================================================
;		Beer Release Non Draft PR Matrix Fail Conditions	;joh022
;===============================================================================
RELPRMFAILCOND:
;joh024	IF (ENABLE_PRM_VLV_FG = 0) THEN				;johtmp
;joh024		RETURN						;johtmp

	FAIL_MSG = ""
	IF DYNOUT_DRAIN_CLOSED_DINVAL_ALLOF6 != 1 THEN		; not closed
		FAIL_MSG = "REL DRAIN NOT CLOSED MLDZSC001"	

	; Should this be a failure check?  if so, just go to fail 
	; this hv_devstat is set by the p7ilk program
	IF PRM_DYNREL_STUMP_HV_DEVSTAT_ALLOF6 != S_0 THEN	; stump handvalve not closed
;		BEGIN
		FAIL_MSG = "STUMP HV NOT CLOSED MLDHV001"
;		GOTO FAIL
;		END
	; NOTE: ProLeit is sending Fault bits that D/3 is reading as DIN's
	;	Will read directly from PCM7, if that is a problem, set device fault bit from p7ilk and 
	;	leave a good note
	;	OR
	; 	Create ALOF6 DINVAL signals to reference similar to DYNREL_STUMP_HV_DEVSTAT
	; 
	IF (DYNREL_BYPASS_BLK_VLV_FAIL_DIN:DIN_VAL = 0) THEN
		FAIL_MSG = "BYPASS VLV MLDXV002 H/W ALM"
	IF AND(DYNREL_BYPASS_BLK_VLV:DEV_DFLG, F_0) THEN
		FAIL_MSG = "BYPASS VLV MLDXV002 FAILED"

	IF (DYNREL_PCKGLN_BLK_VLV_FAIL_DIN:DIN_VAL = 0) THEN
		FAIL_MSG = "PCKG LN VLV MLDXV002 H/W FLT"
	IF AND(DYNREL_PCKGLN_BLK_VLV:DEV_DFLG, F_0) THEN
		FAIL_MSG = "PCKG LN VLV MLDXV001 FAILED"

	IF (DYNREL_DILUENT_BLK_VLV_FAIL_DIN:DIN_VAL = 0) THEN
		FAIL_MSG = "DILUENT VLV MLDXV002 H/W FLT"
	IF AND(DYNREL_DILUENT_BLK_VLV:DEV_DFLG, F_0) THEN
		FAIL_MSG = "DILUENT VLV MLDXV004 FAILED"
	; not checking HOLD request since do not want to 
	
	IF (STRLEN(FAIL_MSG) > 2) THEN									;johtmp
		BEGIN											;johtmp
		PRINT LOG_ADI,"CLEAR ACTIVE DUE TO %p", FAIL_MSG					;johtmp 
;johtmp		QUERY_MESSAGE = FAIL_MSG								;johtmp
		; if something gets jacked up, close the new header and 
		; don't want to fail the unit, so just set interlock by clearing t_30 bit
		;
;johtmp		ENABLE_PRM_VLV_FG = 0									;johtmp
		GOTO FAIL
		END											;johtmp
;johtmp	ELSE IF INSTR(QUERY_MESSAGE, "MLD") THEN
;johtmp		QUERY_MESSAGE = ""								;johtmp
	;		
	RETURN

;===============================================================================
;		Beer Release Handvalve not closed	;joh022
;===============================================================================
RELHVFAILCOND:

;joh024	IF (ENABLE_PRM_VLV_FG = 0) THEN				;johtmp
;joh024		RETURN						;johtmp

	FAIL_MSG = ""
	;  
	IF PRM_DYNREL_STUMP_HV_DEVSTAT_ALLOF6 != S_0 THEN	; stump handvalve not closed
		FAIL_MSG = "STUMP HV NOT CLOSED MLDHV001"
	;
	IF (STRLEN(FAIL_MSG) > 2) THEN
		GOTO FAIL

	RETURN
;===============================================================================
;		Non Draft PR Matrix Request Check		;joh022
;===============================================================================
PRMREQUESTCHK:
	; p7ilk writes to the the allof6 variables
;	PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 = PRM_DYNREL_HOLD_REQ:DIN_VAL
;	PRM_DYNREL_PROD_REQ_DINVAL_ALLOF6 = PRM_DYNREL_PROD_REQ:DIN_VAL
;	PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 = PRM_DYNREL_OPEN_PATH_REQ:DIN_VAL
	;
	; First check if Non-Draft PR Matrix is requesting or not requesting
;joh022	GOSUB READBRANDNUMBER
;joh022	SA_TMP_INT = STRLEN(PRM_BRAND_SG)
;joh022	SA_EX1_FG = COMPAR(PRM_BRAND_SG,BRAND_ID,SA_TMP_INT, EQ)
;joh022	SA_EX2_FG = (STRLEN(BRAND_ID) = SA_TMP_INT)
;joh022	;
;joh022	; As well as if the hold request is ON (hold) or Heartbeat is OFF (not ok)
;joh022	EXPR1 = PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 | (PRMATRIX_HEARTBEAT_OK_FG_ALLOF6 = 0)
;joh022	EXPR2 = (SA_EX1_FG = 0) | (SA_EX2_FG = 0)
;joh022	;
;joh022	IF (PRM_DYNREL_PROD_REQ_DINVAL_ALLOF6 = 0) | EXPR1 | EXPR2 THEN	
;joh022		BEGIN
;joh022		; if it was previously requesting, clear signals once (to limit x-pcm comm)
;joh022		IF PRM_REQUEST_INT > 0 THEN
;joh022			BEGIN
;joh022			TURNOFF DYNREL_PRM_AVAIL_ACK 		
;joh022			TURNOFF DYNREL_PRM_ACTIVE_ACK
;joh022			;
;joh022			PRM_BRAND_SG = ""			; force check of brand next time through
;joh022			END
;joh022
;joh022		IF PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 THEN
;joh022			ERROR_STRING = "PRM HOLD REQUEST IS ON"
;joh022                IF (PRMATRIX_HEARTBEAT_OK_FG_ALLOF6 = 0) THEN
;joh022			ERROR_STRING = "P7/PRM HEARTBEAT NOT OK"
;joh022
;joh022		SA_TMP_INT = STRLEN(PRM_BRAND_SG)
;joh022		SA_EX1_FG = COMPAR(PRM_BRAND_SG,BRAND_ID,SA_TMP_INT, EQ)
;joh022		SA_EX2_FG = (STRLEN(BRAND_ID) = SA_TMP_INT)
;joh022		IF ( (SA_EX1_FG = 0) | (SA_EX2_FG = 0) ) & (PRM_DYNREL_BRAND_AIMEAS_ALLOF6 <= 0) THEN
;joh022			ERROR_STRING = "PRM BRAND EMPTY"
;joh022		ELSE IF ( (SA_EX1_FG = 0) | (SA_EX2_FG = 0) )  & (STRLEN(PRM_BRAND_SG) < 2) THEN
;joh022			BEGIN
;joh022			SA_TMP_INT = FLTCNV(SA_TMP_SG, PRM_DYNREL_BRAND_AIMEAS_ALLOF6,3,0)
;joh022			SA_TMP_INT = APPEND(ERROR_STRING, "PRM BRAND NUM ",SA_TMP_SG," INVALID")
;joh022			END
;joh022		ELSE IF (SA_EX1_FG = 0) | (SA_EX2_FG = 0) THEN
;joh022			SA_TMP_INT = APPEND(ERROR_STRING, "PRM ",PRM_DYNREL_BRAND_ALLOF6," BRAND REQ MISMATCH")
;joh022
;joh022		PRM_REQUEST_INT = 0
;joh022		END
;joh022	; PRM Requesting, have not validated brand
;joh022	ELSE IF PRM_REQUEST_INT = 0 THEN
;joh022		BEGIN
;joh022		GOSUB READBRANDNUMBER
;joh022		;
;joh022		SA_TMP_INT = STRLEN(PRM_BRAND_SG)
;joh022		SA_EX1_FG = COMPAR(PRM_BRAND_SG,BRAND_ID,SA_TMP_INT, EQ)
;joh022		SA_EX2_FG = (STRLEN(BRAND_ID) = SA_TMP_INT)
;joh022		IF SA_EX1_FG & SA_EX2_FG THEN
;joh022			BEGIN
;joh022			TURNON DYNREL_PRM_AVAIL_ACK
;joh022			PRM_REQUEST_INT = 1
;joh022			END
;joh022		ELSE
;joh022			BEGIN
;joh022			SA_TMP_INT = APPEND(ERROR_STRING, "PRM ",PRM_DYNREL_BRAND_ALLOF6," BRAND REQ MISMATCH")
;joh022			; if brand mismatches BUT PRM opens path anyway, goto fail to prevent crossing streams
;joh022			IF PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 THEN
;joh022				BEGIN
;joh022				FAIL_MSG = ERROR_STRING
;joh022				GOTO FAIL
;joh022				END
;joh022			END
;joh022		END
;joh022
;joh022	; IF Non-Draft PR Matrix is requesting AND the avail signal has been set, check for the path open signal
;joh022	IF PRM_REQUEST_INT = 1 THEN
;joh022		BEGIN
;joh022		SA_EX1_FG = PRMATRIX_HEARTBEAT_OK_FG_ALLOF6
;joh022
;joh022		IF SA_EX1_FG & PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 & (PRM_DYNREL_HOLD_REQ_DINVAL_ALLOF6 = 0) THEN
;joh022			BEGIN
;joh022			TURNON DYNREL_PRM_ACTIVE_ACK
;joh022			PRM_REQUEST_INT = 2
;joh022			END
;joh022		ELSE IF (PRM_DYNREL_OPEN_PATH_REQ_DINVAL_ALLOF6 = 0) THEN
;joh022			SA_2_MESSAGE = "WAITING FOR PRM PATH OPEN"
;joh022		END
;joh022	ELSE
;joh022		BEGIN
;joh022		IF INSTR(SA_2_MESSAGE, "PRM PATH OPEN") THEN
;joh022			SA_2_MESSAGE = ""
;joh022		END
;joh022			
;joh022	IF PRM_REQUEST_INT = 2 THEN
;joh022		BEGIN
;joh022                IF PRM_DYNREL_HOLD_REQ:DIN_VAL = 1 THEN
;joh022			BEGIN
;joh022			FAIL_MSG = "PRM HOLD REQUEST IS ON"
;joh022			GOTO FAIL
;joh022			END
;joh022		IF PRMATRIX_HEARTBEAT_OK_FG_ALLOF6 = 0 THEN
;joh022			BEGIN
;joh022			FAIL_MSG = "PRM HEARTBEAT IS NOT OK"
;joh022			GOTO FAIL
;joh022			END
;joh022		END
	;joh024 begin
	IF PRMATRIX_HEARTBEAT_OK_FG_ALLOF6 = 0 THEN 	
		BEGIN                               
		FAIL_MSG = "PRM HEARTBEAT IS NOT OK"
		GOTO FAIL                           
		END                                 
	;joh024 end

	RETURN

;==============================================================================
;                               RELEASE ALARMS	VCM000
;==============================================================================
;
RELALARMS:
        ; Give time for header to stabilize before checking alcohol, co2 and
        ; dissolved o2. Use header temperature and level drop ai 8690fi1 to 
	; determine if a pkg line is pulling beer

        EXPR1 = DYNRELSA_CONNECTION_FG_ALLOF6        ;VCM006
;        EXPR1 = EXPR1 & (STEP_TMR > 300);VCM015
        EXPR1 = EXPR1 & (SUS_1_TMR > 300) & (STEP_TMR > 300);VCM015
        EXPR1 = EXPR1 & ('8690FI1':AI_MEAS > 100)
        EXPR1 = EXPR1 & (DYNREL_TEMP:AI_MEAS < 36)

	IF EXPR1 THEN
            BEGIN
            GOSUB TURBALARM      ;VCM009
            GOSUB ALCOHOLALARM
            GOSUB REALARM      ;VCM011
            GOSUB SONICALARM      ;VCM013
         	IF (DO_CO2_START_DELAY_DONE = 0) THEN     ;VCM014 START
               BEGIN
               TIMERON DO_CO2_START_DELAY_TIMER
               IF (DO_CO2_START_DELAY_TIMER >= DO_CO2_START_DELAY_TIME) THEN
                  BEGIN
                  DO_CO2_START_DELAY_DONE = 1
                  TIMEROFF DO_CO2_START_DELAY_TIMER
                  TIMERCLR DO_CO2_START_DELAY_TIMER
                  END
               END
         	IF DO_CO2_START_DELAY_DONE THEN     ;VCM014
               BEGIN
               GOSUB DOALARM      ;VCM005
               GOSUB CO2ALARM
               END                                    ;VCM014 END
            END
          ELSE  ;reset timers in case they were already running
            BEGIN
            TIMEROFF SUS_5_TMR		;ALCOHOL Turnoff sustained condition timer 	
	         TIMERCLR SUS_5_TMR		;ALCOHOL Clear sustained condition timer 	
            TIMEROFF SUS_6_TMR		;CO2 Turnoff sustained condition timer 	
	         TIMERCLR SUS_6_TMR		;CO2 Clear sustained condition timer 	
            TIMEROFF SUS_7_TMR		;DO Turnoff sustained condition timer 	
	         TIMERCLR SUS_7_TMR		;DO Clear sustained condition timer 	
            TIMEROFF SUS_8_TMR	  ;VCM009;TURB Turnoff sustained condition timer 	
	         TIMERCLR SUS_8_TMR	  ;VCM009;TURB Clear sustained condition timer 	
            TIMEROFF SUS_9_TMR	  ;VCM011;RE Turnoff sustained condition timer 	
	         TIMERCLR SUS_9_TMR	  ;VCM011;RE Clear sustained condition timer 	
	         TIMEROFF PAAR_SONIC_VEL_CHANGE_TMR   ;VCM013
            TIMERCLR PAAR_SONIC_VEL_CHANGE_TMR	 ;VCM013
            DO_CO2_START_DELAY_DONE = 0
            TIMEROFF DO_CO2_START_DELAY_TIMER
            TIMERCLR DO_CO2_START_DELAY_TIMER
            END

	IF (STEP_TMR > 120) & (DYNREL_TEMP:AI_MEAS > 40) THEN
           ERROR_STRING = "HEADER TEMPERATURE > 40 DEG"

        EXPR1 = ('8690FI1':AI_MEAS > 100)	    ;VCM015
        EXPR1 = EXPR1 & (DYNREL_TEMP:AI_MEAS < 36)  ;VCM015

		IF EXPR1 THEN                       ;VCM015
		   TIMERON SUS_1_TMR                ;VCM015
		ELSE                                ;VCM015
		   BEGIN                            ;VCM015
		   TIMEROFF SUS_1_TMR		;VCM015
		   TIMERCLR SUS_1_TMR           ;VCM015
		   END                          ;VCM015

            GOSUB CHKPAARCOMM      ;VCM010

	RETURN

;==============================================================================
;                               FILL ALARMS	VCM000
;==============================================================================
FILLALARMS:
	IF (STEP_TMR > 120) & (STOP_TRAP_DEVIATION_FG = 1) THEN
            BEGIN
            TRAP_DEVIATION_FG = 0

;VCMMMM            EXPR1 = (AND(TRAP_DO_PTR:AI_CURAL,SB_HI))
            EXPR1 = (AND(TRAP_DO_PTR:AI_CURAL,SB_HIHI))
            EXPR1 = EXPR1 | (AND(TRAP_DO_PTR:AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND(TRAP_DO_PTR:AI_CURAL,SB_RANG))

            IF (EXPR1) THEN
               BEGIN
               ERROR_STRING = "TRAP DISSOLVED OXYGEN DEVIATN"
               TRAP_DEVIATION_FG = 1
               END

;VCMMMM            EXPR1 = (AND(TRAP_CO2_PTR:AI_CURAL,SB_LO+SB_HI))
            EXPR1 = (AND(TRAP_CO2_PTR:AI_CURAL,SB_LOLO+SB_HIHI))
            EXPR1 = EXPR1 | (AND(TRAP_CO2_PTR:AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND(TRAP_CO2_PTR:AI_CURAL,SB_RANG))

            IF (EXPR1) THEN
               BEGIN
               ERROR_STRING = "TRAP CO2 DEVIATION"
               TRAP_DEVIATION_FG = 1
               END


;VCMMMM            EXPR1 = (AND(TRAP_ALC_PTR:AI_CURAL,SB_LO+SB_HI))
            EXPR1 = (AND(TRAP_ALC_PTR:AI_CURAL,SB_LOLO+SB_HIHI))
            EXPR1 = EXPR1 | (AND(TRAP_ALC_PTR:AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND(TRAP_ALC_PTR:AI_CURAL,SB_RANG))

            IF (EXPR1) THEN
               BEGIN
               ERROR_STRING = "TRAP ALCOHOL DEVIATION"
               TRAP_DEVIATION_FG = 1
               END

            IF (TRAP_DEVIATION_FG = 1) THEN
               TIMERON TRAP_DEVIATION_TMR
             ELSE
               BEGIN
               TIMEROFF TRAP_DEVIATION_TMR
               TIMERCLR TRAP_DEVIATION_TMR
               END

	    IF (TRAP_DEVIATION_TMR >= TRAP_DEVIATION_TIME) THEN	
               BEGIN
               STOP_TRAP_DEVIATION_FG = 0
               TIMEROFF TRAP_DEVIATION_TMR
               TIMERCLR TRAP_DEVIATION_TMR
               END
            END

        IF (STOP_TRAP_DEVIATION_FG = 0) THEN
           BEGIN
           SA_MESSAGE = "TRAP FILL DEVIATION"
           SA_3_MESSAGE = "USE TRAP RESET TO RESTART FILL"
           LAMP LAMP_ADI,LAMP_NUMBER,RED
           LAMP LAMP5_ADI,LAMP5_NUMBER, RED
           LAST_LAMP_STATE = RED
           WAIT 1
           END
         ELSE
           SA_3_MESSAGE = ""

	RETURN

;==============================================================================
;                                CIP CONTROL                            
;==============================================================================
CIPCNTRL:
        IF (HI_LVL_FG) | (HIHI_LVL_FG) THEN
                BEGIN
                IF ('8690P12':DEV_STAT = S_0) THEN
                        BEGIN
                        GOSUB O90XV23                   ;OPEN 8690XV23
                        GOSUB O8690P12                  ;START CSR/STUMP PUMP
                        END
                END
        IF (EMPTY_FG) & !(BOTTOM_RIN_FG) THEN
                BEGIN
                GOSUB C8690P12                          ;STOP CSR/STUMP PUMP
                GOSUB C90XV23                           ;CLOSE 8690XV23
                END

        RETURN

;==============================================================================
;                       SEAT CIP                                
;==============================================================================
;This routine cycles the seat lifters on the matrix valves during a CIP.

SEATCIP:
        IF (MATRIX_TMR > 180) THEN 
                BEGIN
                TIMERCLR MATRIX_TMR
                TIMERCLR SEAT_TMR
                TIMERON SEAT_TMR
;mw025                TURNON '8690XV15U'                      ;OPEN TRAP 1,2 & 3 UPPER SEAT
		TURNON MLD_TRAP_INLET_SEAT_REQ                    ;OPNE SEAT	;mw025
;jfh                TURNON '8690XV16U'                      ;OPEN TRAP 2&3 UPPER SEAT       
                IF (SEAT_TMR > 5) THEN
                        BEGIN
;mw025                        TURNOFF '8690XV15U'             ;CLOSE TRAP 1 UPPER SEAT
			TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
;jfh                        TURNOFF '8690XV16U'             ;CLOSE TRAP 2&3 UPPER SEAT
                        TIMEROFF SEAT_TMR
                        END
                END
        RETURN
                

;==============================================================================
;                       LEVEL CHECK
;==============================================================================
LEVELCHK:
        HIHI_LVL_FG = 0
        HI_LVL_FG = 0
;        RELEASE_LVL_FG = 0
        LO_LVL_FG = 0
        LOLO_LVL_FG = 0
;        PACK_LVL_FG = 0
        EMPTY_FG = 0
                                                
        IF (DYNREL_TNK_LVL:AI_MEAS >= RELEASE_LVL)THEN
                BEGIN
                TEMP_FG = 0
                GOSUB RELEASELVL                        ;RELEASE LEVEL
                IF (TEMP_FG) THEN
                        BEGIN
                        RELEASE_LVL_FG  = 1
                        PACK_LVL_FG = 1       ;Not release state
                        IF (SA_STATE!=8)&(SA_STATE!=19) THEN
			                  BEGIN					     ;TGD002
			                  TEMP_INT = FLTCNV(TEMP_SG,RELEASE_LVL,3,0)
			                     TEMP_INT = APPEND(SA_2_MESSAGE,"TANK ABOVE RELEASE LVL ",TEMP_SG," BLS")
;TGD002                        SA_2_MESSAGE = "DYNREL ABOVE RELEASE LEVEL"
			                  END
                        END
                     ELSE
                        BEGIN
                        RELEASE_LVL_FG  = 0
                        PACK_LVL_FG = 0       ;Not release state
                        END
         		END

        IF (DYNREL_TNK_LVL:AI_MEAS >= HIHI_LVL) THEN
                BEGIN
                TEMP_FG = 0
                HIHI_LVL_FG = 0
                GOSUB TNKHIHILVL                        ;TANK HIHI LEVEL
                IF (TEMP_FG = 1) THEN
                        BEGIN
                        HIHI_LVL_FG = 1
                        PACK_LVL_FG = 1
                        ERROR_STRING = "DYNREL TANK HIHI LEVEL"
                        END
               END
        IF (DYNREL_TNK_LVL:AI_MEAS < HIHI_LVL)&(DYNREL_TNK_LVL:AI_MEAS >= HI_LVL) THEN
                BEGIN
                TEMP_FG = 0
                HI_LVL_FG = 0
                GOSUB TNKHILVL                          ;TANK HI LEVEL
                IF (TEMP_FG = 1) THEN
                        BEGIN
                        HI_LVL_FG = 1
                        PACK_LVL_FG = 1
			IF (STRLEN(ERROR_STRING) = 0) THEN
	                        ERROR_STRING = "DYNREL TANK HI LEVEL"
                        END
                END
        IF (DYNREL_TNK_LVL:AI_MEAS < LO_LVL)&(DYNREL_TNK_LVL:AI_MEAS >= LOLO_LVL) THEN
                BEGIN
                TEMP_FG = 0
                LO_LVL_FG = 0
                GOSUB TNKLOLVL                          ;TANK LO LEVEL
                IF (TEMP_FG) THEN
                        BEGIN
                        LO_LVL_FG = 1
                        PACK_LVL_FG = 1
			IF (STRLEN(ERROR_STRING) = 0) THEN
	                        ERROR_STRING = "DYNREL TANK LO LEVEL"
                        END
                END
        IF (DYNREL_TNK_LVL:AI_MEAS < LOLO_LVL)&(DYNREL_TNK_LVL:AI_MEAS >= EMPTY_LVL)  THEN
                BEGIN
                TEMP_FG = 0
                LOLO_LVL_FG = 0
                GOSUB TNKLOLOLVL                        ;TANK LOLO LEVEL
                IF (TEMP_FG) THEN
                        BEGIN
                        LOLO_LVL_FG = 1
			IF (STRLEN(ERROR_STRING) = 0) THEN
	                        ERROR_STRING = "DYNREL TANK LOLO LEVEL"
                        END
                END

        IF (DYNREL_TNK_LVL:AI_MEAS < EMPTY_LVL) THEN
                BEGIN
                TEMP_FG = 0
;                EMPTY_FG = 0
                GOSUB EMPTYLVL                          ;EMPTY LEVEL
                IF (TEMP_FG) THEN
                        BEGIN
                        EMPTY_FG = 1
			IF (STRLEN(ERROR_STRING) = 0) THEN
	                        ERROR_STRING = "DYNREL TANK EMPTY"
                        END
                      ELSE
                        EMPTY_FG = 0
                END

        RETURN


;==============================================================================
;                       CONTINUOUS CHECKS
;==============================================================================
CONTCHK:
	GOSUB GETPLCPAARSTAT		;Get paar heartbeat & status from plc	;acj013
        
        BRAND_ID = BRAND_ID_REQ
        DYN_5F3_BRAND_ID_ALLOF6 = BRAND_ID    ;VCM008

        IF ('6CSTDYN':DIN_VAL) & COMPAR(SA_STATUS,"STUMP TO PR",11,NE) THEN
                ERROR_STRING = "PR WATER PACK SELECTOR ON"
        
;JMS004        IF  (CO2_XFER_TNK_FAIL_FG_CO2COM) THEN
        IF  (CO2_PRT_FAIL_FG_CO2COM) THEN 
                BEGIN
;JMS004                ERROR_STRING = "1OLB CO2 SUPPLY FAILURE"
                ERROR_STRING = "12LB CO2 SUPPLY FAILURE"
                CNTRPRESS_FG = 0
                DONT_FAIL_OUTLET_FG = 0 ;VCM016
                GOSUB C2XV31                    ;CLOSE 8502XV31         
                TURNON 'DYNALARM'       ;LAMP AND AUDIBLE ALARM 
                FAIL_MSG = ERROR_STRING 
	             GOTO FAIL
                END

                    
        IF !(DYNREL_BREAKER_BAR:DIN_VAL) THEN           ;8502PSE31      ;JT000
                BEGIN
                ERROR_STRING = "DYNREL BREAKER BAR, FAILURE"
                CNTRPRESS_FG = 0
                DONT_FAIL_OUTLET_FG = 0 ;VCM016
;               PURGE_DONE_FG = 0
                GOSUB C2XV31                    ;CLOSE 8502XV31
                TURNON 'DYNALARM'       ;LAMP AND AUDIBLE ALARM 
                FAIL_MSG = ERROR_STRING 
	             GOTO FAIL
                END

         
        IF !(DYNREL_RUPTURE_DISK:DIN_VAL) THEN          ;8502PSV31      ;JT000
                BEGIN
                ERROR_STRING = "DYNREL RUPTURE DISK, FAILURE"
                CNTRPRESS_FG = 0
                DONT_FAIL_OUTLET_FG = 0 ;VCM016
;               PURGE_DONE_FG = 0
                GOSUB C2XV31                    ;CLOSE 8502XV31
                TURNON 'DYNALARM'       ;LAMP AND AUDIBLE ALARM 
                FAIL_MSG = ERROR_STRING 
	             GOTO FAIL
                END

;NOT IN SYSTEM OFF, CIP, VENT , MAINT OR RINSE W/ DILUENT
        
;JT000        IF (SA_STATE >= 2) & (SA_STATE <= 13) THEN      
        IF (((SA_STATE >= 2) & (SA_STATE <= 13)) | (SA_STATE = 18) | (SA_STATE = 19)) THEN      
                BEGIN
                IF (HIHI_LVL_FG)|(HI_LVL_FG) THEN 
                        BEGIN
                        IF (SA_STATE != 2) & (SA_STATE != 10) THEN
	                        GOSUB C2XV315                   ;CLOSE 8502XV315
                        ERROR_STRING = "DYNREL HI LVL. TRAP STOPPED"
                        HI_LVL_FILL_STOPPED_FG = 1
                        END
                ELSE
                        IF (HI_LVL_FILL_STOPPED_FG) & (DYNREL_TNK_LVL:AI_MEAS <= (HI_LVL - 300)) THEN
                                BEGIN
                                HI_LVL_FILL_STOPPED_FG = 0
                                END
                ELSE
                        IF (HI_LVL_FILL_STOPPED_FG) & (DYNREL_TNK_LVL:AI_MEAS >(HI_LVL - 500)) THEN
                                ERROR_STRING = "START FILL @500 BBLS < HI LVL"

        IF (SA_STATE = 8) | (SA_STATE = 19) & RELEASE_FG THEN  ;Release state    
           BEGIN                      ;VCM004
            EXPR1 = (DYNREL_FLOW_METER:AI_MEAS > 50) ;VCM017
            EXPR1 = EXPR1 & (!AND('8690P11':DEV_STAT,S_1))
            EXPR1 = EXPR1 & (DYNREL_OUT_PSI:AI_MEAS < (DYNREL_FLOW_PC_SETPT - DYNREL_FLOW_DEADBAND))
;           IF !AND('8690P11':DEV_STAT,S_1) &(DYNREL_OUT_PSI:AI_MEAS < (DYNREL_FLOW_PC_SETPT - DYNREL_FLOW_DEADBAND)) THEN
            IF EXPR1 THEN
              ERROR_STRING = "8690P11 PUMP NOT ON"
         ELSE
           IF !AND('8690XV29':DEV_STAT,S_1) THEN
              ERROR_STRING = "8690XV29 VALVE NOT OPEN"
         ELSE
           IF !AND('8690XV25':DEV_STAT,S_1) THEN
              ERROR_STRING = "8690XV25 VALVE NOT OPEN"
;joh024         ELSE
;joh024           IF !AND('8690XV12':DEV_STAT,S_1) THEN
;joh024              ERROR_STRING = "8690XV12 VALVE NOT OPEN"
         ELSE
           IF !AND('8690XV11':DEV_STAT,S_0) THEN
              ERROR_STRING = "8690XV11 VALVE NOT CLS"
;joh024         ELSE
;joh024           IF !AND('8690XV22':DEV_STAT,S_1) THEN
;joh024              ERROR_STRING = "8690XV22 VALVE NOT OPEN"
;joh024         ELSE
;joh024           IF !AND('8690XV13':DEV_STAT,S_1) THEN
;joh024              ERROR_STRING = "8690XV13 VALVE NOT OPEN"
;VCM020         ELSE
;VCM020           IF !AND('8690P13':DEV_STAT,S_1) THEN
;VCM020              ERROR_STRING = "8690P13 LOOP PUMP NOT ON"
;joh024         ELSE
;joh024           IF !AND('8690XV19':DEV_STAT,S_0) THEN
;joh024              ERROR_STRING = "8690XV19 VALVE NOT CLS"
;joh024         ELSE
;joh024           IF !AND('8690XV20':DEV_STAT,S_0) THEN
;joh024              ERROR_STRING = "8690XV20 VALVE NOT CLS"
;joh024         ELSE
;joh024           IF !AND('8690XV21':DEV_STAT,S_0) THEN
;joh024              ERROR_STRING = "8690XV21 VALVE NOT CLS"
         ELSE
           IF !AND('8690XV27':DEV_STAT,S_0) THEN
              ERROR_STRING = "8690XV27 VALVE NOT CLS"
         ELSE
           IF !AND('8690XV28':DEV_STAT,S_0) THEN
              ERROR_STRING = "8690XV28 VALVE NOT CLS"
         ELSE
           IF !AND('8502XV317':DEV_STAT,S_0) THEN
              ERROR_STRING = "8502XV317 VALVE NOT CLS"
           END

                
;DO NOT CHECK TRAPS IN PURGE STATE
;                IF !(TRAP_FILL_OK_FG_POLCOM)&(TRAP_SEL_FG) THEN 
                IF !(TRAP_SEL_FG) & ((SA_STATE = 6) | (SA_STATE = 8)) THEN 
                IF !(TRAP_SEL_FG) & ((SA_STATE = 6) | (SA_STATE = 8) | (SA_STATE = 3)) THEN 
                        BEGIN
                        GOSUB C2XV315                   ;CLOSE 8502XV315
                        GOSUB CTRAPVLV                  ;CLOSE TRAP VALVE
                        ERROR_STRING = "TRAP FILTER OFF STREAM"
                        END
                        
					 IF (SA_STATE = 6) | (SA_STATE = 8) & (TRAP_FILL_OK_FG_POLCOM_ALLOF6 =0) THEN   ;VCM022
								BEGIN
								IF('BMXD3F3TP1':DIN_VAL = 1) THEN
									ERROR_STRING = "FILL WAITING FOR BMX TRAP1"
								IF('BMXD3F3TP2':DIN_VAL = 1) THEN
									ERROR_STRING = "FILL WAITING FOR BMX TRAP2"
								IF('BMXD3F3TP3':DIN_VAL = 1) THEN
									ERROR_STRING = "FILL WAITING FOR BMX TRAP3"
								END

					 IF ('8502HV320':DEV_STAT = S_1) & (SA_STATE != 3) THEN
                        BEGIN
                        FAIL_MSG = "CSS HAND VALVE OPEN"
                        GOTO FAIL
                        END

                IF ('8502XV314':DEV_STAT = S_1) THEN
                        BEGIN
                        FAIL_MSG = "CSS VALVE OPEN"
                        GOTO FAIL
                        END
                
;                IF ('6PX110':DIN_VAL) THEN
;                        BEGIN
;                        FAIL_MSG = "CSR SWING PIPE IN PLACE"
;                        GOTO FAIL
;                        END
                
                
;JMS004                IF ('8502HV35':DEV_STAT = S_0) & (SA_STATE != 3) THEN
;JMS004                        BEGIN
;JMS004                        FAIL_MSG = "CNTRPRESS HAND VALVE CLOSED"
;JMS004                        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;JMS004                        GOTO FAIL
;JMS004                        END

                
;DO NOT CHECK CNTRPRESS VALVE IN PURGE STATE
;JMS004                IF ('8502XV31':DEV_STAT = S_0)&(SA_STATE != 2) THEN
;JMS004                        BEGIN
;JMS004                        FAIL_MSG = "CNTRPRESS VALVE CLOSED"
;JMS004                        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;JMS004                        GOTO FAIL               
;JMS004                        END

                IF (SA_STATE = 8) | (SA_STATE = 19) THEN          ;JMS004
                  IF ('8502XV31':DEV_STAT = S_0) THEN             ;JMS004
                        BEGIN                                     ;JMS004
                        FAIL_MSG = "CNTRPRESS VALVE CLOSED"       ;JMS004
                        DONT_FAIL_OUTLET_FG = 0 ;VCM016           ;JMS004
                        GOTO FAIL                                 ;JMS004
                        END                                       ;JMS004



                IF ('8502XV32':DEV_STAT = S_1) | ('8690XV28':DEV_STAT = S_1) THEN
                        BEGIN
                        FAIL_MSG = "VENT VALVES OPEN"
                        GOTO FAIL
                        END
                END

;SYSTEM IN CIP (ACID OR CAUSTIC)
;JT000, FOLLOWING FUNCTION HAD BEEN MOVED TO CIP PROGRAM BECAUSE ABORTING SA DURING CIP

        IF (COMPAR(SA_STATUS,"ACID CIP",8,EQ)) | (COMPAR(SA_STATUS,"CAUSTIC CIP",11,EQ)) THEN
                BEGIN
;JMS004                IF ('8502HV35':DEV_STAT = S_0) THEN
;JMS004                       BEGIN
;JMS004                        FAIL_MSG = "CNTRPRESS HAND VALVE CLOSED"
;JMS004                        GOTO FAIL
;JMS004                        END
                
                IF ('8502HV320':DEV_STAT = S_0) THEN
                        BEGIN
                        FAIL_MSG = "CSS HAND VALVE CLOSED"
                        GOTO FAIL
                        END

                IF ('8502XV314':DEV_STAT = S_0) THEN
                        BEGIN
                        FAIL_MSG = "CSS VALVE CLOSED"
                        GOTO FAIL
                        END

                IF !('6PX110':DIN_VAL) THEN
                        BEGIN
                        FAIL_MSG = "CSR SWING PIPE NOT IN PLACE"
                        GOTO FAIL
                        END
                END

        IBAD_FG = 0             ;clear ibad flag each time through

 
        IF AND(DYNREL_TNK_LVL:AI_CURAL, SB_IBAD) THEN
                BEGIN
                FAIL_MSG = "8502LI3 TANK LEVEL IBAD"
                IBAD_FG = 1
                END

        
    IF (SA_STATE = 8) | (SA_STATE = 19) & RELEASE_FG THEN  ;Release state
      BEGIN
      IF (STEP_TMR > 120) & ('8690FI1':AI_MEAS > 100) & (DYNREL_TEMP:AI_MEAS < 40) THEN
        BEGIN
        IF AND(DYNREL_OUT_PSI:AI_CURAL, SB_IBAD) THEN
                BEGIN
                FAIL_MSG = "8690PC37 OUT HDR PRESSURE IBAD"
                IBAD_FG = 1
                END


;MOVED TO DO ALARM SUBS
;        IF AND(DYNREL_DO_LVL:AI_CURAL, SB_IBAD) THEN
;                BEGIN
;                FAIL_MSG = "8690AT43 D.O. LEVEL IBAD"
;                IBAD_FG = 1
;                END
;
;MOVED TO CO2 ALARM SUBS
;        IF AND(DYNREL_CO2_LVL:AI_CURAL, SB_IBAD) THEN
;                BEGIN
;                FAIL_MSG = "8690AT42 CO2 LEVEL IBAD"
;                IBAD_FG = 1
;                END

        IF AND(DYNREL_TEMP:AI_CURAL, SB_IBAD) THEN
                BEGIN
                FAIL_MSG = "8690TT47 HDR TEMPERATURE IBAD"
                IBAD_FG = 1
                END
        END
      END

        IF (IBAD_FG = 1) THEN
                TIMERON IBAD_TMR
        ELSE
                BEGIN
                TIMEROFF IBAD_TMR
                TIMERCLR IBAD_TMR 
                END
        IF (IBAD_TMR > IBAD_SECONDS) THEN
                GOTO FAIL                       ;FAIL

        IF (STEP_TMR >= 32700) THEN
	   BEGIN
           STEP_TMR = 301
           TIMERON STEP_TMR
           END

        IF (SUS_1_TMR >= 32700) THEN
	   BEGIN
           SUS_1_TMR = 301
           TIMERON SUS_1_TMR
           END

      IF  AND(TRAP_VALVE_PTR:DEV_STAT,S_1) & (TRAP_SEL_FG) THEN	
        BEGIN
        IF (TRAP_HDR_SEL_ALLOF6 = 22) THEN  ;TRAP 1 UNIT #
                BEGIN
                '8690FI1':IOS_TG:1 = 1
                '8690FI1':IOS_TG:2 = 0
                '8690FI1':IOS_TG:3 = 0
                END
        IF (TRAP_HDR_SEL_ALLOF6 = 23) THEN  ;TRAP 2 UNIT #
                BEGIN
                '8690FI1':IOS_TG:1 = 0
                '8690FI1':IOS_TG:2 = 1
                '8690FI1':IOS_TG:3 = 0
                END
        IF (TRAP_HDR_SEL_ALLOF6 = 24) THEN  ;TRAP 3 UNIT #
                BEGIN
                '8690FI1':IOS_TG:1 = 0
                '8690FI1':IOS_TG:2 = 0
                '8690FI1':IOS_TG:3 = 1
                END
        END
      ELSE
                BEGIN
                '8690FI1':IOS_TG:1 = 0
                '8690FI1':IOS_TG:2 = 0
                '8690FI1':IOS_TG:3 = 0
                END


        RETURN

;Begin of JT000
;==============================================================================
;                       RESUME COUNTER PRESSURE CHECK           JT000
;==============================================================================
RESCNTRPRESSCHK:
        IF (SC_SA_RES_CNTRPRESS_CMD) THEN
                BEGIN
                SC_SA_RES_CNTRPRESS_CMD = 0
                SA_2_MESSAGE = "RECONNECTING CNTRPRESS"
                GOSUB O2XV31            ;OPEN 8502XV31
                IF (((SA_STATE >= 3) & (SA_STATE <=13)) | (SA_STATE = 18) | (SA_STATE = 19)) THEN
			CNTRPRESS_FG = 1
                END

        RETURN

;==============================================================================
;                       CHANGE TRAP HEADER CHECK 		JT000
;==============================================================================
CHTRAPCHK:
        IF (SC_SA_CHANGE_TRAP_CMD) THEN
                BEGIN
                SA_2_MESSAGE = "CHANGE TRAP HDR"
                GOSUB SELECTHDR
                SC_SA_CHANGE_TRAP_CMD = 0
                END

        RETURN

;End of JT000


;==============================================================================
;               DYNREL LOW FLOW SUSTAINED CONDITION CHECK
;==============================================================================
LOWFLOW:

        SUS_COND = (DYNREL_FLOW_METER:AI_MEAS <= DYNREL_FLOW_LO_LIM)
        SUS_TIME = FLOW_LO_TIME
        ASSIGN TEMP_PTR = SUS_1_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK EMPTY LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
EMPTYLVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS <= EMPTY_LVL)        
        SUS_TIME = MIN_TIME
        ASSIGN TEMP_PTR = SUS_4_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK HI LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
TNKHILVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS >= HI_LVL)&(DYNREL_TNK_LVL:AI_MEAS < HIHI_LVL)
        SUS_TIME = MAX_TIME     
        ASSIGN TEMP_PTR = SUS_3_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK HIHI LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
TNKHIHILVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS >= HIHI_LVL)
        SUS_TIME = MAX_TIME     
        ASSIGN TEMP_PTR = SUS_2_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK LO LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
TNKLOLVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS < LO_LVL)&(DYNREL_TNK_LVL:AI_MEAS >= LOLO_LVL)
        SUS_TIME = MAX_TIME     
        ASSIGN TEMP_PTR = SUS_3_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK LOLO LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
TNKLOLOLVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS < LOLO_LVL)
        SUS_TIME = MAX_TIME     
        ASSIGN TEMP_PTR = SUS_2_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK RELEASE LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
RELEASELVL:

        SUS_COND = (DYNREL_TNK_LVL:AI_MEAS >= RELEASE_LVL)
        SUS_TIME = MAX_TIME     
        ASSIGN TEMP_PTR = SUS_4_TMR
        GOSUB SUSCOND                   ;SUSTAINED CONDITION

        RETURN

;==============================================================================
;               DYNREL TANK ALCOHOL LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
ALCOHOLALARM:      ;VCM005

   IF (PAAR_PREVIOUS_ALCOHOL = 'PAAR2$D216':CB_OTVL:1)&(PAAR_ALCOHOL_CHECK < 100) THEN
         PAAR_ALCOHOL_CHECK = PAAR_ALCOHOL_CHECK + 1
       ELSE 
         PAAR_ALCOHOL_CHECK = 0

      IF PAAR_ALCOHOL_CHECK > 60 THEN
         ERROR_STRING = "ALCOHOL FROZEN - CHECK PAAR"


   		PAAR_PREVIOUS_ALCOHOL = 'PAAR2$D216':CB_OTVL:1

            EXPR1 = (AND('PAAR2$D216':AI_CURAL,SB_LO+SB_HI))
            EXPR1 = EXPR1 | (AND('PAAR2$D216':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('PAAR2$D216':AI_CURAL,SB_RANG))

        IF EXPR1 THEN
	        ERROR_STRING = "REL HEADER ALCOHOL DEVIATION"

            EXPR1 = (AND('PAAR2$D216':AI_CURAL,SB_LOLO+SB_HIHI))
            EXPR1 = EXPR1 | (AND('PAAR2$D216':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('PAAR2$D216':AI_CURAL,SB_RANG))

        IF EXPR1 THEN
                BEGIN
	        ERROR_STRING = "REL HEADER ALCOHOL DEVIATION"

	     	IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               	BEGIN
                	ERROR_STRING2 = "STOP FILLERS IN "
                	TEMP_INT2 = (ALCOHOL_ALARM_TIME-SUS_5_TMR)
                	TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
                	TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," SEC")
                	END
                END

	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               TEMP_FG = 0
	            SUS_COND = EXPR1
               SUS_TIME = ALCOHOL_ALARM_TIME     
               ASSIGN TEMP_PTR = SUS_5_TMR
	            GOSUB SUSCOND                   ;SUSTAINED CONDITION
               END
            ELSE
               BEGIN
               TIMERCLR SUS_5_TMR
               TIMEROFF SUS_5_TMR
               TEMP_FG = 0
               END

        GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM009

        RETURN

;==============================================================================
;               DYNREL TANK RE LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
REALARM:      ;VCM011

            EXPR1 = (AND('PAAR2$D215':AI_CURAL,SB_LO+SB_HI))
            EXPR1 = EXPR1 | (AND('PAAR2$D215':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('PAAR2$D215':AI_CURAL,SB_RANG))

        IF EXPR1 THEN
	        ERROR_STRING = "REL HEADER RE DEVIATION"

            EXPR1 = (AND('PAAR2$D215':AI_CURAL,SB_LOLO+SB_HIHI))
            EXPR1 = EXPR1 | (AND('PAAR2$D215':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('PAAR2$D215':AI_CURAL,SB_RANG))

        IF EXPR1 THEN
                BEGIN
	        ERROR_STRING = "REL HEADER RE DEVIATION"

	     	IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               		BEGIN
                	ERROR_STRING2 = "STOP FILLERS IN "
                	TEMP_INT2 = (RE_ALARM_TIME-SUS_9_TMR)
                	TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
                	TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," SEC")
                	END
                END

	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               TEMP_FG = 0
	            SUS_COND = EXPR1
               SUS_TIME = RE_ALARM_TIME     
               ASSIGN TEMP_PTR = SUS_9_TMR
	            GOSUB SUSCOND                   ;SUSTAINED CONDITION
               END
            ELSE
               BEGIN
               TIMERCLR SUS_9_TMR
               TIMEROFF SUS_9_TMR
               TEMP_FG = 0
               END

        GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM011

        RETURN

;==============================================================================
;               DYNREL TANK CO2 LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
CO2ALARM:          ;VCM005
            EXPR1 = (AND('8690AT42':AI_CURAL,SB_LOLO+SB_HIHI))
            EXPR1 = EXPR1 | (AND('8690AT42':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('8690AT42':AI_CURAL,SB_RANG))

        IF (EXPR1) THEN
        BEGIN
        IF AND(DYNREL_CO2_LVL:AI_CURAL, SB_IBAD) THEN
               ERROR_STRING = "8690AT42 CO2 LEVEL IBAD"
             ELSE
               ERROR_STRING = "REL HEADER CO2 DEVIATION"

	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               ERROR_STRING2 = "STOP FILLERS IN "
               TEMP_INT2 = (CO2_ALARM_TIME-SUS_6_TMR)
               TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
               TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," SEC")
               END
        END
               
	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               TEMP_FG = 0
      	      SUS_COND = EXPR1
	            SUS_TIME = CO2_ALARM_TIME     
	            ASSIGN TEMP_PTR = SUS_6_TMR
	            GOSUB SUSCOND                   ;SUSTAINED CONDITION
               END
            ELSE
               BEGIN
               TIMERCLR SUS_6_TMR
               TIMEROFF SUS_6_TMR
               TEMP_FG = 0
               END

	GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM009

        RETURN


;==============================================================================
;               DYNREL TANK D.O. LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
DOALARM:          ;VCM005

            EXPR1 = (AND('8690AT43':AI_CURAL,SB_HIHI))
            EXPR1 = EXPR1 | (AND('8690AT43':AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND('8690AT43':AI_CURAL,SB_RANG))

        IF (EXPR1) THEN
        BEGIN
        IF AND(DYNREL_DO_LVL:AI_CURAL, SB_IBAD) THEN
               ERROR_STRING = "8690AT43 DO LEVEL IBAD"
             ELSE
               ERROR_STRING = "REL HEADER D.O. HIGH"

	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               ERROR_STRING2 = "STOP FILLERS IN "
               TEMP_INT2 = (DO_ALARM_TIME-SUS_7_TMR)
               TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
               TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," SEC")
               END
        END
               
	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               TEMP_FG = 0
               SUS_COND = EXPR1
               SUS_TIME = DO_ALARM_TIME     
               ASSIGN TEMP_PTR = SUS_7_TMR
               GOSUB SUSCOND                   ;SUSTAINED CONDITION
               END
            ELSE
               BEGIN
               TIMERCLR SUS_7_TMR
               TIMEROFF SUS_7_TMR
               TEMP_FG = 0
               END


        GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM009

        RETURN


;==============================================================================
;               DYNREL TANK OUTLET TURBIDITY LEVEL SUSTAINED CONDITION CHECK
;==============================================================================
TURBALARM:          ;VCM009

            EXPR1 = (AND(DYNREL_OUT_TURBIDITY:AI_CURAL,SB_HIHI))
            EXPR1 = EXPR1 | (AND(DYNREL_OUT_TURBIDITY:AI_CURAL,SB_IBAD))
            EXPR1 = EXPR1 | (AND(DYNREL_OUT_TURBIDITY:AI_CURAL,SB_RANG))

        IF (EXPR1) THEN
        BEGIN
        IF AND(DYNREL_OUT_TURBIDITY:AI_CURAL, SB_IBAD) THEN
               ERROR_STRING = "8690AT40 TURBIDITY IBAD"
             ELSE
               ERROR_STRING = "REL HEADER TURBIDITY HIGH"

	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               ERROR_STRING2 = "STOP FILLERS IN "
               TEMP_INT2 = (TURB_ALARM_TIME-SUS_8_TMR)
               TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
               TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," SEC")
               END
        END
               
	     IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               BEGIN
               TEMP_FG = 0
	            SUS_COND = EXPR1
	            SUS_TIME = TURB_ALARM_TIME     
	            ASSIGN TEMP_PTR = SUS_8_TMR
	            GOSUB SUSCOND                   ;SUSTAINED CONDITION
               END
            ELSE
               BEGIN
               TIMERCLR SUS_8_TMR
               TIMEROFF SUS_8_TMR
               TEMP_FG = 0
               END

	 GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM009

        RETURN

;==============================================================================
;               DYNREL TANK PAAR2 SONIC VELOCITY CHANGE CHECK
;==============================================================================
SONICALARM:      ;VCM013
					       ;MINUTES
	EXPR1 = (PAAR_SONIC_VEL_CHANGE_TMR > 3)
							;VCM013
	IF (EXPR1) THEN
		BEGIN
		ERROR_STRING = "PAAR SONIC VEL NOT CHANGING"       

	     	IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
               		BEGIN
                	ERROR_STRING2 = "STOP FILLERS IN "
                	TEMP_INT2 = (PAAR_SONIC_FAIL_TIME - PAAR_SONIC_VEL_CHANGE_TMR)
                	TEMP_INT = FLTCNV(TEMP_SG,TEMP_INT2,4,0)
                	TEMP_INT = APPEND(ERROR_STRING2,ERROR_STRING2,TEMP_SG," MIN")
                	END
		END
;VCM021		EXPR1 = (PAAR_SONIC_VEL:AI_INVL = PAAR_PREVIOUS_SONIC_VEL)
	EXPR1 = (PAAR_ALCOHOL:AI_INVL = PAAR_PREVIOUS_SONIC_VEL);VCM021

	IF (RELEASE_ALARM_ENABLE_FG = 0) THEN ;Alarms enabled	
		BEGIN
		TEMP_FG = 0
		SUS_COND = EXPR1
		SUS_TIME = PAAR_SONIC_FAIL_TIME ;MINUTES    
		ASSIGN TEMP_PTR = PAAR_SONIC_VEL_CHANGE_TMR
		GOSUB SUSCOND                   ;SUSTAINED CONDITION
		GOSUB RELFAILCHK                ;SEE IF MET FAIL CONDITIONS VCM009
		END
	ELSE
		BEGIN
		TIMERCLR PAAR_SONIC_VEL_CHANGE_TMR
		TIMEROFF PAAR_SONIC_VEL_CHANGE_TMR
		TEMP_FG = 0
		END

	PAAR_PREVIOUS_SONIC_VEL = PAAR_ALCOHOL:AI_INVL   ;VCM021
;VCM021		PAAR_PREVIOUS_SONIC_VEL = PAAR_SONIC_VEL:AI_INVL

        RETURN

;===============================================================================
;		CHECK PAAR HEARTBEAT   VCM010
;===============================================================================
CHKPAARCOMM:

	;This routine will check the communications with the PAAR instrument
	;check PAAR status integer

	IF (RELEASE_ALARM_ENABLE_FG = 1) THEN    ;Alarms disabled
		RETURN

	IF (PAAR2_STATUS_INT = 1) THEN		;PAAR communications OK
		BEGIN
		TIMEROFF PAAR2_COMM_FAIL_TMR
		TIMERCLR PAAR2_COMM_FAIL_TMR
		END
	ELSE			;something is wrong with the PAAR unit
		BEGIN
		IF (PAAR2_COMM_FAIL_TMR >= PAAR2_COMM_FAIL_TIMEOUT*60) THEN
			BEGIN
			TIMEROFF PAAR2_COMM_FAIL_TMR
			IF (PAAR2_STATUS_INT = 0) THEN
;acj013		    ERROR_STRING = "PAAR DRIVER OFF"
				ERROR_STRING = "PAAR COMM OFF"		;acj013
			ELSE IF (PAAR2_STATUS_INT = -1) THEN
;acj013		    ERROR_STRING = "PAAR DRIVER COMM FAILURE"
				ERROR_STRING = "PAAR COMM FAILURE"		;acj013
			ELSE IF (PAAR2_STATUS_INT = -2) THEN
				ERROR_STRING = "PAAR UNIT MODULE FAILURE"
			RETURN
			END
		ELSE		;timer has not expired
			BEGIN
			TIMERON PAAR2_COMM_FAIL_TMR
			ERROR_STRING = "PAAR COMM FAILURE ACTIVE"	
			END
		END
;	RETURN							

PAARHEART:
	;check PAAR analyzer heartbeat

;	IF (PAAR2_MAINT_DIN:DIN_VAL) THEN
;		BEGIN						
;		TIMERCLR PAAR2_HEART_FAIL_TMR			
;		RETURN						
;		END						

	IF (PAAR2_HEARTBEAT_INT = PAAR2_LAST_HEARTBEAT_INT) THEN
		BEGIN
		IF (PAAR2_HEART_FAIL_TMR >= PAAR2_HEART_FAIL_TIMEOUT*60) THEN
			BEGIN
			TIMEROFF PAAR2_HEART_FAIL_TMR
;		PRINT LOG_ADI,"PAAR HEARTBEAT FAILURE"
			ERROR_STRING = "PAAR HEARTBEAT FAILURE"
			END
		ELSE		;timer has not expired
			TIMERON PAAR2_HEART_FAIL_TMR
		END
	ELSE		;heartbeat ok
		BEGIN
		TIMERCLR PAAR2_HEART_FAIL_TMR
		PAAR2_LAST_HEARTBEAT_INT = PAAR2_HEARTBEAT_INT
		END

	RETURN

;===============================================================================	;acj013
;		GET DYNREL PAAR HEARTBEAT & STATUS FROM PLC (CM42)			;acj013
;===============================================================================	;acj013
GETPLCPAARSTAT:										;acj013
	;Get values from paarcalc program (pcm5)			;acj016
;ldk030	PAAR2_HEARTBEAT_INT = PAARCALC_HEARTBEAT_INT_POLCOM		;acj016
;ldk030	PAAR2_STATUS_INT = DYNREL1_PAAR2_STATUS_INT_POLCOM		;acj016
	PAAR2_HEARTBEAT_INT = DYNREL_HEARTBEAT_INT_ALLOF6	;ldk030
	PAAR2_STATUS_INT = DYNREL_PAAR2_STATUS_INT_ALLOF6	;ldk030

;acj016	PLCREAD "P 17 40001",1,PAAR2_HEARTBEAT_INT,PLC_ERROR				;acj013
;acj016	GOSUB PLCERRCHK1								;acj013
;acj016	PLCREAD "P 17 40002",1,PAAR2_STATUS_INT,PLC_ERROR				;acj013

;acj016 PLCERRCHK1:										;acj013
;acj016	IF (PLC_ERROR > 0) THEN								;acj013
;acj016		BEGIN									;acj013
;acj016		PRINT LOG_ADI, "PLC READ ERROR NUMBER %i",PLC_ERROR			;acj013
;acj016		FAIL_MSG = "ERR READING PAAR STAT FROM PLC"				;acj013
;acj016		GOTO FAIL								;acj013
;acj016		END									;acj013
	RETURN										;acj013

;==============================================================================
;                       RELEASE FAIL ALARM CHECK
;==============================================================================
RELFAILCHK:                  ;VCM009

            IF TEMP_FG & (RELEASE_ALARM_ENABLE_FG = 0) THEN
               BEGIN
               TURNON 'DYNALARM'       ;LAMP AND AUDIBLE ALARM 
               RELEASE_FAIL_MSG = ERROR_STRING ;VCM017 ADD SEPERATE FAIL MSG FOR OLBA
               FAIL_MSG = ERROR_STRING 
      	      GOTO FAIL
               END

        RETURN

;==============================================================================
;                       SUSTAINED CONDITION CHECK
;==============================================================================
SUSCOND:
        IF (SUS_COND) THEN
                TIMERON TEMP_PTR
        ELSE
                BEGIN
                TIMEROFF TEMP_PTR
                TIMERCLR TEMP_PTR
                END
        IF (TEMP_PTR > SUS_TIME) THEN
                TEMP_FG = 1
        ELSE
                TEMP_FG = 0
        IF (TEMP_PTR > 32700) THEN      
                TEMP_PTR = (SUS_TIME + 1)       

        RETURN

;==============================================================================
;                               FB DILUENT PUSH
;==============================================================================
FBPUSH:
;joh024        GOSUB O90XV13                   ;OPEN 8690XV13
;joh024        GOSUB O90XV12                   ;OPEN 8690XV12
;joh024        GOSUB O90XV22                   ;OPEN 8690XV22
;joh024        GOSUB O90XV19                   ;OPEN 8690XV19
;joh024        GOSUB O90XV14                   ;OPEN 8690XV14
;joh024        GOSUB O90XV25                   ;OPEN 8690XV25
;TGD001        GOSUB O90XV29                   ;OPEN 8690XV29
;joh024        GOSUB O90XV27                   ;OPEN 8690XV27	TGD001
;joh024        ;VCM020 GOSUB O8690P13
;joh024
;joh024        TIMERON CONDCTVTY_TMR
;joh024
;joh024	EXPR1 = (OUTLET_CONDTVTY:DEV_STAT = S_0)
;joh024	EXPR1 = EXPR1 | (CONDCTVTY_TMR > CONDCTVTY_TIME)
;joh024	EXPR1 = EXPR1 & ('8502LI3':AI_MEAS >= (START_PUSH_BBLS + 15))
;joh024	EXPR1 = EXPR1 | (CONDCTVTY_TMR > 180)
;joh024
;joh024        IF EXPR1 | HIHI_LVL_FG THEN
;joh024                BEGIN
;joh024                TIMEROFF CONDCTVTY_TMR
;joh024                GOSUB C90XV29           ;CLOSE 8690XV29
;joh024                GOSUB C90XV25           ;CLOSE 8690XV25
;joh024                GOSUB C90XV14           ;CLOSE 8690XV14
;joh024                GOSUB C90XV22           ;CLOSE 8690XV22
;joh024                GOSUB C90XV12           ;CLOSE 8690XV12
;joh024                GOSUB C90XV13           ;CLOSE 8690XV13
;joh024                GOSUB C90XV19           ;CLOSE 8690XV19
;joh024                ;VCM020 GOSUB C8690P13
;joh024                FB_PUSH_FG = 1
;joh024                SA_2_MESSAGE = "FB DILUENT PUSH: FINISHED"
;joh024                PRINT LOG_ADI,"%p",SA_2_MESSAGE
;joh024                END             

	IF FB_PUSH_FG = 0 THEN							;joh024
		BEGIN								;joh024
		GOSUB OPNDYNRELBYPASSBLKVLV			;mldxv002	;joh024
       		GOSUB OPNDYNRELPCKGLNBLKVLV			;mldxv001	;joh024
		GOSUB OPNDYNRELDILUENTBLKVLV			;MLDXV004	;joh024
		GOSUB OPNDYNRELBEERBLKVLV			;MLDXV008	;mw025		
;mw025		GOSUB O90XV14                   ;OPEN 8690XV14			;joh024	
		GOSUB OPNDYNRELDILUENTVLV			;OPEN MLDXV009	;mw025
		GOSUB O90XV25                   ;OPEN 8690XV25			;joh024
		GOSUB O90XV27                   ;OPEN 8690XV27	TGD001		;joh024
                TIMERON PACK_TMR						;joh024
		IF (PACK_TMR > DIL_PACK_FB_TIME) THEN				;joh024
			BEGIN							;joh024
			TIMEROFF PACK_TMR					;joh024
			GOSUB C90XV29           ;CLOSE 8690XV29			;joh024
			GOSUB C90XV25           ;CLOSE 8690XV25                 ;joh024
;mw025			GOSUB C90XV14           ;CLOSE 8690XV14                 ;joh024
			GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
			GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002;joh024
			GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001;joh024
			GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004;joh024
			GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008;mw025
			FB_PUSH_FG = 1						;joh024
			SA_2_MESSAGE = "FB DILUENT PUSH: FINISHED"		;joh024
			PRINT LOG_ADI,"%p",SA_2_MESSAGE				;joh024
			END							;joh024             
		END								;joh024

        RETURN

;==============================================================================
;                               DILUENT PUSH INLET
;==============================================================================
DILPUSH:
;mw025        GOSUB O90XV14                   ;OPEN 8690XV14  
;mw025        GOSUB O90XV18                   ;OPEN 8690XV18
	GOSUB OPNDYNRELDILUENTVLV			;OPEN MLDXV009	;mw025
        GOSUB O2XV315                   ;OPEN 8502XV315
        TIMERON SEAT_TMR
        TIMERON CONDCTVTY_TMR
;        TURNON '8690XV16U'              ;OPEN TRAP2 & 3 MATRIX SEAT
;egs025        IF (SEAT_TMR > SEAT_TIME) THEN
;egs025                BEGIN
;egs025;mw025                TURNOFF '8690XV15U'     ;CLOSE TRAP1 MATRIX SEAT
;egs025		TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
;egs025;                TURNOFF '8690XV16U'     ;CLOSE TRAP2 & 3 MATRIX SEAT
;egs025                TIMEROFF SEAT_TMR
;egs025                END 
;egs025              ELSE
;egs025;mw025               TURNON '8690XV15U'              ;OPEN TRAP1,2 & 3 MATRIX SEAT
;egs025		TURNON MLD_TRAP_INLET_SEAT_REQ                    ;OPNE SEAT	;mw025

	EXPR1 = (INLET_CONDTVTY:DEV_STAT = S_0)
;JMS003	EXPR1 = EXPR1 | (CONDCTVTY_TMR > CONDCTVTY_TIME)
	EXPR1 = EXPR1 & ('8502LI3':AI_MEAS >= (START_PUSH_BBLS + 15))

;JMS003        IF EXPR1 | HIHI_LVL_FG THEN
        IF EXPR1 | HIHI_LVL_FG | (CONDCTVTY_TMR > CONDCTVTY_TIME) THEN      ;JMS003
                BEGIN
                TIMEROFF CONDCTVTY_TMR
;JT000          GOSUB O2XV315           ;OPEN 8502XV315
;JT000          GOSUB O90XV14           ;OPEN 8690XV14
;JT000          GOSUB O90XV18           ;OPEN 8690XV18
;mw025                TURNOFF '8690XV15U'             ;CLOSE TRAP 1 MATRIX SEAT
		TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
                TIMEROFF SEAT_TMR
                GOSUB C2XV315           ;CLOSE 8502XV315        ;JT000
;mw025                GOSUB C90XV14           ;CLOSE 8690XV14         ;JT000
;mw025                GOSUB C90XV18           ;CLOSE 8690XV18         ;JT000
		GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
                DIL_PUSH_IN_FG = 1
                SA_2_MESSAGE = "DILUENT PUSH INLET: FINISHED"
                PRINT LOG_ADI,"%p",SA_2_MESSAGE
                END

        RETURN

;==============================================================================
;                               STUMP TO PR
;==============================================================================
STUMPPR:

	IF PRM_DYNREL_STUMP_HV_DEVSTAT_ALLOF6 != S_1 THEN			;joh024
		BEGIN								;joh024
                QUERY_MESSAGE = "PR STUMP HV MLDHV001 OPEN?"			;joh024
		OPER_RESPONSE = ""						;joh024
		END								;joh024
	;
;joh024        IF !(STMP_RUN_FG) THEN
;joh024                BEGIN
;joh024                QUERY_MESSAGE = "ALL CONNECTIONS COMPLETE? (Y)"
;joh024                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
;joh024                        BEGIN
;joh024                        GOSUB O90XV29           ;OPEN 8690XV29			JT000
;joh024                        GOSUB O90XV26           ;OPEN 8690XV26			JT000
;joh024                        GOSUB O90XV11           ;OPEN 8690XV11			JT000
;joh024                        GOSUB O90XV22           ;OPEN 8690XV22			JT000
;joh024                        GOSUB O8690P12          ;START CSR/STUMP PUMP		JT000
;joh024                        TURNON '6CSTPRES'       ;TURNON BEER PRESENT INDICATOR	JT000
;joh024                        STMP_RUN_FG = 1
;joh024                        OPER_RESPONSE = ""                                                      
;joh024                        QUERY_MESSAGE = ""
;joh024                        END
;joh024                END

	;joh024 begin
        IF !(STMP_RUN_FG) & (PRM_DYNREL_STUMP_HV_DEVSTAT_ALLOF6 = S_1) THEN	;joh022
                BEGIN
                QUERY_MESSAGE = "ALL CONNECTIONS COMPLETE? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        GOSUB O90XV29           ;OPEN 8690XV29			JT000
                        GOSUB O90XV26           ;OPEN 8690XV26			JT000
                        GOSUB O90XV11           ;OPEN 8690XV11			JT000
;joh022                        GOSUB O90XV22           ;OPEN 8690XV22			JT000
;joh022		Update here
                        GOSUB O8690P12          ;START CSR/STUMP PUMP		JT000
                        TURNON '6CSTPRES'       ;TURNON BEER PRESENT INDICATOR	JT000
                        STMP_RUN_FG = 1
			DYN_5F3_STUMP_PLC_ALLOF6 = 1		;5F3 stump recovery is active	;mw000
                        OPER_RESPONSE = ""                                                      
                        QUERY_MESSAGE = ""
                        END
                END
	;joh024 end



;JT000	IF (STMP_RUN_FG) & !(EMPTY_FG) THEN
;JT000		BEGIN
;JT000          IF (DIL_PUSH_IN_FG) THEN 
;JT000                 BEGIN
;JT000                 GOSUB O90XV29           ;OPEN 8690XV29
;JT000                 GOSUB O90XV26           ;OPEN 8690XV26
;JT000                 GOSUB O90XV11           ;OPEN 8690XV11
;JT000                 GOSUB O90XV22           ;OPEN 8690XV22
;JT000                 GOSUB O8690P12          ;START CSR/STUMP PUMP
;JT000                 TURNON '6CSTPRES'       ;TURNON BEER PRESENT INDICATOR
;JT000                 END
;JT000         END     

;JT000	IF (EMPTY_FG) THEN 
        IF ((EMPTY_FG) | (DYNREL_TNK_LVL:AI_MEAS <= (BEFORE_STUMP_BBL - STUMP_BBL)) | (SC_SA_PARK_TANK_CMD)) THEN	;JT000
                BEGIN
                TURNOFF '6CSTPRES'                      ;TURNOFF BEER PRESENT INDICATOR
                TURNON '6CSTCOMP'                       ;TURNON BEER TRANSFER COMPLETE INDICATOR
                GOSUB C8690P12                          ;STOP CSR/STUMP PUMP
                GOSUB C90XV11                           ;CLOSE 8690XV11
                GOSUB C90XV26                           ;CLOSE 8690XV26
                GOSUB C90XV29                           ;CLOSE 8690XV29
;joh024                GOSUB C90XV22                           ;CLOSE 8690XV22
                GOSUB PACKPR                            ;PACK PR LINES

;JT000          IF !(STMP_RUN_FG) THEN
;JT000                  BEGIN
;JT000                  STMP_PR_FG = 1
;JT000                  SA_2_MESSAGE = "STUMP TO PR: FINISHED"
;JT000                  PRINT LOG_ADI,"%p",SA_2_MESSAGE
;JT000                  END


                STMP_PR_FG = 1
                SA_2_MESSAGE = "STUMP TO PR: FINISHED"
                PRINT LOG_ADI,"%p",SA_2_MESSAGE

                END

        RETURN

;==============================================================================
;                               PACK PR LINES
;==============================================================================
PACKPR:
        IF !(PR_PACK_FG) THEN
                BEGIN
                QUERY_MESSAGE = "WATER PACK PR LINES? (Y,N)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        IF ('6CSTDYN':DIN_VAL) THEN
                                BEGIN
                                SA_2_MESSAGE = "WATER PACKING PR LINES"
;mw025                                GOSUB O90XV14                   ;OPEN 8690XV14
				GOSUB OPNDYNRELDILUENTVLV			;OPEN MLDXV009	;mw025
;joh024                                GOSUB O90XV19                   ;OPEN 8690XV19
				GOSUB OPNDYNRELBEERBLKVLV			;MLDXV008	;mw025
				GOSUB OPNDYNRELDILUENTBLKVLV			;MLDXV004	;joh024
;JT000                          TIMERON STEP_TMR
                                TIMERON PACK_TMR		;JT000
                                PR_PACK_FG = 1
                                OPER_RESPONSE = ""
                                QUERY_MESSAGE = ""
                                END
                        ELSE
                                SA_2_MESSAGE = "WATER PACK SELECTOR NOT ON"
                        END
                
                IF COMPAR(OPER_RESPONSE,"N",1,EQ) THEN
                        BEGIN
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        STMP_RUN_FG = 0
			DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
                        PR_PACK_FG = 0
                        END
                END

        EXPR1 = !('6CSTDYN':DIN_VAL) & (PR_PACK_FG)
;JT000	EXPR2 = (STEP_TMR > PR_PACK_TIME)
        EXPR2 = (PACK_TMR > PR_PACK_TIME)
 
        IF (EXPR1 | EXPR2) THEN
                BEGIN
                SA_2_MESSAGE = "WATER PACK PR LINES: FINISHED"
                TURNOFF '6CSTCOMP'              ;TURNOFF BEER TRANSFER COMPLETE INDICATOR       
;mw025                GOSUB C90XV14                   ;CLOSE 8690XV14
		GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
;joh024                GOSUB C90XV19                   ;CLOSE 8690XV19
;JT000          TIMEROFF STEP_TMR
		GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008	;mw025
		GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004	;joh024
                TIMEROFF PACK_TMR		;JT000
                STMP_RUN_FG = 0
		DYN_5F3_STUMP_PLC_ALLOF6 = 0		;5F3 stump recovery is not active	;mw000
                PR_PACK_FG = 0
                END
                

        RETURN                  

;==============================================================================
;                       DILUENT RINSE TANK
;==============================================================================
DILRIN: 
        GOSUB O2XV310                           ;OPEN 8502XV310
        GOSUB O2XV320                           ;OPEN 8502XV320
        GOSUB O90XV29                           ;OPEN 8690XV29
        GOSUB O90XV26                           ;OPEN 8690XV26
        GOSUB O90XV24                           ;OPEN 8690XV24
        IF (DYNREL_TNK_LVL:AI_MEAS > RINSE_LVL) THEN
                GOSUB O8690P12                  ;START CSR/STUMP PUMP
        IF (EMPTY_FG)  & ('8690P12':DEV_STAT = S_1) THEN
                BEGIN
                GOSUB C8690P12                  ;STOP CSR/STUMP PUMP
                RIN_NUM = RIN_NUM + 1
                END     
        IF (RIN_NUM = 3) THEN
                BEGIN
                GOSUB C2XV310                   ;CLOSE 8503XV310
                GOSUB C2XV320                   ;CLOSE 8503XV320
                GOSUB C90XV29                   ;CLOSE 8690XV29
                GOSUB C90XV26                   ;CLOSE 8690XV26
                GOSUB C90XV24                   ;CLOSE 8690XV24
                END

        RETURN

;==============================================================================
;                               STUMP TO AGING
;==============================================================================
STUMPAG:
        IF !(STMP_RUN_FG) THEN
                BEGIN
                QUERY_MESSAGE = "ALL CONNECTIONS COMPLETE? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                        BEGIN
                        GOSUB O90XV29                   ;OPEN 8690XV29
                        GOSUB O90XV26                   ;OPEN 8690XV26
                        GOSUB O90XV23                   ;OPEN 8690XV23
                        GOSUB O8690P12                  ;START CSR/STUMP PUMP
                        STMP_RUN_FG = 1
			DYN_5F3_STUMP_PLC_ALLOF6 = 1		;5F3 stump recovery is active	;mw000
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        END
                END     

;JT000	IF (EMPTY_FG) THEN 
        IF ((DYNREL_TNK_LVL:AI_MEAS<=3)|(DYNREL_TNK_LVL:AI_MEAS<=(BEFORE_STUMP_BBL-STUMP_BBL))|(SC_SA_PARK_TANK_CMD)) THEN	;JT000
                BEGIN
                GOSUB C8690P12                          ;STOP CSR/STUMP PUMP
                GOSUB C90XV23                           ;CLOSE 8690XV23
                GOSUB C90XV26                           ;CLOSE 8690XV26
                GOSUB C90XV29                           ;CLOSE 8690XV29 
                STMP_AG_FG = 1
                SA_2_MESSAGE = "STUMP TO AGING: FINISHED"
                PRINT LOG_ADI,"%p",SA_2_MESSAGE

                END

        RETURN  
       
;==============================================================================
;                               VENT
;==============================================================================
VENT:
        IF !(VENTING_FG) THEN
                BEGIN   
                QUERY_MESSAGE = "START VENTING? (Y)"
                IF COMPAR(OPER_RESPONSE,"Y",1,EQ) THEN
                BEGIN
                        TIMERON PURGE_VENT_TMR
                        GOSUB C2XV31                            ;CLOSE 8502XV31
                        GOSUB O90XV29                           ;OPEN 8690XV29
                        GOSUB O90XV28                           ;OPEN 8690XV28
                        VENTING_FG = 1
                        PURGE_DONE_FG = 0
                        CNTRPRESS_FG = 0
                        OPER_RESPONSE = ""
                        QUERY_MESSAGE = ""
                        END     
                END
        ELSE
                BEGIN
                SA_3_MESSAGE = "VENTING. ELAPSED TIME "
                TEMP_INT = FLTCNV(TEMP_SG,PURGE_VENT_TMR,4,0)
                TEMP_INT = APPEND(SA_3_MESSAGE,SA_3_MESSAGE,TEMP_SG," MIN")

                SA_2_MESSAGE = "VENT SETPOINT= "
                TEMP_INT = FLTCNV(TEMP_SG,VENT_TIME,4,0)
                TEMP_INT = APPEND(SA_2_MESSAGE,SA_2_MESSAGE,TEMP_SG," MIN")
                END

        IF (PURGE_VENT_TMR > VENT_TIME) THEN
                BEGIN
                TIMEROFF PURGE_VENT_TMR
                VENTING_FG = 0
                VENT_DONE_FG = 1
                SA_3_MESSAGE = "VENT: FINISHED"
                PRINT LOG_ADI,"%p",SA_3_MESSAGE
                SA_2_MESSAGE = ""
                END

        RETURN  
       
;==============================================================================
;                      TRENDR SNAP SHOT SUB
;==============================================================================
TRENDRCOLL:
		IF (TRENDR_COLL_TMR >= 1) THEN
                   BEGIN
                   TRNGRPSNP "DYNOUT_1"
                   TIMERCLR TRENDR_COLL_TMR
                   TIMERON TRENDR_COLL_TMR
                   END


	RETURN

;==============================================================================	;acj014
;               D.O. MONITORING							;acj014
;==============================================================================	;acj014
DOMON:										;acj014
	IF (AND(DOMON_EPN_DM131:AI_CURAL, SB_HI+SB_HIHI)) THEN			;acj014
		BEGIN								;acj014
		IF (DOMON_STAT_INT != 2) THEN					;acj014
			BEGIN							;acj014
;POLBMXPROD			DOMON_STAT_DM131_ALLOF5 = 2				;acj014
			DOMON_STAT_DM131_ALLOF6 = 2		;POLBMXPROD			;acj014
			DOMON_STAT_INT = 2					;acj014
			END							;acj014
		END								;acj014
	ELSE									;acj014
		IF (DOMON_STAT_INT != 1) THEN					;acj014
			BEGIN							;acj014
;POLBMXPROD			DOMON_STAT_DM131_ALLOF5 = 1				;acj014
			DOMON_STAT_DM131_ALLOF6 = 1		;POLBMXPROD		;acj014
			DOMON_STAT_INT = 1					;acj014
			END							;acj014
	RETURN									;acj014

;ldk029;mw027 added routine
;ldk029;==============================================================================	
;ldk029;	UPDATE MCMS PROCEDURE, STATE, STATUS NUMBERS
;ldk029;==============================================================================
;ldk029UPDATEMCMS:
;ldk029	;update unit procedure number
;ldk029;mw028	IF (SA_STATE != 1) THEN
;ldk029;mw028		MCMS_PROCEDURE_PTR = 64
;ldk029;mw028	ELSE
;ldk029;mw028		MCMS_PROCEDURE_PTR = 0
;ldk029;mw028 start
;ldk029	IF ((SA_STATE > 1) & (SA_STATE < 15)) | ((SA_STATE > 15) & (SA_STATE < 20)) THEN				
;ldk029		MCMS_PROCEDURE_PTR = 64			;Production procedure number	
;ldk029	ELSE IF (SA_STATE = 15) THEN   
;ldk029		MCMS_PROCEDURE_PTR = 1064		;CIP procedure number
;ldk029	ELSE
;ldk029		MCMS_PROCEDURE_PTR = 0			
;ldk029;mw028 finish
;ldk029
;ldk029	;update step number 
;ldk029	MCMS_STATE_PTR = SA_STATE
;ldk029
;ldk029	;Update the status number for PLC
;ldk029	IF (SA_STATE != 1) THEN
;ldk029		MCMS_STATUS_PTR = 1
;ldk029	ELSE
;ldk029		BEGIN
;ldk029		IF MCMS_ABORTED_FG THEN
;ldk029			MCMS_STATUS_PTR = 998		;Aborted
;ldk029		ELSE
;ldk029			MCMS_STATUS_PTR = 999		;Completed
;ldk029		END
;ldk029
;ldk029	RETURN
;ldk029
;==============================================================================
;                       OPEN AND CLOSE ROUTINES
;==============================================================================
OTRAPVLV:
        ;Set the T_5 bit to disable console commands for trap xvs
;mw025        '8690XV15':DEV_TMP0 = OR('8690XV15':DEV_TMP0,SEQAUTO)
;mw025        '8690XV16':DEV_TMP0 = OR('8690XV16':DEV_TMP0,SEQAUTO)
;mw025        '8690XV17':DEV_TMP0 = OR('8690XV17':DEV_TMP0,SEQAUTO)
	MLD_PRM_TRAP1_FILL_VLV:DEV_TMP0 = OR(MLD_PRM_TRAP1_FILL_VLV:DEV_TMP0,SEQAUTO)	;mw025
        MLD_PRM_TRAP2_FILL_VLV:DEV_TMP0 = OR(MLD_PRM_TRAP2_FILL_VLV:DEV_TMP0,SEQAUTO)   ;mw025
        MLD_PRM_TRAP3_FILL_VLV:DEV_TMP0 = OR(MLD_PRM_TRAP3_FILL_VLV:DEV_TMP0,SEQAUTO)   ;mw025
        MLD_PRM_DILUENT_VLV:DEV_TMP0 = OR(MLD_PRM_DILUENT_VLV:DEV_TMP0,SEQAUTO)   	;mw025fat

			DONT_FAIL_OUTLET_FG = 1 ;VCM016

        IF (TRAP_HDR_SEL_ALLOF6 = 22) THEN
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV15'
;mw025		ASSIGN DEV_PTR = '8690XV15'		;JT000
		ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP1_FILL_VLV	;mw025
		ASSIGN DEV_PTR = MLD_PRM_TRAP1_FILL_VLV		;mw025
                
;mw025                IF ('8690XV16':DEV_STAT = S_1) THEN
		IF (MLD_PRM_TRAP2_FILL_VLV:DEV_STAT = S_1) THEN	;mw025
                        BEGIN
                        FAIL_MSG = "TRAP1 FAIL. TRAP2 MATRIX OPEN"
                        GOTO FAIL
                        END
                ELSE 
;mw025                        IF ('8690XV17':DEV_STAT = S_1) THEN
			IF (MLD_PRM_TRAP3_FILL_VLV:DEV_STAT = S_1) THEN	;mw025
                                BEGIN
                                FAIL_MSG = "TRAP1 FAIL. TRAP3 MATRIX OPEN"
                                GOTO FAIL
                                END
                     ELSE
;mw025                                FAIL_MSG = "8690XV15 TRAP1 VLV FAIL OPN"
				FAIL_MSG = "MLDXV100 TRAP1 VLV FAIL OPN"	;mw025
                END
        
        IF (TRAP_HDR_SEL_ALLOF6 = 23) THEN
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV16'
;mw025                ASSIGN DEV_PTR = '8690XV16'		;JT000
;mw025                IF ('8690XV15':DEV_STAT = S_1) THEN
		ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP2_FILL_VLV	        ;mw025
                ASSIGN DEV_PTR = MLD_PRM_TRAP2_FILL_VLV                 ;mw025
		IF (MLD_PRM_TRAP1_FILL_VLV:DEV_STAT = S_1) THEN		;mw025
                        BEGIN
                        FAIL_MSG = "TRAP2 FAIL. TRAP1 MATRIX OPEN"
                        GOTO FAIL
                        END
                ELSE 
;mw025                        IF ('8690XV17':DEV_STAT = S_1) THEN
			IF (MLD_PRM_TRAP3_FILL_VLV:DEV_STAT = S_1) THEN	;mw025
                                BEGIN
                                FAIL_MSG = "TRAP2 FAIL. TRAP3 MATRIX OPEN"
                                GOTO FAIL
                                END
                     ELSE 
;mw025                                FAIL_MSG = "8690XV16 TRAP2 VLV FAIL OPN"
				FAIL_MSG = "MLDXV200 TRAP2 VLV FAIL OPN"	;mw025
                END

        IF (TRAP_HDR_SEL_ALLOF6 = 24) THEN
                BEGIN
;mw025                ASSIGN TRAP_VALVE_PTR = '8690XV17'
;mw025                ASSIGN DEV_PTR = '8690XV17'		;JT000
;mw025                IF ('8690XV15':DEV_STAT = S_1) THEN
                ASSIGN TRAP_VALVE_PTR = MLD_PRM_TRAP3_FILL_VLV	;mw025
                ASSIGN DEV_PTR = MLD_PRM_TRAP3_FILL_VLV		;mw025
		IF (MLD_PRM_TRAP1_FILL_VLV:DEV_STAT = S_1) THEN	;mw025
                        BEGIN
                        FAIL_MSG = "TRAP3 FAIL. TRAP1 MATRIX OPEN"
                        GOTO FAIL
                        END
                ELSE 
;mw025                        IF ('8690XV16':DEV_STAT = S_1) THEN
			IF (MLD_PRM_TRAP2_FILL_VLV:DEV_STAT = S_1) THEN	;mw025
                                BEGIN
                                FAIL_MSG = "TRAP3 FAIL. TRAP2 MATRIX OPEN"
                                GOTO FAIL
                                END
                     ELSE
;mw025                                FAIL_MSG = "8690XV17 TRAP3 VLV FAIL OPN"
				FAIL_MSG = "MLDXV300 TRAP3 VLV FAIL OPN"	;mw025
                END

;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
		GOSUB OPENREMDEV		;OPEN REMOET DEVICE	;mw025

			DONT_FAIL_OUTLET_FG = 0 ;VCM016

        IF (TRAP_HDR_SEL_ALLOF6 < 25) &  (TRAP_HDR_SEL_ALLOF6 > 21) THEN
	        DYNREL_FILL_OK_FG_ALLOF6 = 1

        RETURN


CTRAPVLV:

        DYNREL_FILL_OK_FG_ALLOF6 = 0
;mw025                GOSUB C90XV15     ;CLOSE 8690XV15  ;VCM001
;mw025                GOSUB C90XV16     ;CLOSE 8690XV16  ;VCM001                    
;mw025                GOSUB C90XV17     ;CLOSE 8690XV17  ;VCM001   
		GOSUB CLSDYRELTRAP1MVLV		;CLOSE TRAP 1 VALVE	;mw025
		GOSUB CLSDYRELTRAP2MVLV		;CLOSE TRAP 2 VALVE	;mw025
		GOSUB CLSDYRELTRAP3MVLV		;CLOSE TRAP 3 VALVE	;mw025                 
		GOSUB C2XV315     ;CLOSE 8502XV315
        RETURN

O2XV31:
        ASSIGN DEV_PTR = '8502XV31'
        IF ('8502XV32':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "CNTRPRESS FAIL. 8502XV32 OPEN"
                GOTO FAIL
                END
        IF ('8690XV28':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "CNTRPRESS FAIL. 8690XV28 OPEN"
                GOTO FAIL
                END
        ELSE    
                FAIL_MSG = "8502XV31 CNTRPRS VLV FAIL OPN"

        GOSUB OPENDEV                   ;OPEN DEVICE
        CNTRPRESS_FG = 1
        RETURN

C2XV31:
        ASSIGN DEV_PTR = '8502XV31'
        FAIL_MSG = "8502XV31 CNTRPRS VLV FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O2XV32:
        ASSIGN DEV_PTR = '8502XV32'
        IF ('8502XV31':DEV_STAT = S_1) | ('8502XV319':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "8502XV32 VENT VLV FAIL-CO2 ON"
                GOTO FAIL
                END
        FAIL_MSG = "8502XV32 VENT VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV32:
        ASSIGN DEV_PTR = '8502XV32'
        FAIL_MSG = "8502XV32 VENT VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN  

O2XV310:
        ASSIGN DEV_PTR = '8502XV310'
        FAIL_MSG = "8502XV310 DT/CSS VLV FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV310:
        ASSIGN DEV_PTR = '8502XV310'
        FAIL_MSG = "8502XV310 DT/CSS VLV FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O2XV314:
        ASSIGN DEV_PTR = '8502XV314'
        FAIL_MSG = "8502XV314 CSS VLV FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV314:
        ASSIGN DEV_PTR = '8502XV314'
        FAIL_MSG = "8502XV314 CSS VLV FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN


O2XV315:
        ASSIGN DEV_PTR = '8502XV315'
        FAIL_MSG = "8502XV315 INLT VALVE FAIL OPN"
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
        GOSUB OPENDEV                   ;OPEN DEVICE
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

C2XV315:
        ASSIGN DEV_PTR = '8502XV315'
        FAIL_MSG = "8502XV315 INLT VALVE FAIL CLS"
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
        GOSUB CLOSEDEV                  ;CLOSE DEVICE
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

O2XV316:
        ASSIGN DEV_PTR = '8502XV316'
        FAIL_MSG = "8502XV316 INLT DRAIN FAIL OPN"
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
        GOSUB OPENDEV                   ;OPEN DEVICE
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

C2XV316:
        ASSIGN DEV_PTR = '8502XV316'
        FAIL_MSG = "8502XV316 INLT DRAIN FAIL CLS"
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
        GOSUB CLOSEDEV                  ;CLOSE DEVICE
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

O2XV317:
        ASSIGN DEV_PTR = '8502XV317'
        FAIL_MSG = "8502XV317 CO2 VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV317:
        ASSIGN DEV_PTR = '8502XV317'
        FAIL_MSG = "8502XV317 CO2 VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O2XV318:
        ASSIGN DEV_PTR = '8502XV318'
        FAIL_MSG = "8502XV318 CO2 VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV318:
        ASSIGN DEV_PTR = '8502XV318'
        FAIL_MSG = "8502XV318 CO2 VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN  

O2XV319:
        ASSIGN DEV_PTR = '8502XV319'
        IF ('8502XV32':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "CO2 PURGE FAIL. 8502XV32 OPEN"
                GOTO FAIL
                END
        IF ('8690XV28':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "CO2 PURGE FAIL. 8690XV28 OPEN"
                GOTO FAIL
                END
        ELSE
                FAIL_MSG = "8502XV319 CO2 VALVE FAIL OPN"

        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV319:
        ASSIGN DEV_PTR = '8502XV319'
        FAIL_MSG = "8502XV319 CO2 VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN 

O2XV320:
        ASSIGN DEV_PTR = '8502XV320'
        FAIL_MSG = "8502XV320 CSS VLV FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C2XV320:
        ASSIGN DEV_PTR = '8502XV320'
        FAIL_MSG = "8502XV320 CSS VLV FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV11:
        ASSIGN DEV_PTR = '8690XV11'
        FAIL_MSG = "8690XV11 FB/CSR VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV11:
        ASSIGN DEV_PTR = '8690XV11'
        FAIL_MSG = "8690XV11 FB/CSR VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

;joh024O90XV12:
;joh024        ASSIGN DEV_PTR = '8690XV12'
;joh024        FAIL_MSG = "8690XV12 PKG VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024
;joh024        RETURN

;joh024C90XV12:
;joh024        ASSIGN DEV_PTR = '8690XV12'
;joh024        FAIL_MSG = "8690XV12 PKG VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN

;joh024O90XV13:
;joh024        ASSIGN DEV_PTR = '8690XV13'
;joh024        FAIL_MSG = "8690XV13 PKG VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024
;joh024        RETURN

;joh024C90XV13:
;joh024        ASSIGN DEV_PTR = '8690XV13'
;joh024        FAIL_MSG = "8690XV13 PKG VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN

;mw025O90XV14:
;mw025        ASSIGN DEV_PTR = '8690XV14'
;mw025        FAIL_MSG = "8690XV14 FB/DT VALVE FAIL OPN"
;mw025        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
;mw025        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;mw025
;mw025        RETURN

;mw025C90XV14:
;mw025        ASSIGN DEV_PTR = '8690XV14'
;mw025        FAIL_MSG = "8690XV14 FB/DT VALVE FAIL CLS"
;mw025        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;mw025        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;mw025
;mw025        RETURN
;mw025 begin
OPNDYNRELDILUENTVLV:
        ASSIGN DEV_PTR = MLD_PRM_DILUENT_VLV		
        FAIL_MSG = "MLDXV009 FB/DT VALVE FAIL OPN"      
        DONT_FAIL_OUTLET_FG = 1 
	GOSUB OPENREMDEV			
        DONT_FAIL_OUTLET_FG = 0 

	RETURN

CLSDYNRELDILUENTVLV:
        ASSIGN DEV_PTR = MLD_PRM_DILUENT_VLV		
        FAIL_MSG = "MLDXV009 FB/DT VALVE FAIL CLS"      
        DONT_FAIL_OUTLET_FG = 1 
	GOSUB CLOSREMDEV			
        DONT_FAIL_OUTLET_FG = 0 

        RETURN
;mw025 end

;mw025O90XV15:
;mw025        ASSIGN DEV_PTR = '8690XV15'
;mw025        IF ('8690XV16':DEV_STAT = S_1) | ('8690XV17':DEV_STAT = S_1) THEN	  
OPNDYRELTRAP1MVLV:								;mw025
	ASSIGN DEV_PTR = MLD_PRM_TRAP1_FILL_VLV					;mw025
        IF (MLD_PRM_TRAP2_FILL_VLV:DEV_STAT = S_1) | (MLD_PRM_TRAP3_FILL_VLV:DEV_STAT = S_1) THEN       ;mw025
                BEGIN
                FAIL_MSG = "TRAP1 FAIL. TRAP2 OR 3 OPEN"
                DONT_FAIL_OUTLET_FG = 1 ;VCM016
                GOTO FAIL
                END
        ELSE
;mw025                FAIL_MSG = "8690XV15 TRAP1 VALVE FAIL OPN"
		FAIL_MSG = "MLDXV100 TRAP1 VALVE FAIL OPN"		;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
	GOSUB OPENREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

;mw025C90XV15:
;mw025        ASSIGN DEV_PTR = '8690XV15'
;mw025        FAIL_MSG = "8690XV15 TRAP1 VALVE FAIL CLS"
CLSDYRELTRAP1MVLV:					;mw025
	IF (TRAP1_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6) THEN	;egs026
		RETURN						;egs026
        ASSIGN DEV_PTR = MLD_PRM_TRAP1_FILL_VLV         ;mw025
        FAIL_MSG = "MLDXV100 TRAP1 VALVE FAIL CLS"      ;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB CLOSEDEV                  ;CLOSE DEVICE
	GOSUB CLOSREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016
        RETURN

;mw025O90XV16:
;mw025        ASSIGN DEV_PTR = '8690XV16'
;mw025        IF ('8690XV15':DEV_STAT = S_1) | ('8690XV17':DEV_STAT = S_1) THEN
OPNDYRELTRAP2MVLV:											;mw025
        ASSIGN DEV_PTR = MLD_PRM_TRAP2_FILL_VLV								;mw025
        IF (MLD_PRM_TRAP1_FILL_VLV:DEV_STAT = S_1) | (MLD_PRM_TRAP3_FILL_VLV:DEV_STAT = S_1) THEN       ;mw025
                BEGIN
                FAIL_MSG = "TRAP2 FAIL. TRAP1 OR 3 OPEN"
                DONT_FAIL_OUTLET_FG = 1 ;VCM016
                GOTO FAIL
                END
        ELSE
;mw025                FAIL_MSG = "8690XV16 TRAP2 VALVE FAIL OPN"
		FAIL_MSG = "MLDXV200 TRAP2 VALVE FAIL OPN"	;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
	GOSUB OPENREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

;mw025C90XV16:
;mw025        ASSIGN DEV_PTR = '8690XV16'
;mw025        FAIL_MSG = "8690XV16 TRAP2 VALVE FAIL CLS"
CLSDYRELTRAP2MVLV:					;mw025
	IF (TRAP2_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6) THEN	;egs026
		RETURN						;egs026
        ASSIGN DEV_PTR = MLD_PRM_TRAP2_FILL_VLV		;mw025
        FAIL_MSG = "MLDXV200 TRAP2 VALVE FAIL CLS"      ;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB CLOSEDEV                  ;CLOSE DEVICE
	GOSUB CLOSREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016
        RETURN

;mw025O90XV17:
;mw025        ASSIGN DEV_PTR = '8690XV17'
;mw025        IF ('8690XV15':DEV_STAT = S_1) | ('8690XV15':DEV_STAT = S_1) THEN
OPNDYRELTRAP3MVLV:												;mw025
        ASSIGN DEV_PTR = MLD_PRM_TRAP3_FILL_VLV                                                     		;mw025
        IF (MLD_PRM_TRAP1_FILL_VLV:DEV_STAT = S_1) | (MLD_PRM_TRAP2_FILL_VLV:DEV_STAT = S_1) THEN		;mw025
                BEGIN
                FAIL_MSG = "TRAP3 FAIL. TRAP1 OR 2 OPEN"
                DONT_FAIL_OUTLET_FG = 1 ;VCM016
                GOTO FAIL
                END
        ELSE
;mw025                FAIL_MSG = "8690XV17 TRAP3 VALVE FAIL OPN"
	FAIL_MSG = "MLDXV300 TRAP3 VALVE FAIL OPN"	;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
	GOSUB OPENREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

;mw025C90XV17:
;mw025        ASSIGN DEV_PTR = '8690XV17'
;mw025        FAIL_MSG = "8690XV17 TRAP3 VALVE FAIL CLS"
CLSDYRELTRAP3MVLV:					;mw025
	IF (TRAP3_FILL_DYN_VLV_OVERRRIDE_FG_ALLOF6) THEN	;egs026
		RETURN						;egs026
        ASSIGN DEV_PTR = MLD_PRM_TRAP3_FILL_VLV		;mw025
        FAIL_MSG = "MLDXV300 TRAP3 VALVE FAIL CLS"	;mw025
        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;mw025        GOSUB CLOSEDEV                  ;CLOSE DEVICE
	GOSUB CLOSREMDEV			;mw025
        DONT_FAIL_OUTLET_FG = 0 ;VCM016

        RETURN

;mw025O90XV18:
;mw025        ASSIGN DEV_PTR = '8690XV18'
;mw025        FAIL_MSG = "8690XV18 FB VALVE FAIL OPN"
;mw025        GOSUB OPENDEV                   ;OPEN DEVICE
;mw025
;mw025        RETURN
;mw025
;mw025C90XV18:
;mw025        ASSIGN DEV_PTR = '8690XV18'
;mw025        FAIL_MSG = "8690XV18 FB VALVE FAIL CLS"
;mw025        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;mw025
;mw025        RETURN

;joh024O90XV19:
;joh024        ASSIGN DEV_PTR = '8690XV19'
;joh024        FAIL_MSG = "8690XV19 FB/DT VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024
;joh024        RETURN

;joh024C90XV19:
;joh024        ASSIGN DEV_PTR = '8690XV19'
;joh024        FAIL_MSG = "8690XV19 FB/DT VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN

;joh024O90XV20:
;joh024        ASSIGN DEV_PTR = '8690XV20'
;joh024        FAIL_MSG = "8690XV20 FB VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024
;joh024        RETURN

;joh024C90XV20:
;joh024        ASSIGN DEV_PTR = '8690XV20'
;joh024        FAIL_MSG = "8690XV20 FB VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN
        
;joh024O90XV21:
;joh024        ASSIGN DEV_PTR = '8690XV21'
;joh024        FAIL_MSG = "8690XV21 FB VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024        
;joh024        RETURN

;joh024C90XV21:
;joh024        ASSIGN DEV_PTR = '8690XV21'
;joh024        FAIL_MSG = "8690XV21 FB VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN

;joh024O90XV22:
;joh024        ASSIGN DEV_PTR = '8690XV22'
;joh024        FAIL_MSG = "8690XV22 FB VALVE FAIL OPN"
;joh024        GOSUB OPENDEV                   ;OPEN DEVICE
;joh024
;joh024        RETURN

;joh024C90XV22:
;joh024        ASSIGN DEV_PTR = '8690XV22'
;joh024        FAIL_MSG = "8690XV22 FB VALVE FAIL CLS"
;joh024        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;joh024
;joh024        RETURN

O90XV23:
        ASSIGN DEV_PTR = '8690XV23'
        FAIL_MSG = "8690XV23 CSR VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV23:
        ASSIGN DEV_PTR = '8690XV23'
        FAIL_MSG = "8690XV23 CSR VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV24:
        ASSIGN DEV_PTR = '8690XV24'
        FAIL_MSG = "8690XV24 CSR VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV24:
        ASSIGN DEV_PTR = '8690XV24'
        FAIL_MSG = "8690XV24 CSR VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV25:
        ASSIGN DEV_PTR = '8690XV25'
        FAIL_MSG = "8690XV25 FB VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV25:
        ASSIGN DEV_PTR = '8690XV25'
        FAIL_MSG = "8690XV25 FB VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV26:
        ASSIGN DEV_PTR = '8690XV26'
        FAIL_MSG = "8690XV26 CSR VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV26:
        ASSIGN DEV_PTR = '8690XV26'
        FAIL_MSG = "8690XV26 CSR VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV27:
        ASSIGN DEV_PTR = '8690XV27'
        FAIL_MSG = "8690XV27 FB VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV27:
        ASSIGN DEV_PTR = '8690XV27'
        FAIL_MSG = "8690XV27 FB VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV28:
        ASSIGN DEV_PTR = '8690XV28'
        IF ('8502XV31':DEV_STAT = S_1) | ('8502XV319':DEV_STAT = S_1) THEN
                BEGIN
                FAIL_MSG = "8690XV28 VENT FAIL-CO2 ON"
                GOTO FAIL
                END
        FAIL_MSG = "8690XV28 VENT VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV28:
        ASSIGN DEV_PTR = '8690XV28'
        FAIL_MSG = "8690XV28 VENT VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

O90XV29:
        ASSIGN DEV_PTR = '8690XV29'
        FAIL_MSG = "8690XV29 OUTLET VALVE FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C90XV29:
        ASSIGN DEV_PTR = '8690XV29'
        FAIL_MSG = "8690XV29 OUTLET VALVE FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

;VCM007O90XV38:
;VCM007        ASSIGN DEV_PTR = '8690XV38'
;VCM007        FAIL_MSG = "8690XV38 FB VALVE FAIL OPN"
;VCM007        GOSUB OPENDEV                   ;OPEN DEVICE
;VCM007
;VCM007        RETURN
;VCM007
;VCM007C90XV38:
;VCM007        ASSIGN DEV_PTR = '8690XV38'
;VCM007        FAIL_MSG = "8690XV38 FB VALVE FAIL CLS"
;VCM007        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;VCM007
;VCM007        RETURN

O8690P11:
        ASSIGN DEV_PTR = '8690P11'
        FAIL_MSG = "8690P11 FEED PUMP FAIL OPN"
        GOSUB OPENDEV                   ;OPEN DEVICE
;        TURNON '8690AT42EN'  ;VCM020
        RETURN

C8690P11:
        ASSIGN DEV_PTR = '8690P11'
        FAIL_MSG = "8690P11 FEED PUMP FAIL CLS"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE
        ;TURNOFF '8690AT42EN'  ;VCM020

        RETURN

O8690P12:
        ASSIGN DEV_PTR = '8690P12'
        FAIL_MSG = "8690P12 CSR/STMP PUMP FAIL ON"
        GOSUB OPENDEV                   ;OPEN DEVICE

        RETURN

C8690P12:
        ASSIGN DEV_PTR = '8690P12'
        FAIL_MSG = "8690P12 CSR/STMP PUMP FAIL OFF"
        GOSUB CLOSEDEV                  ;CLOSE DEVICE

        RETURN

;VCM020O8690P13:
;VCM020        ASSIGN DEV_PTR = '8690P13'
;VCM020        FAIL_MSG = "8690P13 CIRC PUMP FAIL OPN"
;VCM020        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;VCM020        GOSUB OPENDEV                   ;OPEN DEVICE
;VCM020        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;VCM020        TURNOFF '8690AT42EN'
;VCM020        RETURN

;VCM020C8690P13:
;VCM020        ASSIGN DEV_PTR = '8690P13'
;VCM020        FAIL_MSG = "8690P13 CIRC PUMP FAIL CLS"
;VCM020        DONT_FAIL_OUTLET_FG = 1 ;VCM016
;VCM020        GOSUB CLOSEDEV                  ;CLOSE DEVICE
;VCM020        DONT_FAIL_OUTLET_FG = 0 ;VCM016
;VCM020        TURNON '8690AT42EN'
;VCM020
        RETURN
;	joh022 begin
CLSDYNRELBYPASSBLKVLV:			;MLDXV002
        ASSIGN DEV_PTR = DYNREL_BYPASS_BLK_VLV
	FAIL_MSG = "BYPASS VLV MLDXV002 FAIL CLS"
	GOSUB CLOSREMDEV
	;
	DYNREL_BYPASS_BLK_VLV_DEVSTAT = S_0
	RETURN
OPNDYNRELBYPASSBLKVLV:			;MLDXV002
        ASSIGN DEV_PTR = DYNREL_BYPASS_BLK_VLV
	FAIL_MSG = "BYPASS VLV MLDXV002 FAIL OPN"
	GOSUB OPENREMDEV
	;
	DYNREL_BYPASS_BLK_VLV_DEVSTAT = S_1
	RETURN

CLSDYNRELPCKGLNBLKVLV:			;MLDXV001
        ASSIGN DEV_PTR = DYNREL_PCKGLN_BLK_VLV
	FAIL_MSG = "PCKG LN VLV MLDXV001 FAIL CLS"
	GOSUB CLOSREMDEV
	;
	DYNREL_PCKGLN_BLK_VLV_DEVSTAT = S_0
	RETURN
OPNDYNRELPCKGLNBLKVLV:			;MLDXV001
        ASSIGN DEV_PTR = DYNREL_PCKGLN_BLK_VLV
	FAIL_MSG = "PCKG LN VLV MLDXV001 FAIL OPN"
	GOSUB OPENREMDEV
	;
	DYNREL_PCKGLN_BLK_VLV_DEVSTAT = S_1
	RETURN

CLSDYNRELDILUENTBLKVLV:			;MLDXV004
        ASSIGN DEV_PTR = DYNREL_DILUENT_BLK_VLV
	FAIL_MSG = "DILUENT VLV MLDXV001 FAIL CLS"
	GOSUB CLOSREMDEV
	RETURN
OPNDYNRELDILUENTBLKVLV:			;MLDXV004
        ASSIGN DEV_PTR = DYNREL_DILUENT_BLK_VLV
	FAIL_MSG = "DILUENT VLV MLDXV001 FAIL OPN"
	GOSUB OPENREMDEV
	RETURN
;	joh022 end

;mw025 begin
CLSDYNRELBEERBLKVLV:			;MLDXV008
        ASSIGN DEV_PTR = MLD_PRM_BEER_BLK_VLV
	FAIL_MSG = "BEER VLV MLDXV008 FAIL CLS"
	GOSUB CLOSREMDEV
	RETURN
OPNDYNRELBEERBLKVLV:			;MLDXV008
        ASSIGN DEV_PTR = MLD_PRM_BEER_BLK_VLV
	FAIL_MSG = "BEER VLV MLDXV008 FAIL OPN"
	GOSUB OPENREMDEV
	RETURN
;mw025 end

;===============================================================================
;                       SET DEVICE 1
;===============================================================================
;Most states will require the devices be closed when starting a new transition.

SETDEV1:

;mw025        TURNOFF '8690XV15U'     		;CLOSE TRAP1 MATRIX SEAT
	TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
;ldk030        TURNOFF 'PAAR2$1PROD1'      ;JMS001
;VCM001 GOSUB C8690P11                          ;STOP 8690P11
        GOSUB C8690P12                          ;STOP 8690P12
;VCM001 GOSUB C8690P13                          ;STOP 8690P13
        IF !(CNTRPRESS_FG) THEN
                GOSUB C2XV31                    ;CLOSE 8502XV31
        GOSUB C2XV32                            ;CLOSE 8502XV32
        GOSUB C2XV310                           ;CLOSE 8502XV310
        GOSUB C2XV314                           ;CLOSE 8502XV314
;VCM001 GOSUB C2XV315                           ;CLOSE 8502XV315
        GOSUB C2XV316                           ;CLOSE 8502XV316
        GOSUB C2XV317                           ;CLOSE 8502XV317
        GOSUB C2XV318                           ;CLOSE 8502XV318
        GOSUB C2XV319                           ;CLOSE 8502XV319
        GOSUB C2XV320                           ;CLOSE 8502XV320
        GOSUB C90XV11                           ;CLOSE 8690XV11

;VCM001 GOSUB C90XV13                           ;CLOSE 8690XV13
;mw025        GOSUB C90XV14                           ;CLOSE 8690XV14
	GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
;VCM001 GOSUB C90XV15                           ;CLOSE 8690XV15
;VCM001 GOSUB C90XV16                           ;CLOSE 8690XV16       
;VCM001 GOSUB C90XV17                           ;CLOSE 8690XV17       
;mw025        GOSUB C90XV18                           ;CLOSE 8690XV18
;joh024        GOSUB C90XV19                           ;CLOSE 8690XV19
;joh024        GOSUB C90XV20                           ;CLOSE 8690XV20
;joh024        GOSUB C90XV21                           ;CLOSE 8690XV21
;VCM001 GOSUB C90XV22                           ;CLOSE 8690XV22
	GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008	;mw025
	GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004	;joh022
	PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
	WAIT 1								;joh022
	PUTOUT DYNREL_PRM_FCV_OUTPUT, 0.0	;mldfcv001	;joh022

	PUTMANL PRM_MLD_BEER_DRAIN_OUTPUT		;mldfcv007	;mw025	
	WAIT 1								;mw025
	PUTOUT PRM_MLD_BEER_DRAIN_OUTPUT, 0.0	;mldfcv007		;mw025    

        GOSUB C90XV23                           ;CLOSE 8690XV23
        GOSUB C90XV24                           ;CLOSE 8690XV24
;VCM000 GOSUB C90XV25                           ;CLOSE 8690XV25
        GOSUB C90XV26                           ;CLOSE 8690XV26
        GOSUB C90XV27                           ;CLOSE 8690XV27
        GOSUB C90XV28                           ;CLOSE 8690XV28
;VCM001        GOSUB C90XV29                           ;CLOSE 8690XV29
;VCM001        GOSUB C90XV38                           ;CLOSE 8690XV38
;        TURNOFF 'DYNALARM'          ;VCM002

        IF COMPAR(SEQ_STATUS,"FAIL",4,NE) THEN  ;VCM001
                BEGIN                              ;VCM001
                GOSUB C2XV315     ;CLOSE 8502XV315 ;VCM001
;mw025                GOSUB C90XV15     ;CLOSE 8690XV15  ;VCM001
;mw025                GOSUB C90XV16     ;CLOSE 8690XV16  ;VCM001                    
;mw025                GOSUB C90XV17     ;CLOSE 8690XV17  ;VCM001             
		GOSUB CLSDYRELTRAP1MVLV		;CLOSE TRAP 1 VALVE	;mw025
		GOSUB CLSDYRELTRAP2MVLV		;CLOSE TRAP 2 VALVE	;mw025
		GOSUB CLSDYRELTRAP3MVLV		;CLOSE TRAP 3 VALVE	;mw025       
                END                                ;VCM001
            
         EXPR1 = ((SA_STATE != 8)&(SA_STATE != 19))
         EXPR2 = (SET_DEV_RUN_OUTLET = 0)&((SA_STATE = 8)|(SA_STATE = 19))
         EXPR3 = (COMPAR(SEQ_STATUS,"HOLD",4,EQ))
                                  ;VCM016
            IF EXPR1 | EXPR2 | EXPR3 THEN
                BEGIN                            ;VCM001
                PRINT LOG_ADI, "SHUTTING DOWN OUTLET"
                GOSUB C8690P11    ;STOP 8690P11   VCM001
                ;VCM020 GOSUB C8690P13    ;STOP 8690P13   VCM001
                GOSUB C90XV29     ;CLOSE 8690XV29 VCM001
                GOSUB C90XV25     ;CLOSE 8690XV25 VCM001
;joh024                GOSUB C90XV22     ;CLOSE 8690XV22 VCM001                     
;joh024                GOSUB C90XV12     ;CLOSE 8690XV12 VCM001                     
;VCM007                GOSUB C90XV38     ;CLOSE 8690XV38 VCM001                     
;joh024                GOSUB C90XV13     ;CLOSE 8690XV13
;joh022		Update here
		GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
		GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
					 DYN1_FLOW_BATCH:IOS_TG:1 = 0	;suspend integration
					 PUTAUTO DYN1_FLOW_BATCH
					 PUTAUTO DYN1_FLOW_DAILY
                END                               ;VCM001
             ELSE
                PRINT LOG_ADI, "OUTLET KEPT RUNNING"

        RETURN

;===============================================================================
;                       SET DEVICE 2                    
;===============================================================================
;If the tank is filling then we do not want to close header or inlet valve as the
;above routine will do.

SETDEV2:

        BRAND_ID = BRAND_ID_REQ
        DYN_5F3_BRAND_ID_ALLOF6 = BRAND_ID    ;VCM008

;mw025        TURNOFF '8690XV15U'     		;CLOSE TRAP1 MATRIX SEAT
	TURNOFF MLD_TRAP_INLET_SEAT_REQ		;CLOSE SEAT	;mw025
;VCM001 GOSUB C8690P11                          ;STOP 8690P11
        GOSUB C8690P12                          ;STOP 8690P12
;VCM001 GOSUB C8690P13                          ;STOP 8690P13
        GOSUB O2XV31                            ;OPEN 8502XV31
        GOSUB C2XV32                            ;CLOSE 8502XV32
        GOSUB C2XV310                           ;CLOSE 8502XV310
        GOSUB C2XV314                           ;CLOSE 8502XV314
        GOSUB C2XV316                           ;CLOSE 8502XV316
        GOSUB C2XV317                           ;CLOSE 8502XV317
        GOSUB C2XV318                           ;CLOSE 8502XV318
        GOSUB C2XV319                           ;CLOSE 8502XV319
        GOSUB C2XV320                           ;CLOSE 8502XV320
        GOSUB C90XV11                           ;CLOSE 8690XV11
;VCM001 GOSUB C90XV12                           ;CLOSE 8690XV12
;VCM001 GOSUB C90XV13                           ;CLOSE 8690XV13
;mw025        GOSUB C90XV14                           ;CLOSE 8690XV14
	GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
        GOSUB CTRAPVLV                  	;CLOSE TRAP VALVE
;mw025       	GOSUB C90XV15                           ;CLOSE 8690XV15
;mw025       	GOSUB C90XV16                           ;CLOSE 8690XV16
;mw025       	GOSUB C90XV17                           ;CLOSE 8690XV17
	GOSUB CLSDYRELTRAP1MVLV		;CLOSE TRAP 1 VALVE	;mw025
	GOSUB CLSDYRELTRAP2MVLV		;CLOSE TRAP 2 VALVE	;mw025
	GOSUB CLSDYRELTRAP3MVLV		;CLOSE TRAP 3 VALVE	;mw025
;mw025        GOSUB C90XV18                           ;CLOSE 8690XV18
;joh024        GOSUB C90XV19                           ;CLOSE 8690XV19
;joh024        GOSUB C90XV20                           ;CLOSE 8690XV20
;joh024        GOSUB C90XV21                           ;CLOSE 8690XV21
;joh022		Update here
	GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008	;mw025
	GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004	;joh022
	PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
	WAIT 1								;joh022
	PUTOUT DYNREL_PRM_FCV_OUTPUT, 0.0	;mldfcv001	;joh022

	PUTMANL PRM_MLD_BEER_DRAIN_OUTPUT		;mldfcv007	;mw025	
	WAIT 1								;mw025
	PUTOUT PRM_MLD_BEER_DRAIN_OUTPUT, 0.0	;mldfcv007		;mw025    

;VCM001 GOSUB C90XV22                           ;CLOSE 8690XV22
        GOSUB C90XV23                           ;CLOSE 8690XV23
        GOSUB C90XV24                           ;CLOSE 8690XV24
;VCM001 GOSUB C90XV25                           ;CLOSE 8690XV25
        GOSUB C90XV26                           ;CLOSE 8690XV26
        GOSUB C90XV27                           ;CLOSE 8690XV27
        GOSUB C90XV28                           ;CLOSE 8690XV28
;VCM001 GOSUB C90XV29                           ;CLOSE 8690XV29
;VCM001 GOSUB C90XV38                           ;CLOSE 8690XV38
;        TURNOFF 'DYNALARM'          ;VCM002


        IF (SA_STATE != 8) & (SA_STATE != 19) THEN   ;Release state  ;VCM001
                BEGIN                             ;VCM001
                GOSUB C8690P11    ;STOP 8690P11   ;VCM001                      
                ;VCM020 GOSUB C8690P13    ;STOP 8690P13   ;VCM001                      
                GOSUB C90XV29     ;CLOSE 8690XV29 ;VCM001                      
                GOSUB C90XV25     ;CLOSE 8690XV25 ;VCM001                      
;joh024                GOSUB C90XV22     ;CLOSE 8690XV22 ;VCM001                      
;joh024                GOSUB C90XV12     ;CLOSE 8690XV12 ;VCM001                      
;VCM007                GOSUB C90XV38     ;CLOSE 8690XV38 ;VCM001                      
;joh024                GOSUB C90XV13     ;CLOSE 8690XV13 ;VCM001                      
;joh022		Update here
		GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
		GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
                '8690FI1':IOS_TG:1 = 0
                '8690FI1':IOS_TG:2 = 0
                '8690FI1':IOS_TG:3 = 0
					 DYN1_FLOW_BATCH:IOS_TG:1 = 1	;start integration
					 PUTAUTO DYN1_FLOW_BATCH
					 PUTAUTO DYN1_FLOW_DAILY
                END                               ;VCM001

        RETURN

;===============================================================================
;                       SET DEVICE 3     VCM001               
;===============================================================================
;
;

SETDEV3:

;mw025        '8690XV15':DEV_TMP0 = AND('8690XV15':DEV_TMP0,NOT(SEQAUTO))
;mw025        '8690XV16':DEV_TMP0 = AND('8690XV16':DEV_TMP0,NOT(SEQAUTO))
;mw025        '8690XV17':DEV_TMP0 = AND('8690XV17':DEV_TMP0,NOT(SEQAUTO))
        MLD_PRM_TRAP1_FILL_VLV:DEV_TMP0 = AND(MLD_PRM_TRAP1_FILL_VLV:DEV_TMP0,NOT(SEQAUTO))	;mw025
        MLD_PRM_TRAP2_FILL_VLV:DEV_TMP0 = AND(MLD_PRM_TRAP2_FILL_VLV:DEV_TMP0,NOT(SEQAUTO))     ;mw025
        MLD_PRM_TRAP3_FILL_VLV:DEV_TMP0 = AND(MLD_PRM_TRAP3_FILL_VLV:DEV_TMP0,NOT(SEQAUTO))     ;mw025
	MLD_PRM_DILUENT_VLV:DEV_TMP0 = AND(MLD_PRM_DILUENT_VLV:DEV_TMP0,NOT(SEQAUTO))   	;mw025fat

        GOSUB C8690P11                          ;STOP 8690P11
        GOSUB C8690P12                          ;STOP 8690P12
        ;VCM020 GOSUB C8690P13                          ;STOP 8690P13
        IF (CNTRPRESS_FG = 0) THEN   
              GOSUB C2XV31                    ;CLOSE 8502XV31
        ELSE
        IF (CNTRPRESS_FG = 1) THEN   
              GOSUB O2XV31                     ;OPEN 8502XV31

        GOSUB C2XV32                            ;CLOSE 8502XV32
        GOSUB C2XV310                           ;CLOSE 8502XV310
        GOSUB C2XV314                           ;CLOSE 8502XV314
;       GOSUB C2XV315                           ;CLOSE 8502XV315
        GOSUB C2XV316                           ;CLOSE 8502XV316
        GOSUB C2XV317                           ;CLOSE 8502XV317
        GOSUB C2XV318                           ;CLOSE 8502XV318
        GOSUB C2XV319                           ;CLOSE 8502XV319
        GOSUB C2XV320                           ;CLOSE 8502XV320
        GOSUB C90XV11                           ;CLOSE 8690XV11
;joh024        GOSUB C90XV12                           ;CLOSE 8690XV12
;joh024        GOSUB C90XV13                           ;CLOSE 8690XV13
;joh022		Update here
	GOSUB CLSDYNRELPCKGLNBLKVLV			;mldxv001		;joh022
;mw025        GOSUB C90XV14                           ;CLOSE 8690XV14
	GOSUB CLSDYNRELDILUENTVLV			;CLOSE MLDXV009	;mw025
;       GOSUB C90XV15                           ;CLOSE 8690XV15
;       GOSUB C90XV16                           ;CLOSE 8690XV16
;       GOSUB C90XV17                           ;CLOSE 8690XV17
;mw025        GOSUB C90XV18                           ;CLOSE 8690XV18
;joh024        GOSUB C90XV19                           ;CLOSE 8690XV19
;joh024        GOSUB C90XV20                           ;CLOSE 8690XV20
;joh024        GOSUB C90XV21                           ;CLOSE 8690XV21
;joh024        GOSUB C90XV22                           ;CLOSE 8690XV22
;joh022		Update here
	GOSUB CLSDYNRELBEERBLKVLV			;MLDXV008	;mw025
	GOSUB CLSDYNRELDILUENTBLKVLV			;MLDXV004	;joh022
	PUTMANL DYNREL_PRM_FCV_OUTPUT			;mldfcv001	;joh022
	WAIT 1								;joh022
	PUTOUT DYNREL_PRM_FCV_OUTPUT, 0.0	;mldfcv001	;joh022

	PUTMANL PRM_MLD_BEER_DRAIN_OUTPUT		;mldfcv007	;mw025	
	WAIT 1								;mw025
	PUTOUT PRM_MLD_BEER_DRAIN_OUTPUT, 0.0	;mldfcv007		;mw025    

	GOSUB CLSDYNRELBYPASSBLKVLV			;mldxv002		;joh022
        GOSUB C90XV23                           ;CLOSE 8690XV23
        GOSUB C90XV24                           ;CLOSE 8690XV24
        GOSUB C90XV25                           ;CLOSE 8690XV25
        GOSUB C90XV26                           ;CLOSE 8690XV26
        GOSUB C90XV27                           ;CLOSE 8690XV27
        GOSUB C90XV28                           ;CLOSE 8690XV28
        GOSUB C90XV29                           ;CLOSE 8690XV29
;VCM007        GOSUB C90XV38                           ;CLOSE 8690XV38
;        TURNOFF 'DYNALARM'          ;VCM002



        RETURN

;ldk000 added routine
;==============================================================================	
;	CLEAR DYNAMIC AVERAGES AT BATCH END
;==============================================================================
CLEARDYNAMICAVG:
;When batch ends, need to clear out all the dynamic average stuff...

	;Clear running total
	DYN_5F3_FILL_AVG:CAL_VAVL:2 = 0.0
	;Clear running averages
	DYN_5F3_FILL_AVG:CAL_VAVL:3 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:4 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:5 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:6 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:7 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:8 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:9 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:10 = 0.0
	DYN_5F3_FILL_AVG:CAL_VAVL:11 = 0.0

	;Clear any lingering trap filter batch total
	DYN_5F3_FILL_AVG:CAL_VAVL:1 = 0.0

	;Clear any trap OLBA average values
	DYN_5F3_FILL_AVG:CAL_VCVL:3 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:4 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:5 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:6 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:7 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:8 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:9 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:10 = 0.0
	DYN_5F3_FILL_AVG:CAL_VCVL:11 = 0.0

	RETURN		

;===============================================================================
;               C L O S E       D E V I C E     S U B R O U T I N E
;
;       This subroutine will attempt to open any device that it is
;       commanded to. The subroutine will check for five things:
;
;       if the program is already in failure hold (DEV_FAILED_FG)
;       if the device has been faulted ($f0)
;       if the device has been interlocked ($s4)
;       if the device is already closed ($s0)
;       if the device is in manual ($m0)
;
;===============================================================================
CLOSEDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

        IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
                GOTO OUTCLS

; if the fault bit is set, send the program to hold

        IF (AND(DEV_PTR:DEV_DFLG,F_0)) THEN
                GOTO FLTCLS

; if the interlock bit is set, return to the program

        IF (AND(DEV_PTR:DEV_STAT,S_4)) THEN
                GOTO OUTCLS

; if device is already closed
; then return to the program

        IF AND(DEV_PTR:DEV_STAT,S_0) THEN
                GOTO OUTCLS

        DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)     ;put device into auto

; close device and waituntil either device closes or faults
        CLOSE DEV_PTR
        WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_0) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTCLS

; if device is faulted
        IF AND(DEV_PTR:DEV_DFLG,F_0) THEN
                BEGIN
FLTCLS:         DEV_FAILED_FG = 1               ; set failure hold flag
                GOTO FAIL                       ; perform failure logic
                END
OUTCLS:

        RETURN


;===============================================================================
;               O P E N         D E V I C E     S U B R O U T I N E
;
;       This subroutine will attempt to open any device that it is
;       commanded to. The subroutine will check for five things:
;
;       if the program is already in failure hold (DEV_FAILED_FG)
;       if the device has been faulted ($f0)
;       if the device has been interlocked ($s4)
;       if the device is already open ($s1)
;       if the device is in manual ($m0) it will be put to auto
;
;===============================================================================
OPENDEV:

; if the program is already in failure hold
; and device faulted or interlocked (the cause of failure hold)
; then return to the program
; allowing the routine to continue will cause an infinite loop

        IF (DEV_FAILED_FG=1) & (AND(DEV_PTR:DEV_DFLG,F_0)|AND(DEV_PTR:DEV_STAT,S_4)) THEN
                GOTO OUTOPN

; if the fault bit is set or the interlock bit is set
; then send the program to fail
        IF (AND(DEV_PTR:DEV_DFLG,F_0) | AND(DEV_PTR:DEV_STAT,S_4)) THEN
                GOTO FLTOPN

; if device is already opened
; then return to the program
        IF AND(DEV_PTR:DEV_STAT,S_1) THEN
                GOTO OUTOPN

        DEV_PTR:DEV_MODE = OR(DEV_PTR:DEV_MODE,M_0)     ;put device into auto

; open device and waituntil either device opens or faults
        OPEN DEV_PTR
        WAITUNTIL (AND(DEV_PTR:DEV_STAT,S_1) | AND(DEV_PTR:DEV_DFLG,F_0)) COUNT 60,FLTOPN

; if device is faulted
        IF AND(DEV_PTR:DEV_DFLG,F_0) THEN
                BEGIN
FLTOPN:         DEV_FAILED_FG = 1               ; set failure hold flag
                GOTO FAIL
                END
OUTOPN:

        RETURN



#include <openremdev.inc>					 /* joh022 */
#include <closremdev.inc>					 /* joh022 */
#include <brandtable.inc>					/* joh022 */
;*******************************************************************************
;
;       ERROR HANDLING SUBROUTINE
;
;*******************************************************************************
;
;       ERROR_NUM:      Error number storage
;       ERROR_LIN:      Error line storage
;
;       This subroutine handles any error problems resulting from the
;       execution of this program. Each error is handled in 3 different
;       ways. If the error is insignificant, it is ignored and the program
;       returns to resume execution. If the error is significant but not
;       critical (valid), it is reported to printer and program continues
;       normal execution. If it is critical the program suspends execution
;       a message is printed to the printer, and SKD light is blinked.
;
;       List of specifically handled errors:
;
;       Error   Description                             Type
;       -----   -----------                             ----
;       19      program already in kick subroutine      valid
;       32      undefined communications packet type    insignificant
;       41      pcm db header not loaded                insignificant
;       69      ipn not defined                         insignificant
;       87      Holding program that is not running     critical
;       162     no such program this pcm                insignificant
;       165     sequence program already running        critical
;       170     serial number mismatch                  critical
;       179     illegal subroutine                      insignificant
;       187     could not be remote access              insignificant
;       193     no such program this pcm                valid
;       198     illegal subroutine stack nesting        insignificant
;       199     illegal recipe data file                critical
;       200     recipe file not loaded inot memory      critical
;       201     recipe load not enabled                 critical
;       222     boards dead                             insignificant
;       226     board error                             insignificant
;       245     both pcms down                          insignificant

ERRSUB:
        ERROR_NUM = ABS(ERRNUM())
        ERROR_LIN = ERRLIN()

        LAMP LAMP_ADI,LAMP_NUMBER,RED           ; skd flash red
        LAMP LAMP5_ADI,LAMP5_NUMBER,RED           ; skd flash red
        LAST_LAMP_STATE = RED

        IF (ERROR_NUM = 902) THEN
                FAIL_MSG = "MODICON COMM PROBLEM"
        ELSE IF (ERROR_NUM = 187) THEN
                BEGIN          ;VCM012
                IF (SA_STATE = 8) | (SA_STATE = 19) THEN
                   BEGIN
                   ERROR_187_COUNT = (ERROR_187_COUNT + 1)
                   PRINT LOG_ADI, "*RELEASE ERROR 187 #%i AT LINE %i ***",ERROR_187_COUNT,ERROR_LIN
                   IF (ERROR_187_COUNT <= 5) THEN
                      BEGIN
                      ERSCLR
                      IF (SA_STATE = 8) THEN  ;FILL/RELEASE
                         BEGIN
                         WAIT 1
								 STACKCLR  ;VCM019
                         GOTO DYN8SS
                         END
                      IF (SA_STATE = 19) THEN ;RELEASE
                         BEGIN
                         WAIT 1
								 STACKCLR  ;VCM019
                         GOTO DYN19SS
                         END
                      END
                   END
                FAIL_MSG = "CROSS PCM COMMUNICATION ERROR"
                END
        ELSE
                FAIL_MSG = "PROGRAM ERROR"

        PRINT LOG_ADI, "*** ERROR %i AT LINE %i ***",ERROR_NUM,ERROR_LIN

        IF (COMPAR(SEQ_STATUS,"FAIL",4,NE)) THEN
                BEGIN
                ERSCLR
                GOTO FAIL
                END
        SA_MESSAGE = FAIL_MSG
        ERSRET

        NOP
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        END
