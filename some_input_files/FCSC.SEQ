;******************************************************************************
;*									                                                   *
;*									                                                   *
;*	PROGRAM NAME:	D3APP\SETUP\SPECIFIC\PCM4\SABL\ FCSC.SEQ		               *
;*									                                                   *
;*									                                                   *
;*	PROJECT NAME:	MILLER BREWING			                                       *
;*	PROJECT NUM :	FASS MATRIX IMPROVEMENTS    					                  *
;*	PCM NUMBER  :	PCM4						                                       *
;*	WRITTEN BY  :						                                             *
;*	DATE	      :	NOVEMBER 9, 2005					                              *
;*									                                                   *
;******************************************************************************
;
;	MODIFICATION LOG
;
;	DATE		   PATCH ID	   DESCRIPTION
;	----		   --------	   -----------
;  28-Nov-05   fly000      Code standardized and rewritten to run pcm relative.
;  12-12-05    LDKPHASEI   This code is for phaseI.  When CFG1 and CFG4 are enabled
;                          to swing between coolers, this code must be disabled and the 
;                          code commented out with LDKPHASEIV must be enabled.
;  12-30-05    ldk000      Initialize variables for CIP sequence
;  1-09-06     ldk001      Assign pointers to local conductivity probe EPNs
;	06-jun-2013	acj002		CIP OPTIMIZATION PROJECT - Change cip times.
;*******************************************************************************
;
;       PROGRAM FUNCTION:       This program performs the sequence
;       ----------------        control for the fass cooler CIP system
;
;*******************************************************************************
;
;       DEFINE UNITS
;       ------------

   UNIT PRIM1
   COMMON CFGCM,ALLOF4,CIP90COM,CIP901,ALLOF8
   RUNIT PRIM2

#include <fcool_unit.h>		   /* Unit, variable & epn definitions */

;*******************************************************************************
;		SET ERROR SUBROUTINES
;*******************************************************************************

	ON ERROR GOSUB ERRSUB		;define error handling routine


;*******************************************************************************
;*******************************************************************************
;               M A I N
;*******************************************************************************
;*******************************************************************************
MAIN:

	GOSUB SCINIT		      ;Initialize program

MAINLOOP:

	GOSUB HOLDCMD		      ;Hold command
	GOSUB CONTCMD		      ;Continue command
 	GOSUB MSGCLR		      ;Clear sc msg & step tmr
	GOSUB CIPCMD		      ;CIP command
   GOSUB ATNSCMD           ;Advance to next step
   GOSUB CQSTEMPDEV        ;Check CQS Temperature deviation
   GOSUB ABORTCIPCMD       ;Abort CIP command
   IF (PGMSTAT("FCCIP") = NOT_RUNNING) & ((SA_STATE = 1) | (SA_STATE = 0)) THEN    
      BEGIN                    
      SA_STATUS = "SYSTEM OFF"
      SA_MESSAGE = "CIP NOT RUNNING"
      FCOOL_CIP_RUN_FG_PTR = 0                                       
      END                                    
   ELSE
      FCOOL_CIP_RUN_FG_PTR = 1                                       

	WAIT 1
	GOTO MAINLOOP

;*******************************************************************************
;*******************************************************************************
;		S U B R O U T I N E S
;*******************************************************************************
;*******************************************************************************
;
;===============================================================================
;		PROGRAM INITIALIZATION (STANDARD SHELL SUBROUTINE)
;===============================================================================
SCINIT:

   SC_SA_ATNS_CMD = 0
   SC_SA_CONT_CMD = 0
   ATNS_CMD = 0
   CONT_CMD = 0
   HOLD_CMD = 0
   CIP_CMD = 0

	TIMERCLR SC_MSG_TMR			            ;Clear sc message timer
	TIMERON SC_MSG_TMR			            ;Turnon sc message timer

	SC_MESSAGE = "SC PRGM STARTED"

	IF (ALREADY_INITIALIZED_FG) THEN	      ;If already initialized
		RETURN

   IBAD_FG = 0
   DEV_IN_MANUAL_FG = 0

	IBAD_SECONDS = 60				                              ;Ibad time (sec)
	SC_MSG_TIME = 20			                              ;Sc message time (sec)
   TIMEOUT = 20                  

;acj002   PRERINSE_STIME = 300
	PRERINSE_STIME = 120		;acj002
   CAUSTIC_STIME = 1200
   FIRST_RINSE_STIME = 600
   CHLOR_RINSE_STIME = 480
   FINAL_RINSE_STIME = 600

   FLOW_DELAY_STIME = 300                
   CSS_VLV_OUT = 50                
   CSS_AUTO_SETPT = 300   
   PUMP_DELAY_STIME = 10    
   CHLORINE_RINSE_MODE = 2                                           ;0 = no chlorine or final rinse
                                                                     ;1 = chlorine only, 2 = both        
   DEBREW_STIME = 600                       
   SEAT_LIFTER_ON_STIME = 5
   SEAT_LIFTER_OFF_STIME	= 300
   CSS_LOW_FLOW = 100
   CSS_LOW_FLOW_STIME = 30
   CHLORINE_CHK_DELAY_STIME = 60

   CSR_SUS_CONDUCT_STIME = 10               ;For sustained condition of caustic at CSR
   CIP_DETECT_MAX_STIME = 60
   WATER_CONDUCTIVITY = .25
   CAUSTIC_CONDUCTIVITY = 1.5

	GETUNIT UNIT_NUMBER	                                    ;Get unit number, unit sg

   IF (UNIT_NUMBER = 26) THEN                               ;fcool1
      BEGIN
      ASSIGN FCOOL_CIP_RUN_FG_PTR = FC1CIP_RUN_FG
      ASSIGN CIP_REQ_PTR = CIP_901_FASS_COOLER1_REQ
      ASSIGN CQS_ACK_INT_PTR = CQS1_ACK_INT
      ASSIGN CQS_TMP_MSG_TIME_PTR = CQS1_TMP_MSG_TIME
      UNIT_SG = "FCOOL1"
      LAMP_NUMBER = 30
;      CENT_FEED_TNK_SEL_REQ = 1
      ASSIGN CIP901_CSR_COND_PTR = '8230CI33A'
      END
   ELSE IF (UNIT_NUMBER = 3) THEN                               ;fcool2
      BEGIN
      ASSIGN FCOOL_CIP_RUN_FG_PTR = FC2CIP_RUN_FG
      ASSIGN CIP_REQ_PTR = CIP_901_FASS_COOLER2_REQ
      ASSIGN CQS_ACK_INT_PTR = CQS2_ACK_INT
      ASSIGN CQS_TMP_MSG_TIME_PTR = CQS2_TMP_MSG_TIME
      UNIT_SG = "FCOOL2"
      LAMP_NUMBER = 30
;      CENT_FEED_TNK_SEL_REQ = 2
;rmaxxx      ASSIGN CIP901_CSR_COND_PTR = '8230CI33B'
      ASSIGN CIP901_CSR_COND_PTR = '8230CI33'
      END

   FCOOL_CIP_RUN_FG_PTR = 0                      ;fcool1/fcool2 difference 

   ALREADY_INITIALIZED_FG = 1      ;only do this once at PCM bootup
                                     
;===============================================================================
;		CIP COMMAND
;===============================================================================
CIPCMD:

	IF (CIP_CMD) THEN
		BEGIN
	   IF (PGMSTAT("FCCIP") != NOT_RUNNING) THEN
			SC_MESSAGE = "INVALID - CIP RUNNING"
		ELSE IF COMPAR(SEQ_STATUS,"FAIL", 4, EQ) THEN
			SC_MESSAGE = "INVALID - SEQ IN FAIL"
		ELSE IF COMPAR(SEQ_STATUS,"HOLD" ,4, EQ) THEN
			SC_MESSAGE = "INVALID - SEQ IN HOLD"
      ELSE IF (CFG1_RUN_GROUP_SEL = 1) & (CFG1_FC_USE_CFGCM >= 1) & (UNIT_NUMBER = 26) THEN   ;LDKPHASEIV
;LDKPHASEI      ELSE IF (CFG1_FC_USE_CFGCM >= 1) THEN   
         SC_MESSAGE = "CENT1 USING FASS COOLER"                
      ELSE IF (CFG4_RUN_GROUP_SEL = 1) & (CFG4_FC_USE_ALLOF8 >= 1) & (UNIT_NUMBER = 26)  THEN   ;LDKPHASEIV
;LDKPHASEI      ELSE IF (CFG4_FC_USE_ALLOF8 >= 1) THEN   
         SC_MESSAGE = "CENT4 USING FASS COOLER" 
      ELSE IF (CFG7_RUN_GROUP_SEL = 1) & (CFG7_FC_USE_CFGCM >= 1) & (UNIT_NUMBER = 26)  THEN   
         SC_MESSAGE = "CENT7 USING FASS COOLER"                
      ELSE IF (CFG8_RUN_GROUP_SEL = 1) & (CFG8_FC_USE_ALLOF8 >= 1) & (UNIT_NUMBER = 26) THEN   
         SC_MESSAGE = "CENT8 USING FASS COOLER"                
      ELSE IF (CFG1_RUN_GROUP_SEL = 2) & (CFG1_FC_USE_CFGCM >= 1) & (UNIT_NUMBER = 3) THEN   ;LDKPHASEIV
;LDKPHASEI      ELSE IF (CFG1_FC_USE_CFGCM >= 1) THEN   
         SC_MESSAGE = "CENT1 USING FASS COOLER"                
      ELSE IF (CFG4_RUN_GROUP_SEL = 2) & (CFG4_FC_USE_ALLOF8 >= 1) & (UNIT_NUMBER = 3)  THEN   ;LDKPHASEIV
;LDKPHASEI      ELSE IF (CFG4_FC_USE_ALLOF8 >= 1) THEN   
         SC_MESSAGE = "CENT4 USING FASS COOLER" 
      ELSE IF (CFG7_RUN_GROUP_SEL = 2) & (CFG7_FC_USE_CFGCM >= 1) & (UNIT_NUMBER = 3)  THEN   
         SC_MESSAGE = "CENT7 USING FASS COOLER"                
      ELSE IF (CFG8_RUN_GROUP_SEL = 2) & (CFG8_FC_USE_ALLOF8 >= 1) & (UNIT_NUMBER = 3) THEN   
         SC_MESSAGE = "CENT8 USING FASS COOLER"                
      ELSE IF (CFG9_CONNECTED_FG_ALLOF4 = 1) & INSTR(UNIT_SG,"FCOOL1") THEN   
         SC_MESSAGE = "CENT9 USING FASS COOLER" 
      ELSE IF (CFG10_CONNECTED_FG_ALLOF4 = 1) & INSTR(UNIT_SG,"FCOOL2") THEN   
         SC_MESSAGE = "CENT10 USING FASS COOLER" 
      ;cross pcm communcation - flags from PCM6
      ELSE IF (CIP_901_BUSY_FG_ALLOF4 | CIP_901_INUSE_FG_ALLOF4 | CIP90_CAUS_MAKEUP_RUN_FG_ALLOF4) THEN
         SC_MESSAGE = "CIP 901 SYSTEM BUSY"
      ;reservation for 8400XV107 - shared betwen FCOOL coolers and cft
      ELSE IF (!INSTR(CFT_FCOOL_CIP90_RESERVE_SG_ALLOF4,UNIT_SG) & STRLEN(CFT_FCOOL_CIP90_RESERVE_SG_ALLOF4) > 2) THEN
         SC_MESSAGE = "CIP90 SUPPLY IN USE BY CFT"
;      IF (CENT_FEED_TNK_SEL_REQ < 1) | (CENT_FEED_TNK_SEL_REQ > 2) THEN
;         SC_MESSAGE = "INVALID CFG FEED TANK SELECTED"
		ELSE
			BEGIN
			IF (PGMSTAT("FCCIP") = NOT_RUNNING) THEN
				BEGIN
;            CENT_FEED_TNK_SEL = CENT_FEED_TNK_SEL_REQ
				SA_STATE = 0				
				RUN "FCCIP"		                                    ;run seq administrator
				WAITUNTIL (PGMSTAT("FCCIP")!= NOT_RUNNING) COUNT 20, TO3
TO3:
				IF (PGMSTAT("FCCIP") != NOT_RUNNING) THEN
					SC_MESSAGE = "CIP START COMMAND ACCEPTED"
				ELSE
					SC_MESSAGE = "CIP PROGRAM START FAILED"
				PRINT LOG_ADI, "FCSC PGM %p", SC_MESSAGE
            CIP_REQ_PTR = CIP_REQUEST
				FCOOL_CIP_RUN_FG_PTR = 1    ;Fcool1/fcool2 difference                                   
				END
			END
;LDKXXX      CIP_REQ_PTR = CIP_RELEASE
		TIMERCLR SC_MSG_TMR
		CIP_CMD = 0
		END

	RETURN

;===============================================================================
;		ABORT CIP IN SETUP CHECK
;===============================================================================
ABORTCIPCMD:

	IF (ESTOP_CIP_CMD) THEN	                        ;Check cmd from operator
		BEGIN
		IF (PGMSTAT("FCCIP") = NOT_RUNNING) THEN
			SC_MESSAGE = "INVALID - CIP PRGM NOT RUNNING"
		ELSE IF (COMPAR(SEQ_STATUS,"HOLD",4,NE)) THEN
			SC_MESSAGE = "INVALID - SEQ NOT HELD"
		ELSE IF COMPAR(SA_STATUS,"SETUP CHECK",11,NE) THEN
			SC_MESSAGE = "INVALID - NOT IN SETUP CHECK"
		ELSE
			BEGIN
			SC_MESSAGE = "ABORT CIP CMD ACCEPTED"
			PRINT LOG_ADI,"%p", SC_MESSAGE
			ESTOP_CIP_FG = 1
			END
		TIMERCLR SC_MSG_TMR		                  ;Clear sc message timer
		ESTOP_CIP_CMD = 0			                  ;Clear cmd from operator
		END

	RETURN

;===============================================================================
;		HOLD (STANDARD SHELL SUBROUTINE)
;===============================================================================
HOLDCMD:

	IF (HOLD_CMD) THEN	;Check cmd from operator
		BEGIN
		IF (PGMSTAT("FCCIP") = NOT_RUNNING) THEN
			SC_MESSAGE = "INVALID - CIP PRGM NOT RUNNING"
		ELSE IF (COMPAR(SEQ_STATUS,"HOLD",4,EQ)) THEN
			SC_MESSAGE = "INVALID - SEQ IN HOLD"
		ELSE
			BEGIN
		   HOLD "FCCIP"		                                 ;Interrupt cip program
			PRINT LOG_ADI,"HOLD CIP PRGM BY HOLD CMD"
			SC_MESSAGE = "HOLD CMD ACCEPTED"
			PRINT LOG_ADI,"%p", SC_MESSAGE
			END
		TIMERCLR SC_MSG_TMR		                                       ;Clear sc message timer
		HOLD_CMD = 0			                                          ;Clear cmd from operator
		END

	RETURN

;===============================================================================
;		CONTINUE (STANDARD SHELL SUBROUTINE)
;===============================================================================
CONTCMD:

	IF (CONT_CMD) THEN	                           ;Check cmd from operator
		BEGIN
		IF (PGMSTAT("FCCIP") = NOT_RUNNING) THEN
			SC_MESSAGE = "INVALID - SA PRGM NOT RUNNING"
		ELSE IF COMPAR(SEQ_STATUS,"HOLD",4,NE) & COMPAR(SEQ_STATUS,"FAIL",4,NE) THEN
			SC_MESSAGE = "INVALID - SEQ NOT IN HOLD/FAIL"
		ELSE
			BEGIN
			SC_SA_CONT_CMD = 1	                     ;Set sc sa cmd
			SC_MESSAGE = "CONTINUE CMD ACCEPTED"
			PRINT LOG_ADI,"%p ",SC_MESSAGE
			END
		TIMERCLR SC_MSG_TMR			                  ;Clear sc message timer
		CONT_CMD = 0			                        ;Clear cmd from operator
		END

	RETURN

;===============================================================================
;		ATNS (Advance To Next Step) (STANDARD SHELL SUBROUTINE)
;===============================================================================
ATNSCMD:

	IF (ATNS_CMD) THEN	                                             ;Check cmd from operator
		BEGIN
		IF (PGMSTAT("FCCIP") = NOT_RUNNING) THEN
			SC_MESSAGE = "INVALID - CIP PRGM NOT RUNNING"
      IF (COMPAR(SA_STATUS,"SETUP CHECK",11,EQ) | (SA_STATE >= 9)) THEN
         SC_MESSAGE = "INVALID IN CURRENT STATE"
		ELSE
			BEGIN
			IF COMPAR(SEQ_STATUS,"HOLD",4,NE) & COMPAR(SEQ_STATUS,"FAIL",4,NE) THEN
				BEGIN
				IF (PGMSTAT("FCCIP") != NOT_RUNNING) THEN
					HOLD "FCCIP"		                              ;Interrupt sa program
				ELSE IF (PGMSTAT("FCCIP") != NOT_RUNNING) THEN
					HOLD "FCCIP"		                           ;Interrupt cip program
				PRINT LOG_ADI,"HOLD SA PRGM BY ATNS CMD"
				END
			SC_SA_ATNS_CMD = 1	                                    ;Set sc sa cmd
			SC_MESSAGE = "ATNS CMD ACCEPTED"
			PRINT LOG_ADI,"%p ",SC_MESSAGE
			END
		TIMERCLR SC_MSG_TMR		                                    ;Clear sc message timer
		ATNS_CMD = 0			                                       ;Clear cmd from operator
		END

	RETURN

;*******************************************************************************
;               CQS TEMP DEVIATION MESSAGE  
;*******************************************************************************
CQSTEMPDEV:

   IF (PGMSTAT("FCCIP") != NOT_RUNNING) THEN
      RETURN

   IF (INSTR(UNIT_SG,"FCOOL1")) THEN
      BEGIN
		IF (CFG1_RUN_GROUP_SEL = 1) THEN
			TEMP_SC_FG = (COMPAR(CFG1_SA_STATUS_CFGCM,"RUN PROCESS",11,EQ))     ;LDKPHASEIV
		IF (CFG4_RUN_GROUP_SEL = 1) THEN 
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG4_SA_STATUS_ALLOF8,"RUN PROCESS",11,EQ))    ;LDKPHASEIV
		IF (CFG7_RUN_GROUP_SEL = 1) THEN 
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG7_SA_STATUS_CFGCM,"RUN PROCESS",11,EQ))
		IF (CFG8_RUN_GROUP_SEL = 1) THEN                                                          
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG8_SA_STATUS_ALLOF8,"RUN PROCESS",11,EQ))   
		IF (CFG9_CONNECTED_FG_ALLOF4 = 1) THEN                                                          
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG9_SA_STATUS_ALLOF4,"RUN PROCESS",11,EQ))   
      TEMP_SC_FG = TEMP_SC_FG & (CQS1_ACK_INT = 0) & (CQS2_ACK_INT != 1) 
      END
   IF (INSTR(UNIT_SG,"FCOOL2")) THEN
      BEGIN
		IF (CFG1_RUN_GROUP_SEL = 2) THEN
			TEMP_SC_FG = (COMPAR(CFG1_SA_STATUS_CFGCM,"RUN PROCESS",11,EQ))     ;LDKPHASEIV
		IF (CFG4_RUN_GROUP_SEL = 2) THEN 
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG4_SA_STATUS_ALLOF8,"RUN PROCESS",11,EQ))    ;LDKPHASEIV
		IF (CFG7_RUN_GROUP_SEL = 2) THEN 
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG7_SA_STATUS_CFGCM,"RUN PROCESS",11,EQ))
		IF (CFG8_RUN_GROUP_SEL = 2) THEN                                                          
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG8_SA_STATUS_ALLOF8,"RUN PROCESS",11,EQ))   
		IF (CFG10_CONNECTED_FG_ALLOF4 = 1) THEN                                                          
			TEMP_SC_FG = TEMP_SC_FG | (COMPAR(CFG10_SA_STATUS_ALLOF4,"RUN PROCESS",11,EQ)) 
      TEMP_SC_FG = TEMP_SC_FG & (CQS2_ACK_INT = 0) & (CQS1_ACK_INT != 1) 
		END


   IF (!TEMP_SC_FG & (CQS_ACK_INT_PTR > 0)) THEN
      CQS_ACK_INT_PTR = 0
   IF (TEMP_SC_FG) THEN
		BEGIN
      CQS_TMP_MSG_TIME_PTR = CQS_TIMER
      CQS_ACK_INT_PTR = 1
      END
   IF (TEMP_SC_FG & (CQS_TIMER > (CQS_TMP_MSG_TIME_PTR + 60)) & (CQS_ACK_INT_PTR = 1)) THEN
      BEGIN
      IF (INSTR(UNIT_SG,"FCOOL1")) THEN
         TEMP_SC_FG = (ABS('8632TC11':AI_MEAS - '8632TI11A':AI_MEAS) > 1) 
      ELSE
         TEMP_SC_FG = (ABS('8632TC21':AI_MEAS-'8632TI21A':AI_MEAS) > 1) 
      IF (TEMP_SC_FG) THEN
         BEGIN
         IF (INSTR(SA_4_MESSAGE,"ACKNOWLEDGE MESSAGE") & MSG_ACK_CMD) THEN
            BEGIN
            SA_4_MESSAGE = ""                
            SA_5_MESSAGE = ""                
            CQS_ACK_INT_PTR = 2               
            OPER_RESPONSE = ""             
            LAMP LAMP_ADI,LAMP_NUMBER,GREEN
            MSG_ACK_CMD = 0
            END      
         ELSE
            BEGIN                      
            SA_4_MESSAGE = "FASS 1 CQS TEMP DEV > 1 DEG"
            SA_5_MESSAGE = "ACKNOWLEDGE MESSAGE"
            LAMP LAMP_ADI,LAMP_NUMBER,YELLOW
            END
         END
      END                              

   RETURN

;==============================================================================
;          SC MESSAGE CLEAR
;==============================================================================
MSGCLR:

   ;Each time a new sc message is sent, the sc message timer is cleared.
   ;Once this timer has reached a value greater than SC_MSG_TIME
   ;the sc message is cleared.
   IF (SC_MSG_TMR > SC_MSG_TIME) THEN
      BEGIN
      SC_MESSAGE = ""                         ;clear the sc message
      TIMERCLR SC_MSG_TMR                             ;and reset the timer
      END

   ;If the SA step timer reaches 32700 seconds, set the timer back to 0
   ;to prevent the timer wrapping around at 32767 seconds and shutting
   ;itself off.
   IF (STEP_TMR > 32700) THEN
      TIMERCLR STEP_TMR

   RETURN

;*******************************************************************************
;
;       ERROR HANDLING SUBROUTINE
;
;*******************************************************************************
;
;       ERROR_NUM_INT:      Error number storage
;       ERROR_LIN_INT:      Error line storage
;
;       This subroutine handles any error problems resulting from the
;       execution of this program. Each error is handled in 3 different
;       ways. If the error is insignificant, it is ignored and the program
;       returns to resume execution. If the error is significant but not
;       critical (valid), it is reported to printer and program continues
;       normal execution. If it is critical the program suspends execution
;       a message is printed to the printer, and SKD light is blinked.
;
;       List of specifically handled errors:
;
;       Error   Description                             Type
;       -----   -----------                             ----
;       19      program already in kick subroutine      valid
;       32      undefined communications packet type    insignificant
;       41      pcm db header not loaded                insignificant
;       69      ipn not defined                         insignificant
;       87      Holding program that is not running     critical
;       162     no such program this pcm                insignificant
;       165     sequence program already running        critical
;       170     serial number mismatch                  critical
;       179     illegal subroutine                      insignificant
;       187     could not be remote access              insignificant
;       193     no such program this pcm                valid
;       198     illegal subroutine stack nesting        insignificant
;       199     illegal recipe data file                critical
;       200     recipe file not loaded inot memory      critical
;       201     recipe load not enabled                 critical
;       222     boards dead                             insignificant
;       226     board error                             insignificant
;       245     both pcms down                          insignificant

ERRSUB:
   ERROR_NUM_INT = ABS(ERRNUM())
   ERROR_LIN_INT = ERRLIN()

   ;if error is valid, print message, clear error, and return to program
   PRINT LOG_ADI, "*** ERROR %i AT LINE %i ***",ERROR_NUM_INT,ERROR_LIN_INT

   ;if error crtical, message has been printed, blink SKD light
   ;and display message

   ;fccip sets last lamp state in stateinit routine.  Did not      
   ;add to other lamp statements in fccip.                         
   IF (LAST_LAMP_STATE != RED) THEN        ; if not already red    
      BEGIN                                ;                       
      LAMP LAMP_ADI,LAMP_NUMBER,RED        ; skd flash red
      LAST_LAMP_STATE = RED                ; save lamp status      
      END                                  ;                       

   IF (ERROR_NUM_INT = 187) THEN                               
      SC_MESSAGE = "CROSS PCM COMMUNICATION ERROR"    
   ELSE                                                    
      SC_MESSAGE = "FCSC PROGRAM ERROR"                
   TIMERCLR SC_MSG_TMR                     ; clear message timer

   WAIT 30
   ERSCLR                                  ; clear error return    
   STACKCLR
   GOTO MAIN                               ; start again at top    

;*******************************************************************************
	NOP
	END

